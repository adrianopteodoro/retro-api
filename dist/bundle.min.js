/*! For license information please see bundle.min.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Js:()=>g,$W:()=>u,ui:()=>m,sT:()=>p});const t="retroApiConfig";class Config{get version(){return this._cfg.version??"0"}set version(e){this._cfg.version=e,this.writeConfiguration()}get API_KEY(){return this._cfg.identification.RAApi_key}set API_KEY(e){this._cfg.identification.RAApi_key=e,this.writeConfiguration()}get USER_NAME(){return this._cfg.identification.RAApi_login}set USER_NAME(e){this._cfg.identification.RAApi_login=e,this.writeConfiguration()}get identConfirmed(){return this._cfg.identification.identConfirmed??!1}set identConfirmed(e){this._cfg.identification.identConfirmed=e,this.writeConfiguration()}get DISCORD_WEBHOOK(){return this._cfg.discordWebhook}set DISCORD_WEBHOOK(e){this._cfg.discordWebhook=e,this.writeConfiguration()}get userImageSrc(){return this._cfg.identification.userImageSrc||""}set userImageSrc(e){this._cfg.identification.userImageSrc=e,this.ui.buttons&&(ui.buttons.userImage.src=e),this.writeConfiguration()}get startOnLoad(){return this._cfg.settings.startOnLoad}set startOnLoad(e){this._cfg.settings.startOnLoad=e,this.writeConfiguration()}get targetUser(){return this._cfg.settings.targetUser||this.USER_NAME}set targetUser(e){this._cfg.settings.targetUser=e,this.writeConfiguration(),this.identConfirmed&&(ui.settings.getLastGameID(),ui.awards.updateAwards())}get gameID(){return this._cfg.settings.gameID}set gameID(e){this._cfg.settings.gameID=e,this.writeConfiguration()}get updateDelay(){return this._cfg.settings.updateDelay}get updateDelayInMiliSecs(){return 1e3*this._cfg.settings.updateDelay}set updateDelay(e){let t=parseInt(e)>0?e:5;this._cfg.settings.updateDelay=t,this.writeConfiguration()}get bgVisibility(){return this._cfg.settings.bgVisibility??!0}set bgVisibility(e){this._cfg.settings.bgVisibility=e,this.writeConfiguration()}get targetMoveToTop(){return this._cfg.settings.targetMoveToTop}set targetMoveToTop(e){this._cfg.settings.targetMoveToTop=e,this.writeConfiguration()}get ui(){return this._cfg.ui}get mainColor(){return this._cfg.settings.mainColor??s.default.mainColor}get secondaryColor(){return this._cfg.settings.secondaryColor??s.default.secondaryColor}get accentColor(){return this._cfg.settings.accentColor??s.default.accentColor}get fontColor(){return this._cfg.settings.fontColor??s.default.fontColor}get selectionColor(){return this._cfg.settings.selectionColor??s.default.selectionColor}set mainColor(e){this._cfg.settings.mainColor=e,this.writeConfiguration()}set secondaryColor(e){this._cfg.settings.secondaryColor=e,this.writeConfiguration()}set accentColor(e){this._cfg.settings.accentColor=e,this.writeConfiguration()}set fontColor(e){this._cfg.settings.fontColor=e,this.writeConfiguration()}set selectionColor(e){this._cfg.settings.selectionColor=e,this.writeConfiguration()}get colorsPreset(){return this._cfg.settings.preset||"default"}set colorsPreset(e){this._cfg.settings.preset=e,this.writeConfiguration()}constructor(){this.readConfiguration()}getColors(e){return this.colorsPreset=e,"custom"===e?{mainColor:this.mainColor,secondaryColor:this.secondaryColor,accentColor:this.accentColor,fontColor:this.fontColor,selectionColor:this.selectionColor}:s[e]||s.default}setNewPosition({id:e,xPos:t,yPos:s,width:i,height:n,hidden:o}){this._cfg.ui.hasOwnProperty(e)||(this._cfg.ui[e]={id:e,x:t,y:s,width:i,height:n,hidden:o}),t&&(this._cfg.ui[e].x=t),s&&(this._cfg.ui[e].y=s),i&&(this._cfg.ui[e].width=i+"px"),n&&(this._cfg.ui[e].height=n+"px"),void 0!==o&&(this._cfg.ui[e].hidden=o),this.writeConfiguration()}readConfiguration(){let e=JSON.parse(localStorage.getItem(t));e||(e={identification:{RAApi_key:"",RAApi_login:""},settings:{updateDelay:5,sort:"default",gameID:1,ACHIV_MAX_SIZE:150,ACHIV_MIN_SIZE:30},ui:{}}),this._cfg=e,localStorage.setItem(t,JSON.stringify(this._cfg)),this.writeConfiguration()}delayedWrite;writeConfiguration(){clearTimeout(this.delayedWrite),this.delayedWrite=setTimeout((()=>{localStorage.setItem(t,JSON.stringify(this._cfg))}),1e3)}}const s={pink:{mainColor:"#F2BED1",secondaryColor:"#FDCEDF",accentColor:"#F8E8EE",fontColor:"#000000",selectionColor:"#FF5BAE"},lightgreen:{mainColor:"#A5DD9B",secondaryColor:"#C5EBAA",accentColor:"#F2C18D",fontColor:"#000000",selectionColor:"#F6F193"},lightblue:{mainColor:"#89CFF3",secondaryColor:"#A0E9FF",accentColor:"#00A9FF",fontColor:"#000000",selectionColor:"#CDF5FD"},blue:{mainColor:"#008DDA",secondaryColor:"#41C9E2",accentColor:"#ACE2E1",fontColor:"#000000",selectionColor:"#F7EEDD"},synthwave:{mainColor:"#5D0E41",secondaryColor:"#A0153E",accentColor:"#FF204E",fontColor:"#dedede",selectionColor:"#00224D"},darkblue:{mainColor:"#1f1f1f",secondaryColor:"#303134",accentColor:"#34517d",fontColor:"#d6d6d6",selectionColor:"#2c303d"},brown:{mainColor:"#481E14",secondaryColor:"#9B3922",accentColor:"#0C0C0C",fontColor:"#eeeeee",selectionColor:"#F2613F"},pastel:{mainColor:"#51829B",secondaryColor:"#9BB0C1",accentColor:"#F6995C",fontColor:"#000",selectionColor:"#EADFB4"},retro:{mainColor:"#1D2B53",secondaryColor:"#333A73",accentColor:"#387ADF",fontColor:"#cdcdcd",selectionColor:"#FBA834"},vintage:{mainColor:"#222831",secondaryColor:"#31363F",accentColor:"#76ABAE",fontColor:"#eeeeee",selectionColor:"#EEEEEE"},neon:{mainColor:"#7E2553",secondaryColor:"#FF004D",accentColor:"#FAEF5D",fontColor:"#000000",selectionColor:"#50C4ED"},gray:{mainColor:"#808080",secondaryColor:"#757575",accentColor:"#cfcfcf",fontColor:"#000000",selectionColor:"#2ab754"},default:{mainColor:"#070F2B",secondaryColor:"#1B1A55",accentColor:"#535C91",fontColor:"#eeeeee",selectionColor:"#9290C3"}},i={gameCard:"./elements/gameCard.elem",about:"./elements/about.elem",target:"./elements/target.elem",achievements:"./elements/progression.elem",login:"./elements/login.elem",panel:"./elements/side-panel.elem",gamePopup:"./elements/gamePopup.elem",awards:"./elements/awards.elem",status:"./elements/status.elem",games:"./elements/games.elem",note:"./elements/note.elem",user:"./elements/userInfo.elem",notification:"./elements/notification.elem",stats:"./elements/stats.elem"};class UI{VERSION="0.45";static RECENT_ACHIVES_RANGE_MINUTES=5;static AUTOCLOSE_CONTEXTMENU=!1;static STICK_MARGIN=10;get ACHIEVEMENTS(){return this.GAME_DATA.Achievements}get GAME_DATA(){return this._gameData}set GAME_DATA(e){this.GAME_DATA&&e.ID!=this.GAME_DATA?.ID&&this.notifications.pushNotification({type:this.notifications.types.newGame,elements:e}),this._gameData=e,this.achievementsBlock.forEach((e=>e.parseGameAchievements(this.GAME_DATA))),this.statusPanel.gameChangeEvent(),this.gameCard.updateGameCardInfo(this.GAME_DATA),this.target.AUTOFILL&&(this.target.clearAllAchivements(),this.target.fillItems()),this.progression.fillCards()}constructor(){(async function(){if("/test.html"===window.location.pathname)try{for(const e in i){const t=i[e],s=await fetch(t);if(!s.ok)throw new Error(`Failed to fetch section: ${t}`);const n=await s.text(),o=document.createElement("div");o.innerHTML=n,document.querySelector(".wrapper").appendChild(o)}}catch(e){console.error("Error loading sections:",e)}})().then((()=>{if(this.initializeElements(),this.setPositions(),this.addEvents(),UI.updateColors(),u.identConfirmed)u.version!=this.VERSION&&setTimeout((()=>{u.version=this.VERSION}),1500),u.startOnLoad?this.statusPanel.watchButton.click():this.getAchievements(),setTimeout((()=>{g.getUserSummary({}).then((e=>{this.userInfo.update({userSummary:e}),this.stats.initialSetStats({userSummary:e})}))}),3e3);else{const e=this.loginCard.section;e.classList.remove("disposed"),setTimeout((()=>e.classList.remove("hidden")),100),u.setNewPosition({id:e.id,hidden:!1})}setTimeout((()=>document.querySelector(".loading-section").classList.add("hidden")),1e3)})).catch((e=>{setTimeout((()=>document.querySelector(".loading-section").classList.add("hidden")),1e3),console.log(e)}))}initializeElements(){this.app=document.querySelector(".wrapper"),this.loginCard=new LoginCard,this.target=new Target,this.achievementsBlock=[new AchievementsBlock],this.createAchievementsTemplate(),this.settings=new Settings,this.awards=new Awards,this.gameCard=new GameCard,this.statusPanel=new StatusPanel,this.games=new Games,this.progression=new Progression,this.userInfo=new UserInfo,this.note=new Note,this.notifications=new Notifications,this.stats=new Stats,this.buttons=new ButtonPanel}setPositions(){[...document.querySelectorAll(".section")].forEach((e=>{const t=e.id;if(u.ui[t]){const{x:s,y:i,width:n,height:o,hidden:a}=u.ui[t];s&&(e.style.left=s),i&&(e.style.top=i),n&&(e.style.width=n),o&&(e.style.height=o);(a??!0)&&e.classList.add("hidden","disposed")}else e.classList.add("hidden","disposed")})),document.querySelector("#background-animation").style.display=u.bgVisibility?"block":"none"}addEvents(){document.addEventListener("click",(()=>{document.querySelectorAll(".context-menu").forEach((e=>e.remove()))})),document.body.addEventListener("contextmenu",(e=>{this.showContextmenu({event:e,menuItems:this.settings.contextMenuItems})}))}updateWidgets({earnedAchievementsIDs:e}){this.achievementsBlock.forEach((t=>t.updateEarnedAchieves({earnedAchievementIDs:e}))),this.target.updateEarnedAchieves({earnedAchievementIDs:e}),this.target.delayedRemove(),this.awards.VISIBLE&&this.awards.updateAwards(),this.progression.updateEarnedCards({gameIDArray:e}),this.statusPanel.updateProgress({earnedAchievementIDs:e}),(this.userInfo.VISIBLE||this.stats.VISIBLE)&&setTimeout((async()=>{const e=await g.getUserSummary({gamesCount:3,achievesCount:5});m.stats.updateStats({currentUserSummary:e}),m.userInfo.update({userSummary:e})}),12e3),this.settings.DISCORD_NEW_CHEEVO&&e.forEach((e=>this.sendDiscordMessage({type:"earned-cheevo",id:e})))}showContextmenu({event:e,menuItems:t,sectionCode:s=""}){e.preventDefault(),e.stopPropagation(),document.querySelector(".context-menu")?.remove(),this.contextMenu=UI.generateContextMenu({menuItems:t,sectionCode:s}),this.app.appendChild(this.contextMenu),(()=>{this.contextMenu.style.left=e.x+"px",this.contextMenu.style.top=e.y+"px",window.innerWidth-e.x<3*this.contextMenu.offsetWidth&&this.contextMenu.classList.add("to-left"),window.innerHeight-e.y<2*this.contextMenu.offsetHeight&&this.contextMenu.classList.add("to-top")})(),this.contextMenu.classList.remove("hidden")}createAchievementsTemplate(){2===this.achievementsBlock.length?UI.switchSectionVisibility(this.achievementsBlock[1]):(this.achievementsBlock.push(new AchievementsBlock(!0)),this.GAME_DATA&&this.achievementsBlock.at(-1).parseGameAchievements(this.GAME_DATA))}checkForNewAchieves(e){let t=[];e.forEach((e=>{const s=this.ACHIEVEMENTS[e.AchievementID];if(s){const i=1===e.HardcoreMode&&!s?.isHardcoreEarned;(!s.isEarned||i)&&t.push(e)}})),(e=>{e.forEach((e=>{const{HardcoreMode:t,Date:s}=e,i=this.ACHIEVEMENTS[e.AchievementID];1==t&&(i.isHardcoreEarned=!0,i.DateEarnedHardcore=s,this.GAME_DATA.earnedStats.hard.count++,this.GAME_DATA.earnedStats.hard.points+=i.Points,this.GAME_DATA.earnedStats.hard.retropoints+=i.TrueRatio,"progression"!=i.type&&"win_condition"!=i.type||this.GAME_DATA.earnedStats.hard.progressionCount++),this.GAME_DATA.earnedStats.soft.count++,this.GAME_DATA.earnedStats.soft.points+=i.Points,"progression"!=i.type&&"win_condition"!=i.type||(this.GAME_DATA.earnedStats.soft.progressionCount++,this.GAME_DATA.earnedStats.hard.progressionCount>=this.GAME_DATA.progressionSteps?this.GAME_DATA.progressionAward="beaten":this.GAME_DATA.earnedStats.soft.progressionCount>=this.GAME_DATA.progressionSteps&&(this.GAME_DATA.progressionAward="beaten-softcore")),i.isEarned=!0,i.DateEarned=i.DateEarned??s,this.ACHIEVEMENTS[e.AchievementID]=i})),this.userInfo.pushAchievements({achievements:e}),this.notifications.pushNotification({type:this.notifications.types.earnedAchivs,elements:e})})(t);const s=t?.map((e=>e.AchievementID));this.updateWidgets({earnedAchievementsIDs:s})}async getAchievements(e){try{const t=await g.getGameProgress({gameID:e});this.GAME_DATA=t,this.statusPanel.watchButton.classList.remove("error")}catch(e){this.statusPanel.watchButton.classList.add("error"),this.stopWatching(),console.error(e)}}apiTrackerInterval;async updateAchievements(){try{const e=await g.getRecentAchieves({minutes:UI.RECENT_ACHIVES_RANGE_MINUTES});this.checkForNewAchieves(e)}catch(e){console.error(e)}}startWatching(){this.statusPanel.watchButton.classList.add("active"),m.getAchievements(),this.checkUpdates(),this.target.AUTOCLEAR&&this.target.clearEarned(),(this.settings.DISCORD_START_SESSION||this.settings.DISCORD_NEW_GAME)&&this.sendDiscordMessage({type:"new-game"}),this.apiTrackerInterval=setInterval((()=>{this.checkUpdates()}),u.updateDelayInMiliSecs)}totalPoints=0;softcorePoints=0;async checkUpdates(){const e=await g.getProfileInfo({});e.LastGameID!=u.gameID&&(u.gameID=e.LastGameID,m.getAchievements().then((()=>this.userInfo.pushNewGame({game:m.GAME_DATA})))),e.TotalPoints==this.totalPoints&&e.TotalSoftcorePoints==this.softcorePoints||(this.updateAchievements(),this.totalPoints=e.TotalPoints,this.softcorePoints=e.TotalSoftcorePoints,this.userInfo.updatePoints({points:e})),this.statusPanel.richPresence.innerText=e.RichPresenceMsg;const t=a(e.RichPresenceMsg);t&&(this.target.highlightCurrentLevel(t),this.achievementsBlock.forEach((e=>e.highlightCurrentLevel(t))))}sendDiscordMessage=({message:e="",type:t,id:s})=>{const i=u.DISCORD_WEBHOOK;if(i){switch(t){case"new-game":e=`[${u.targetUser} just started new game](https://retroachievements.org/game/${u.gameID})`;break;case"earned-cheevo":e=`[${u.targetUser} just earned new cheevo](https://retroachievements.org/achievement/${s})`}fetch(i,{body:JSON.stringify({content:e}),headers:{"Content-Type":"application/json"},method:"POST"}).then((function(e){console.log(e)})).catch((function(e){console.log(e)}))}};stopWatching(){this.statusPanel.watchButton.classList.remove("active"),clearInterval(m.apiTrackerInterval)}static applySort({container:e,itemClassName:t,sortMethod:s,reverse:i}){const n=[...e.querySelectorAll(t)];e.innerHTML="",n.sort(((e,t)=>s(e.dataset,t.dataset)*i)).forEach((t=>{e.appendChild(t)}))}static applyFilter({container:e,itemClassName:t,filterMethod:s,reverse:i,isHide:n}){[...e.querySelectorAll(t)].forEach((e=>{e.classList.remove("removed","hidden"),e.classList.toggle(n?"removed":"hidden",!s(e.dataset)^i)}))}static generateContextMenu({menuItems:e,sectionCode:t="",isSubmenu:s=!1}){const i=document.createElement("ul");return s?i.classList.add("context-menu_item-menu","context-submenu"):i.classList.add("achievement_context-menu","context-menu","hidden"),e.forEach((e=>{const s=e.hasOwnProperty("elements");let n=document.createElement("li");if(n.classList.add("context-menu_item",s?"expandable":"f"),s)n.innerHTML+=e.label,n.appendChild(UI.generateContextMenu({menuItems:e.elements,isSubmenu:!0,sectionCode:t}));else switch(e.type){case"checkbox":case"radio":n.innerHTML+=`\n            <input type="${e.type}" name="${e.name}${t}" id="${e.id}${t}" \n             ${1==e.checked?"checked":""} ${e.event??""}></input>\n            <label class="context-menu_${e.type}" for="${e.id}${t}">${e.label}</label>\n            `;break;case"input-number":n.innerHTML+=`\n            ${e.prefix}\n            <input class="context-menu_${e.type}" id="${e.id}-${t}" type="number" title="${e.title}" value="${e.value??""}" ${e.event??""} onclick="event.stopPropagation()">${e.postfix??""} </input>\n            `;break;case"text-input":n.innerHTML+=`\n              ${e.prefix}\n              <input class="context-menu_${e.type}" id="${e.id}-${t}"  ${e.event??""} title="${e.title}" type="text" placeholder="${e.placeholder??""}"  onclick="event.stopPropagation()">${e.postfix??""}</input>\n              `;break;case"range":n.innerHTML+=`\n              ${e.prefix}\n              <input type="range"  ${e.event??""} min="${e.minRange}" max="${e.maxRange}" value="${e.value}" class="slider" id="${e.id}-${t}">\n            `;break;case"button":n.innerHTML+=`\n              <button class="context-menu_${e.type}" id="${e.id}-${t}" ${e.event??""} type="button">${e.label??""}</button>\n              `}i.appendChild(n)})),i.addEventListener("contextmenu",(e=>e.stopPropagation())),i.addEventListener("mousedown",(e=>e.stopPropagation())),UI.AUTOCLOSE_CONTEXTMENU||i.addEventListener("click",(e=>e.stopPropagation())),i}static updateColors(e){const{style:t}=document.body,{mainColor:s,secondaryColor:i,accentColor:n,fontColor:o,selectionColor:a}=u.getColors(e||u.colorsPreset);t.setProperty("--main-color",s),t.setProperty("--secondary-color",i),t.setProperty("--accent-color",n),t.setProperty("--font-color",o),t.setProperty("--selection-color",a)}static resizeEvent({event:e,section:t,callback:s}){let i={startWidth:t.clientWidth,startHeight:t.clientHeight,startX:e.clientX,startY:e.clientY};const n=e=>{UI.setSize(e,i,t),s&&s()};document.addEventListener("mousemove",n),document.addEventListener("mouseup",(()=>{document.removeEventListener("mousemove",n),t.classList.remove("resized"),u.setNewPosition({id:t.id,width:t.clientWidth,height:t.clientHeight})}))}static setSize(e,t,s){const{startWidth:i,startHeight:n,startX:o,startY:a}=t;let r=i+(e.clientX-o),c=n+(e.clientY-a),{newHeight:l,newWidth:d}=UI.stickResizingSection({width:r,height:c,stickySection:s});s.style.width=`${d}px`,s.style.height=`${l}px`}static stickResizingSection({width:e,height:t,stickySection:s}){const{offsetTop:i,offsetLeft:n}=s;let o=e,a=t;const r=10,c=[{check:e=>Math.abs(i+t-e.offsetTop-e.clientHeight)<r,action:e=>a=e.offsetTop+e.clientHeight-i},{check:e=>Math.abs(i+t-e.offsetTop)<r,action:e=>a=e.offsetTop-i-5},{check:t=>Math.abs(n+e-t.offsetLeft-t.clientWidth)<r,action:e=>o=e.offsetLeft+e.clientWidth-n},{check:t=>Math.abs(n+e-t.offsetLeft)<r,action:e=>o=e.offsetLeft-n-5}];return document.querySelectorAll(".section").forEach((e=>{s!=e&&c.forEach((({check:t,action:s})=>t(e)&&s(e)))})),o=Math.abs(window.innerWidth-n-o)<r?window.innerWidth-n:o,a=Math.abs(window.innerHeight-a-i)<r?window.innerHeight-i:a,{newWidth:o,newHeight:a}}static moveEvent(e,t){document.querySelector("#background-animation").style.display="none",e.classList.add("dragable");const s=e.getBoundingClientRect(),i=t.clientX-s.left,n=t.clientY-s.top,o=t=>UI.setPosition(t,i,n,e),a=t=>{e.classList.remove("dragable"),m.app.removeEventListener("mousemove",o),m.app.removeEventListener("mouseup",a),e.removeEventListener("mouseleave",a),document.querySelector("#background-animation").style.display=u.bgVisibility?"block":"none",u.setNewPosition({id:e.id,xPos:e.style.left,yPos:e.style.top}),t.preventDefault()};m.app.addEventListener("mousemove",o),m.app.addEventListener("mouseup",a)}static stickMovingSection({x:e,y:t,stickySection:s}){const{clientHeight:i,clientWidth:n}=s;let o=t,a=e;const r=10,c=[{check:e=>Math.abs(t+i-e.offsetTop-e.clientHeight)<r,action:e=>o=e.offsetTop+e.clientHeight-i},{check:e=>Math.abs(t-e.offsetTop)<r,action:e=>o=e.offsetTop},{check:e=>Math.abs(t-e.offsetTop-e.clientHeight)<r,action:e=>o=e.offsetTop+e.clientHeight+5},{check:e=>Math.abs(t+i-e.offsetTop)<r,action:e=>o=e.offsetTop-i-5},{check:t=>Math.abs(e+n-t.offsetLeft-t.clientWidth)<r,action:e=>a=e.offsetLeft+e.clientWidth-n},{check:t=>Math.abs(e-t.offsetLeft)<r,action:e=>a=e.offsetLeft},{check:t=>Math.abs(e+n-t.offsetLeft)<r,action:e=>a=e.offsetLeft-n-5},{check:t=>Math.abs(e-t.offsetLeft-t.clientWidth)<r,action:e=>a=e.offsetLeft+e.clientWidth+5}];return document.querySelectorAll(".section").forEach((e=>{s!=e&&c.forEach((({check:t,action:s})=>t(e)&&s(e)))})),a=Math.abs(window.innerWidth-a-n)<r?window.innerWidth-n:a,a=Math.abs(a)<r?0:a,o=Math.abs(window.innerHeight-o-i)<r?window.innerHeight-i:o,o=Math.abs(o)<r?0:o,{newXPos:a,newYPos:o}}static setPosition(e,t,s,i){e.preventDefault();let n=e.clientX-t,o=e.clientY-s,{newXPos:a,newYPos:r}=UI.stickMovingSection({x:n,y:o,stickySection:i});i.style.left=a+"px",i.style.top=r+"px"}static addDraggingEventForElements(e,t){}static switchSectionVisibility({section:e}){e.classList.contains("hidden")?(e.classList.remove("disposed"),setTimeout((()=>e.classList.remove("hidden")),100),u.setNewPosition({id:e.id,hidden:!1})):(e.classList.add("hidden"),setTimeout((()=>e.classList.add("disposed")),300),u.setNewPosition({id:e.id,hidden:!0}))}static sortBy={latest:(e,t)=>{const s=e=>{const[t,s]=e.split(", "),[i,n,o]=t.split(".").map(Number),[a,r]=s.split(":").map(Number);return new Date(o,n-1,i,a,r)},i=e.DateEarnedHardcore?s(e.DateEarnedHardcore):-1/0;return(t.DateEarnedHardcore?s(t.DateEarnedHardcore):-1/0)-i},date:(e,t)=>(e.Date?new Date(e.Date):-1/0)-(t.Date?new Date(t.Date):-1/0),earnedCount:(e,t)=>t.NumAwardedHardcore-e.NumAwardedHardcore,points:(e,t)=>parseInt(e.Points)-parseInt(t.Points),truepoints:(e,t)=>e.TrueRatio-t.TrueRatio,default:(e,t)=>0!=e.DisplayOrder?e.DisplayOrder-t.DisplayOrder:e.achivId-t.achivId,id:(e,t)=>e.ID-t.ID,disable:(e,t)=>0,rating:(e,t)=>t.Rating-e.Rating,achievementsCount:(e,t)=>parseInt(e.NumAchievements)-parseInt(t.NumAchievements),title:(e,t)=>{let s=e.FixedTitle.toUpperCase(),i=t.FixedTitle.toUpperCase();return s<i?-1:s>i?1:0},award:(e,t)=>{const s={mastered:5,completed:4,"beaten-hardcore":3,"beaten-softcore":2,started:1},i=s[t.Award]??0,n=s[e.Award]??0,o=new Date(t.MostRecentAwardedDate),a=new Date(e.MostRecentAwardedDate);return i-n!=0?i-n:o-a},level:(e,t)=>e.level-t.level};static filterBy={earned:e=>e.DateEarnedHardcore,notEarned:e=>!e.DateEarnedHardcore,missable:e=>"missable"===e.type,progression:e=>"progression"===e.type||"win_condition"===e.type,all:()=>!0};static filterMethods={all:"all",earned:"earned",notEarned:"notEarned",missable:"missable",progression:"progression"};static sortMethods={latest:"latest",earnedCount:"earnedCount",points:"points",truepoints:"truepoints",disable:"disable",id:"id",default:"default",achievementsCount:"achievementsCount",title:"title",award:"award",rating:"rating",date:"date",level:"level"}}class AchievementsBlock{get VISIBLE(){return!this.section.classList.contains("hidden")}get contextMenuItems(){return[{label:"Style",elements:[{type:"checkbox",name:"context-show-mario",id:"context-show-mario",label:"Show Mario",checked:this.SHOW_MARIO,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_MARIO = this.checked"`},{type:"checkbox",name:"context_autoscroll-achieves",id:"context_autoscroll-achieves",label:"Autoscroll",checked:this.AUTOSCROLL,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].AUTOSCROLL = this.checked;"`},{type:"checkbox",name:"context_autoscroll-achieves",id:"context_smart-autoscroll-achieves",label:"Smart autoscroll",checked:this.SMART_AUTOSCROLL,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SMART_AUTOSCROLL = this.checked;"`},{type:"checkbox",name:"context_stretch-achieves",id:"context_stretch-achieves",label:"Stretch",checked:this.ACHIV_STRETCH,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_STRETCH = this.checked;"`},{prefix:"Min size",postfix:"px",type:"input-number",id:"context-menu_min-size",label:"Min size",value:this.ACHIV_MIN_SIZE,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_MIN_SIZE = this.value;"`},{prefix:"Max size",postfix:"px",type:"input-number",id:"context-menu_max-size",label:"Max size",value:this.ACHIV_MAX_SIZE,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_MAX_SIZE = this.value;"`}]},{label:"Overlay set",elements:[{type:"checkbox",name:"context-hide-unearned",id:"context-hide-unearned",label:"Show overlay",checked:this.SHOW_PREV_OVERLAY,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_PREV_OVERLAY = this.checked"`},...Object.keys(this.overlayTypes).reduce(((e,t)=>{const s={type:"radio",name:"context-achieves-overlay",id:`context-achieves-overlay-${t}`,label:`${this.overlayTypes[t].name}`,checked:this.OVERLAY_TYPE==t,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].OVERLAY_TYPE = '${t}'"`};return e.push(s),e}),[])]},{label:"Sort",elements:[{type:"radio",name:"context-sort",id:"context-sort_latest",label:"Latest",checked:this.SORT_NAME===UI.sortMethods.latest,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'latest';"`},{type:"radio",name:"context-sort",id:"context-sort_rarest",label:"Rarest",checked:this.SORT_NAME===UI.sortMethods.earnedCount,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'earnedCount';"`},{type:"radio",name:"context-sort",id:"context-sort_points",label:"Points",checked:this.SORT_NAME===UI.sortMethods.points,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'points';"`},{type:"radio",name:"context-sort",id:"context-sort_retropoints",label:"Retropoints",checked:this.SORT_NAME===UI.sortMethods.truepoints,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'truepoints';"`},{type:"radio",name:"context-sort",id:"context-sort_default",label:"Default",checked:this.SORT_NAME===UI.sortMethods.default,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'default';"`},{type:"radio",name:"context-sort",id:"context-sort_level",label:"Level(if possible)",checked:this.SORT_NAME===UI.sortMethods.level,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'level';"`},{type:"radio",name:"context-sort",id:"context-sort_disable",label:"Disable",checked:this.SORT_NAME===UI.sortMethods.disable,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'disable';"`},{type:"checkbox",name:"context-reverse-sort",id:"context-reverse-sort",label:"Reverse",checked:-1==this.REVERSE_SORT,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].REVERSE_SORT = this.checked"`}]},{label:"Filter",elements:[{type:"radio",name:"context-filter",id:"context_filter-progression",label:"Progression",checked:this.FILTER_NAME===UI.filterMethods.progression,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'progression';"`},{type:"radio",name:"context-filter",id:"context_filter-missable",label:"Missable",checked:this.FILTER_NAME===UI.filterMethods.missable,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'missable';"`},{type:"radio",name:"context-filter",id:"context_filter-earned",label:"Earned",checked:this.FILTER_NAME===UI.filterMethods.earned,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'earned';"`},{type:"radio",name:"context-filter",id:"context_filter-all",label:"All",checked:this.FILTER_NAME===UI.filterMethods.all,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'all';"`},{type:"checkbox",name:"context-reverse-filter",id:"context-reverse-filter",label:"Reverse",checked:this.REVERSE_FILTER,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].REVERSE_FILTER = this.checked;"`},{type:"checkbox",name:"context-hide-filtered",id:"context-hide-filtered",label:"Hide filtered",checked:this.HIDE_FILTERED,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].HIDE_FILTERED = this.checked;"`}]},{label:"Elements",elements:[{label:"Show header",type:"checkbox",name:"context_hide-achivs-header",id:"context_hide-achivs-header",checked:this.SHOW_HEADER,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_HEADER = this.checked;"`},{label:"Show background",type:"checkbox",name:"context_show-bg",id:"context_show-bg",checked:this.BG_VISIBILITY,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].BG_VISIBILITY = this.checked;"`}]}]}get OVERLAY_TYPE(){return u?.ui[this.SECTION_NAME]?.overlayType??"border"}set OVERLAY_TYPE(e){u.ui[this.SECTION_NAME].overlayType=e,u.writeConfiguration(),this.updateOverlay()}overlayTypes={border:{name:"Border",link:"../assets/img/border/overlay_sets/",closedLink:"../assets/img/overlay_sets/border/closed-1.png",earnedSoftcoreLink:"../assets/img/overlay_sets/border/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/border/earned.png"},digger:{name:"Digger"},mario_q:{name:"Mario '?'",link:"../assets/img/mario_q/overlay_sets/",closedLink:"../assets/img/overlay_sets/mario_q/closed.webp",earnedSoftcoreLink:"../assets/img/overlay_sets/mario_q/earned_soft.webp",earnedHardcoreLink:"../assets/img/overlay_sets/mario_q/earned.webp"},cd_box:{name:"C&D Box",link:"../assets/img/cd_box/",closedLink:"../assets/img/overlay_sets/cd_box/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/cd_box/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/cd_box/earned.png"},kirby:{name:"Kirby",link:"../assets/img/kirby/",closedLink:"../assets/img/overlay_sets/kirby/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/kirby/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/kirby/earned.png"},megaman:{name:"Megaman",link:"../assets/img/megaman/",closedLink:"../assets/img/overlay_sets/megaman/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/megaman/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/megaman/earned.png"},sonic:{name:"Sonic",link:"../assets/img/sonic/",closedLink:"../assets/img/overlay_sets/sonic/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/sonic/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/sonic/earned.png"}};set SORT_NAME(e){u._cfg.ui[this.SECTION_NAME].sortAchievementsBy=e,u.writeConfiguration(),this.applySorting()}get SORT_NAME(){return u?.ui[this.SECTION_NAME]?.sortAchievementsBy||UI.sortMethods.default}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}set FILTER_NAME(e){u.ui[this.SECTION_NAME].filterBy=e,u.writeConfiguration(),this.applyFilter()}get FILTER_NAME(){return u?.ui[this.SECTION_NAME]?.filterBy||UI.filterMethods.all}get FILTER_METHOD(){return UI.filterBy[this.FILTER_NAME]}get HIDE_FILTERED(){return u?.ui[this.SECTION_NAME]?.hideFiltered??!1}set HIDE_FILTERED(e){u.ui[this.SECTION_NAME].hideFiltered=e,u.writeConfiguration(),this.applyFilter()}get REVERSE_SORT(){return u?.ui[this.SECTION_NAME]?.reverseSort||1}set REVERSE_SORT(e){u.ui[this.SECTION_NAME].reverseSort=e?-1:1,u.writeConfiguration(),this.applySorting()}get REVERSE_FILTER(){return u?.ui[this.SECTION_NAME]?.reverseFilter??!1}set REVERSE_FILTER(e){u.ui[this.SECTION_NAME].reverseFilter=e,u.writeConfiguration(),this.applyFilter()}get ACHIV_MIN_SIZE(){return u?.ui[this.SECTION_NAME]?.ACHIV_MIN_SIZE??30}set ACHIV_MIN_SIZE(e){+e>10&&(u.ui[this.SECTION_NAME].ACHIV_MIN_SIZE=e,u.writeConfiguration(),this.fitSizeVertically())}get ACHIV_MAX_SIZE(){return u?.ui[this.SECTION_NAME]?.ACHIV_MAX_SIZE??150}set ACHIV_MAX_SIZE(e){+e>+this.ACHIV_MIN_SIZE&&(u.ui[this.SECTION_NAME].ACHIV_MAX_SIZE=e,u.writeConfiguration(),this.fitSizeVertically())}get ACHIV_STRETCH(){return u?.ui[this.SECTION_NAME]?.stretchAchievements??!1}set ACHIV_STRETCH(e){u.ui[this.SECTION_NAME].stretchAchievements=e,u.writeConfiguration(),this.container.style.height=this.ACHIV_STRETCH?"100%":"auto"}get BG_VISIBILITY(){return u?.ui[this.SECTION_NAME]?.bgVisibility??!0}set BG_VISIBILITY(e){u.ui[this.SECTION_NAME].bgVisibility=e,u.writeConfiguration(),this.section.classList.toggle("hide-bg",!this.BG_VISIBILITY)}get SHOW_HEADER(){return u?.ui[this.SECTION_NAME]?.showHeader??!0}set SHOW_HEADER(e){u.ui[this.SECTION_NAME].showHeader=e,u.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get AUTOSCROLL(){return u?.ui[this.SECTION_NAME]?.autoscroll??!0}set AUTOSCROLL(e){u.ui[this.SECTION_NAME].autoscroll=e,e?this.startAutoScroll():this.stopAutoScroll()}get SMART_AUTOSCROLL(){return u?.ui[this.SECTION_NAME]?.smartAutoscroll??!1}set SMART_AUTOSCROLL(e){u.ui[this.SECTION_NAME].smartAutoscroll=e,this.stopAutoScroll(),this.startAutoScroll()}get SHOW_PREV_OVERLAY(){return u.ui[this.SECTION_NAME]?.showPrevOverlay??!0}set SHOW_PREV_OVERLAY(e){u.ui[this.SECTION_NAME].showPrevOverlay=e,u.writeConfiguration(),this.container.querySelectorAll(".achiv-block").forEach((t=>t.classList.toggle("overlay",e)))}get SHOW_MARIO(){return u.ui[this.SECTION_NAME]?.showMario??!0}set SHOW_MARIO(e){u.ui[this.SECTION_NAME].showMario=e,u.writeConfiguration()}get SECTION_NAME(){return 0===this.CLONE_NUMBER?"achievements_section":`achievements_section-${this.CLONE_NUMBER}`}get CLONE_NUMBER(){return this._cloneNumber}set CLONE_NUMBER(e){if(!e?.length)return this._cloneNumber=0;this._cloneNumber=e.length}constructor(e=!1){this.CLONE_NUMBER=m.achievementsBlock,this.isClone=e,this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=this.generateNewWidget({}),document.querySelector(".wrapper").appendChild(this.section),this.container=this.section.querySelector(".achievements-container"),this.resizer=this.section.querySelector(`#achivs-resizer${this.CLONE_NUMBER}`)}addEvents(){this.section.querySelector(".header-container").addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{m.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:this.CLONE_NUMBER})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),this.stopAutoScroll(),UI.resizeEvent({event:e,section:this.section,callback:()=>{this.fitSizeVertically(!0)}})})),this.resizer.addEventListener("mouseup",(()=>{this.startAutoScroll()})),new Sortable(this.container,{group:{name:"cheevos",pull:"clone",push:"false"},animation:100,chosenClass:"dragged"})}setValues(){this.section.classList.toggle("hide-bg",!this.BG_VISIBILITY),this.section.classList.toggle("compact",!this.SHOW_HEADER),u.ui[this.SECTION_NAME]&&(this.section.style.top=u.ui[this.SECTION_NAME].y??"0px",this.section.style.left=u.ui[this.SECTION_NAME].x??"0px",this.section.style.height=u.ui[this.SECTION_NAME].height??"600px",this.section.style.width=u.ui[this.SECTION_NAME].width??"350px"),this.container.style.height=this.ACHIV_STRETCH?"100%":"auto",this.AUTOSCROLL&&this.startAutoScroll(),this.updateOverlay()}updateOverlay(){this.section.dataset.overlay=this.OVERLAY_TYPE}parseGameAchievements(e){(()=>{this.container.innerHTML=""})(),(e=>{Object.values(e.Achievements).forEach((e=>{const t=this.generateAchievement(e);this.container.appendChild(t)}))})(e),this.fitSizeVertically(),this.applyFilter(),this.applySorting(),this.startAutoScroll()}generateAchievement(e){function t(){s();const t=function(e){let t=document.createElement("div");t.classList.add("achiv-details-block","popup");const s=e.TrueRatio/e.Points;return t.innerHTML=`\n          <h3 class="achievement__header">${e.Title} <p class="difficult-badge difficult-badge__${e.difficulty}">${e.difficulty}</p>\n          </h3>\n          <p>${e.Description}</p>\n          <div class="points">\n            <p><i class="target_description-icon  points-icon"></i>${e.Points}</p>\n            <p><i class="target_description-icon  retropoints-icon"></i>${e.TrueRatio} </p> \n             <p class="target-description-text" title="true ratio">\n              <i class="target_description-icon  ${s>13?"difficult-badge__hell":""}  rarity-icon"></i>\n              ${s.toFixed(2)}\n            </p>\n            <i class="target_description-icon ${e.type??"none"}"></i>            \n          </div>\n          ${e.DateEarnedHardcore?"<p>Earned hardcore: "+e.DateEarnedHardcore+"</p>":e.DateEarned?"<p>Earned softcore: "+e.DateEarned+"</p>":""}\n          <p>Earned by ${e.NumAwardedHardcore} (${e.NumAwarded}) of ${e.totalPlayers} players</p>\n          <p>Earned rate: ${e.rateEarnedHardcore} (${e.rateEarned})</p>\n          <p>Created : ${new Date(e.DateCreated).toLocaleDateString()} (${new Date(e.DateModified).toLocaleDateString()})</p>\n          <p>Created by: ${e.Author}</p>\n        `,t}(e);m.app.appendChild(t),function(e,t){const s=t.getBoundingClientRect(),i=s.left+t.offsetWidth+8,n=s.top+2;e.style.left=i+"px",e.style.top=n+"px";let{left:o,right:a,top:r,bottom:c}=e.getBoundingClientRect();o<0&&e.classList.remove("left-side"),a>window.innerWidth&&e.classList.add("left-side"),r<0?e.classList.remove("top-side"):c>window.innerHeight&&e.classList.add("top-side")}(t,i),setTimeout((()=>t.classList.add("visible")),333)}function s(){document.querySelectorAll(".popup").forEach((e=>e.remove()))}const i=document.createElement("li");var n;return n=this,i.classList.add("achiv-block"),i.classList.toggle("overlay",n.SHOW_PREV_OVERLAY),i.classList.toggle("earned",e.isEarned),i.classList.toggle("hardcore",e.isHardcoreEarned),i.dataset.achivId=e.ID,i.dataset.Points=e.Points,i.dataset.TrueRatio=e.TrueRatio,e.TrueRatio>50&&(i.dataset.rarity="normal"),e.TrueRatio>150&&(i.dataset.rarity="rare"),e.TrueRatio>300&&(i.dataset.rarity="mythycal"),i.dataset.DisplayOrder=e.DisplayOrder,i.dataset.type=e.type,i.dataset.level=e.level,i.dataset.NumAwardedHardcore=e.NumAwardedHardcore,e.DateEarnedHardcore&&(i.dataset.DateEarnedHardcore=e.DateEarnedHardcore),i.innerHTML=`\n      <div class="preview-container">\n        <img class="achiv-preview" src="${e.prevSrc}"/>\n      </div>\n      <button class="add-to-target" onclick="ui.target.addAchieveToTarget(${e.ID})">\n        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">\n          <path d="M440-280h80v-160h160v-80H520v-160h-80v160H280v80h160v160Zm40 200q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/>\n        </svg>\n      </button>\n      `,i.addEventListener("mouseover",t),i.addEventListener("mouseleave",s),i.addEventListener("mousedown",(e=>{e.stopPropagation()})),i}moveToTop(e){1==this.REVERSE_SORT?this.container.prepend(e):this.container.append(e),this.applyFilter()}fitSizeVertically(e=!1){const{section:t,container:s}=this;let i,n;s.style.flex="1",e||!u.ui[this.SECTION_NAME]?.height?(i=s.clientHeight,n=s.clientWidth):(i=parseInt(u.ui[this.SECTION_NAME].height)-t.querySelector(".header-container").clientHeight,n=parseInt(u.ui[this.SECTION_NAME].width)),s.style.flex="";const o=Array.from(s.children).length;if(0===o)return;let a,r,c=Math.floor(Math.sqrt(n*i/o));do{c--,a=Math.floor(i/(c+1)),r=Math.floor(n/(c+1))}while(a*r<o&&c>this.ACHIV_MIN_SIZE);c=c<this.ACHIV_MIN_SIZE?this.ACHIV_MIN_SIZE:c>this.ACHIV_MAX_SIZE?this.ACHIV_MAX_SIZE:c,this.section.style.setProperty("--achiv-height",c+"px")}autoscrollInterval={};async updateEarnedAchieves({earnedAchievementIDs:e}){await n(500),this.stopAutoScroll();for(let t of e){const e=this.container.querySelector(`.achiv-block[data-achiv-id="${t}"]`);this.SHOW_MARIO&&this.isAchieveVisible(e)&&m.ACHIEVEMENTS[t].isHardcoreEarned?await this.marioAction(e):e.classList.add("earned",m.ACHIEVEMENTS[t].isHardcoreEarned?"hardcore":"f"),m.ACHIEVEMENTS[t].DateEarnedHardcore&&(e.dataset.DateEarnedHardcore=m.ACHIEVEMENTS[t].DateEarnedHardcore)}this.applyFilter(),this.SORT_NAME==UI.sortMethods.latest&&this.applySorting(),this.startAutoScroll()}async marioAction(e){const t=document.createElement("div");t.classList.add("mario__container","stand"),this.container.appendChild(t);const s=t.getBoundingClientRect().width,i=e?.getBoundingClientRect(),o={xPos:i.left,yPos:i.top+s},a=2*s,r=i.left>window.innerWidth/2,c={xPos:r?window.innerWidth+s:-s,yPos:o.yPos+a},l=70;let d=Math.sqrt(20*a);t.style.top=c.yPos+"px",t.style.left=c.xPos+"px";const h=()=>{const t=document.createElement("div");t.classList.add("coin__container"),t.innerHTML=`\n      <div class='coins__points'>+${e.dataset.TrueRatio}RP</div>\n      <div class='coins__coin'></div>\n      `,this.container.appendChild(t),t.style.top=i.top-i.height/2+"px",t.style.left=o.xPos+"px",e?.classList.add("earned","hardcore","mario-dumb"),setTimeout((()=>e?.classList.remove("mario-dumb")),500),setTimeout((()=>t.remove()),5e3)};await(async()=>{let e=c.xPos;for(t.classList.remove("stand"),t.classList.add("walk"),t.classList.toggle("to-left",r),t.style.setProperty("--frame-duration","70ms");e!==o.xPos;)r?(e-=20,e<o.xPos&&(e=o.xPos)):(e+=20,e>o.xPos&&(e=o.xPos)),t.style.left=e+"px",await n(l);t.classList.remove("walk"),t.classList.add("stand"),await n(500)})(),await(async()=>{t.classList.remove("stand"),t.classList.add("jump");let e=c.yPos;for(;~~d>0;)e-=d,d-=10,e<o.yPos?(e=o.yPos-2,t.style.top=e+"px"):(t.style.top=e+"px",await n(l));for(h(),d=0;e<c.yPos;)e+=d,d+=10,e>c.yPos&&(e=c.yPos),t.style.top=e+"px",await n(l);t.classList.remove("jump"),t.classList.add("stand"),await n(500),t.classList.toggle("to-left",!r),await n(500)})(),await(async()=>{let e=t.getBoundingClientRect().left;for(t.style.setProperty("--frame-duration","52.5ms"),t.className=`mario__container walk ${r?"":"to-left"} `;e!==c.xPos;)r?(e+=20,e>c.xPos&&(e=c.xPos)):(e-=20,e<c.xPos&&(e=c.xPos)),t.style.left=e+"px",await n(52.5)})(),t.remove(),await n(100)}startAutoScroll(e=!0){if(clearTimeout(this.autoscrollInterval.timeout),clearInterval(this.autoscrollInterval.interval),this.SMART_AUTOSCROLL&&this.isAllEarnedAchievesVisible())return void(this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(e)),3e4));let t=this.container,s=1;this.AUTOSCROLL&&(this.autoscrollInterval.interval=setInterval((()=>{t.scrollHeight-t.clientHeight<=10&&this.stopAutoScroll(),e?(t.scrollTop+=s,t.scrollTop+t.clientHeight>=t.scrollHeight&&(clearInterval(this.autoscrollInterval.interval),this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(!1)),5e3))):(t.scrollTop-=s,0===t.scrollTop&&(clearInterval(this.autoscrollInterval.interval),this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(!0)),5e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScroll(){clearInterval(this.autoscrollInterval.interval),clearTimeout(this.autoscrollInterval.timeout)}isAllEarnedAchievesVisible(){let e=!0;return this.container.querySelectorAll(".earned").forEach((t=>{!this.isAchieveVisible(t)&&(e=!1)})),e}isAchieveVisible(e){let t=!0;const s=this.container.getBoundingClientRect().top,i=this.container.getBoundingClientRect().height,n=e.getBoundingClientRect().top-s,o=e.getBoundingClientRect().top-s+e.getBoundingClientRect().height;return(n<0||o>i)&&(t=!1),t}highlightCurrentLevel(e){[...this.container.querySelectorAll(".achiv-block")].forEach((t=>{if(t.classList.remove("highlight"),t.dataset.level==e&&t.classList.add("highlight"),!Number.isInteger(e)){const s=parseInt(e);t.dataset.level==s&&t.classList.add("highlight")}}))}applySorting(){UI.applySort({container:this.container,itemClassName:".achiv-block",sortMethod:this.SORT_METHOD,reverse:this.REVERSE_SORT})}applyFilter(){UI.applyFilter({container:this.container,itemClassName:".achiv-block",filterMethod:this.FILTER_METHOD,reverse:this.REVERSE_FILTER,isHide:this.HIDE_FILTERED})}close(){0===this.CLONE_NUMBER?m.buttons.achievements.click():UI.switchSectionVisibility(m.achievementsBlock[this.CLONE_NUMBER])}generateNewWidget({}){const e=document.createElement("section");return e.id=`${this.SECTION_NAME}`,e.classList.add("achivs","section"),e.style.width=u.ui.achievements_section?.width??"350px",e.style.height=u.ui.achievements_section?.height??"650px",e.innerHTML=`\n      <div class="header-container achievements-header_container">\n        <div class="header-icon"><svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">\n            <path\n              d="m668-380 152-130 120 10-176 153 52 227-102-62-46-198Zm-94-292-42-98 46-110 92 217-96-9ZM294-287l126-76 126 77-33-144 111-96-146-13-58-136-58 135-146 13 111 97-33 143ZM173-120l65-281L20-590l288-25 112-265 112 265 288 25-218 189 65 281-247-149-247 149Zm247-340Z" />\n          </svg>\n        </div>\n        <h2 class="widget-header-text achivs-header-text">Cheevos${0===this.CLONE_NUMBER?"":" ~"}</h2>\n      <button class="header-button header-icon tweak-button" onclick="ui.settings.openSettings(ui.achievementsBlock[${this.CLONE_NUMBER}].contextMenuItems)">\n        <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 0 24 24" width="24px" fill="#e8eaed"><path d="M0 0h24v24H0V0z" fill="none"/><path d="M3 17v2h6v-2H3zM3 5v2h10V5H3zm10 16v-2h8v-2h-8v-2h-2v6h2zM7 9v2H3v2h4v2h2V9H7zm14 4v-2H11v2h10zm-6-4h2V7h4V5h-4V3h-2v6z"/>\n        </svg>        \n      </button>\n        <button class="header-button header-icon" onclick="ui.achievementsBlock[${this.CLONE_NUMBER}].close();">\n          <svg height="24" viewBox="0 -960 960 960" width="24">\n            <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" />\n          </svg>\n        </button>\n      </div>\n      <ul class="achievements-container content-container"></ul>\n      <div class="resizer" id="achivs-resizer${this.CLONE_NUMBER}"></div>\n    `,e}}class ButtonPanel{get VISIBLE(){return!this.section.classList.contains("hidden")}constructor(){this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=document.querySelector("#side_panel"),this.header=this.section.querySelector("#buttons-header_container"),this.settings=this.section.querySelector("#open-settings-button"),this.achievements=this.section.querySelector("#open-achivs-button"),this.login=this.section.querySelector("#open-login-button"),this.gameCard=this.section.querySelector("#open-game-card-button"),this.target=this.section.querySelector("#open-target-button"),this.status=this.section.querySelector("#open-status-button"),this.awards=this.section.querySelector("#open-awards-button"),this.games=this.section.querySelector("#open-games-button"),this.progression=this.section.querySelector("#open-progression-button"),this.userImage=this.section.querySelector("#side-panel-user-image"),this.note=this.section.querySelector("#open-note-button"),this.notifications=this.section.querySelector("#open-notifications-button"),this.user=this.section.querySelector("#open-user-button"),this.stats=this.section.querySelector("#open-stats-button")}addEvents(){this.sidePanel=document.querySelector("#side_panel"),setTimeout((()=>m.buttons.section.classList.remove("expanded")),2e3),document.addEventListener("touchstart",(e=>this.touchVisibilityHandler(e))),document.addEventListener("mousemove",(e=>this.positionVisibilityHandler(e))),this.login.addEventListener("change",(e=>{UI.switchSectionVisibility(m.loginCard)})),this.achievements.addEventListener("change",(e=>{UI.switchSectionVisibility(m.achievementsBlock[0])})),this.status.addEventListener("change",(e=>{UI.switchSectionVisibility(m.statusPanel)})),this.settings.addEventListener("click",(e=>{const t=document.querySelector("#settings_section");t?t.remove():m.settings.openSettings()})),this.awards.addEventListener("change",(e=>{UI.switchSectionVisibility(m.awards)})),this.target.addEventListener("change",(e=>{UI.switchSectionVisibility(m.target)})),this.gameCard.addEventListener("change",(e=>{UI.switchSectionVisibility(m.gameCard)})),this.games.addEventListener("change",(e=>{UI.switchSectionVisibility(m.games)})),this.progression.addEventListener("change",(e=>{UI.switchSectionVisibility(m.progression)})),this.note.addEventListener("change",(e=>{UI.switchSectionVisibility(m.note)})),this.user.addEventListener("change",(e=>{UI.switchSectionVisibility(m.userInfo)})),this.notifications.addEventListener("change",(e=>{UI.switchSectionVisibility(m.notifications)})),this.stats.addEventListener("change",(e=>{UI.switchSectionVisibility(m.stats)}))}setValues(){this.achievements.checked=!1===u.ui?.achievements_section?.hidden??m.achievementsBlock[0].VISIBLE,this.login.checked=!1===u.ui?.login_section?.hidden??m.loginCard.VISIBLE,this.target.checked=!1===u.ui?.target_section?.hidden??m.target.VISIBLE,this.gameCard.checked=!1===u.ui?.game_section?.hidden??m.gameCard.VISIBLE,this.status.checked=!1===u.ui?.["update-section"]?.hidden??m.statusPanel.VISIBLE,this.awards.checked=!1===u.ui?.awards_section?.hidden??m.awards.VISIBLE,this.note.checked=!1===u.ui?.note_section?.hidden??m.note.VISIBLE,this.games.checked=!1===u.ui?.games_section?.hidden??m.note.VISIBLE,this.progression.checked=!1===u.ui?.progression_section?.hidden??m.progression.VISIBLE,this.user.checked=!1===u.ui?.user_section?.hidden??m.user.VISIBLE,this.notifications.checked=!1===u.ui?.notification_section?.hidden??m.notifications.VISIBLE,this.stats.checked=!1===u.ui?.stats_section?.hidden??m.stats.VISIBLE,this.userImage.src=u.userImageSrc}touchVisibilityHandler(e){e.touches[0].clientX<50&&(this.section.classList.add("expanded"),this.section.addEventListener("blur",(e=>{setTimeout((()=>m.buttons.section.classList.remove("expanded")),0)})))}positionVisibilityHandler(e){e.clientX<10&&(this.section.classList.add("expanded"),this.section.addEventListener("mouseleave",(e=>{setTimeout((()=>m.buttons.section.classList.remove("expanded")),200)})))}}class StatusPanel{get contextMenuItems(){return[{label:"Show stats",elements:[{prefix:"Duration ",postfix:"sec",type:"input-number",id:"context-menu_stats-duration",label:"Duration",value:this.STATS_DURATION,event:'onchange="ui.statusPanel.STATS_DURATION = this.value;"'},{type:"checkbox",name:"context_show-points",id:"context_show-points",label:"Hard points",checked:this.SHOW_HP,event:'onchange="ui.statusPanel.SHOW_HP = this.checked;"'},{type:"checkbox",name:"context_show-retropoints",id:"context_show-retropoints",label:"Retropoints",checked:this.SHOW_RP,event:'onchange="ui.statusPanel.SHOW_RP = this.checked;"'},{type:"checkbox",name:"context_show-progression",id:"context_show-progression",label:"Progression Steps",checked:this.SHOW_PROGRESSION,event:'onchange="ui.statusPanel.SHOW_PROGRESSION = this.checked;"'},{type:"checkbox",name:"context_show-cheevos",id:"context_show-cheevos",label:"Cheevos",checked:this.SHOW_CHEEVOS,event:'onchange="ui.statusPanel.SHOW_CHEEVOS = this.checked;"'},{type:"checkbox",name:"context_show-softpoints",id:"context_show-softpoints",label:"Soft points",checked:this.SHOW_SP,event:'onchange="ui.statusPanel.SHOW_SP = this.checked;"'},{type:"radio",name:"context_game-time",id:"context_show-playTime",label:"Game time",checked:"playTime"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'playTime';\""},{type:"radio",name:"context_game-time",id:"context_show-sessionTime",label:"Session Game Time",checked:"sessionTime"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'sessionTime';\""},{type:"radio",name:"context_game-time",id:"context_show-timer",label:"Timer",checked:"timer"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'timer';\""},{prefix:"Timer",postfix:"min",type:"input-number",id:"context-menu_stats-timer-duration",label:"Timer",value:~~(this.TIMER_TIME/60*100)/100,event:'onchange="ui.statusPanel.TIMER_TIME = this.value;"'}]},{label:"Progressbar",elements:[{type:"radio",name:"context_show-progressbar",id:"context_progressbar-auto",label:"Auto",checked:"auto"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"auto\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-achives",label:"Cheevos",checked:"achives"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"achives\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-progression",label:"Progression steps",checked:"progression"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"progression\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-points",label:"Hard points",checked:"points"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"points\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-retropoints",label:"Retropoints",checked:"retropoints"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"retropoints\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-softpoins",label:"Soft points",checked:"softpoints"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"softpoints\"'"}]},{label:"Elements",elements:[{type:"checkbox",name:"context_show-platform",id:"context_show-platform",label:"Platform",checked:this.SHOW_PLATFORM,event:'onchange="ui.statusPanel.SHOW_PLATFORM = this.checked;"'},{type:"checkbox",name:"context_show-rich-presence",id:"context_show-rich-presence",label:"Rich presence",checked:this.SHOW_RICH_PRESENCE,event:'onchange="ui.statusPanel.SHOW_RICH_PRESENCE = this.checked;"'},{type:"radio",name:"context_show-game-ratio",id:"context_show-game-ratio",label:"Show Retro Ratio",checked:this.SHOW_GAME_RATIO,event:'onclick="ui.statusPanel.SHOW_GAME_RATIO = this.checked;"'},{type:"radio",name:"context_show-game-ratio",id:"context_show-mastery-rate",label:"Show Mastery Rate",checked:this.SHOW_MASTERY_RATE,event:'onclick="ui.statusPanel.SHOW_MASTERY_RATE = this.checked;"'}]},{label:"Alerts",elements:[{type:"checkbox",name:"context_show-new-cheevos",id:"context_show-new-cheevos",label:"Show alerts",checked:this.SHOW_NEW_ACHIV,event:'onchange="ui.statusPanel.SHOW_NEW_ACHIV = this.checked;"'},{prefix:"Alerts duration",postfix:"sec",type:"input-number",id:"context-menu_stats-earned-duration",label:"Duration",value:this.NEW_ACHIV_DURATION,event:'onchange="ui.statusPanel.NEW_ACHIV_DURATION = this.value;"'}]}]}get SHOW_RP(){return u.ui.update_section?.showRP??!0}set SHOW_RP(e){u.ui.update_section.showRP=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_HP(){return u.ui.update_section?.showHP??!0}set SHOW_HP(e){u.ui.update_section.showHP=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_SP(){return u.ui.update_section?.showSP??!0}set SHOW_SP(e){u.ui.update_section.showSP=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_CHEEVOS(){return u.ui.update_section?.showCheevos??!0}set SHOW_CHEEVOS(e){u.ui.update_section.showCheevos=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_PROGRESSION(){return u.ui.update_section?.showProgression??!1}set SHOW_PROGRESSION(e){u.ui.update_section.showProgression=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_PLATFORM(){return u.ui.update_section?.showPlatform??!0}set SHOW_PLATFORM(e){u.ui.update_section.showPlatform=e,u.writeConfiguration(),this.setValues()}get SHOW_RICH_PRESENCE(){return u.ui.update_section?.showRichPresence??!0}set SHOW_RICH_PRESENCE(e){u.ui.update_section.showRichPresence=e,u.writeConfiguration(),this.setValues()}get STATS_DURATION(){const e=u.ui.update_section?.statsDuration??30;return e<5?5:e}set STATS_DURATION(e){u.ui.update_section.statsDuration=e,u.writeConfiguration(),this.startStatsAnimation()}get SHOW_NEW_ACHIV(){return u.ui.update_section?.showNewAchiv??!0}set SHOW_NEW_ACHIV(e){u.ui.update_section.showNewAchiv=e,u.writeConfiguration()}get CHANGE_PROGRESS_AUTO(){return"auto"==u.ui.update_section?.progressBarPropertyName}get PROGRESSBAR_PROPERTY_NAME(){return u.ui.update_section?.progressBarPropertyName??"auto"}set PROGRESSBAR_PROPERTY_NAME(e){u.ui.update_section.progressBarPropertyName=e,u.writeConfiguration(),this.setProgressBarValue()}get NEW_ACHIV_DURATION(){const e=u.ui.update_section?.newAchivDuration??15;return e<5?5:e}set NEW_ACHIV_DURATION(e){u.ui.update_section.newAchivDuration=e,u.writeConfiguration()}get AUTOSCROLL_RICHPRESENCE(){return!0}get SHOW_GAME_PREV_BORDER(){return!1}set SHOW_GAME_PREV_BORDER(e){u.ui.update_section.showGamePrevBorder=e,u.writeConfiguration(),this.container.classList.toggle("game-border",e)}get SHOW_GAME_RATIO(){return u?.ui?.update_section?.showGameRatio??!0}set SHOW_GAME_RATIO(e){this.SHOW_GAME_RATIO&&e?(e=!1,document.getElementById("context_show-game-ratio").checked=!1):u.ui.update_section.showMasteryRate=!e,u.ui.update_section.showGameRatio=e,u.writeConfiguration(),this.setValues()}get SHOW_MASTERY_RATE(){return u?.ui?.update_section?.showMasteryRate??!1}set SHOW_MASTERY_RATE(e){this.SHOW_MASTERY_RATE&&e?(e=!1,document.getElementById("context_show-mastery-rate").checked=!1):u.ui.update_section.showGameRatio=!e,u.ui.update_section.showMasteryRate=e,u.writeConfiguration(),this.setValues()}get SHOW_TIME(){return u.ui.update_section?.time??"playTime"}set SHOW_TIME(e){e===u.ui.update_section.time&&(document.querySelector(`#context_show-${e}`).checked=!1,e=!1),u.ui.update_section.time=e,u.writeConfiguration(),this.startStatsAnimation()}get TIMER_TIME(){return u.ui.update_section?.timerTime??2}set TIMER_TIME(e){e<1&&(e=1),e>1440&&(e=1440),u.ui.update_section.timerTime=60*e,u.writeConfiguration(),this.timerTime=this.TIMER_TIME,this.startStatsAnimation()}get VISIBLE(){return!this.section.classList.contains("hidden")}stats={gameTitle:m?.GAME_DATA?.Title??"Title",gamePlatform:m?.GAME_DATA?.ConsoleName??"Platform",richPresence:"Waiting...",imageSrc:`https://media.retroachievements.org${m?.GAME_DATA?.ImageIcon}`,totalPoints:m?.GAME_DATA?.points_total??0,totalAchievesCount:m?.GAME_DATA?.achievements_published??0,totalSoftpoints:0,earnedPoints:0,earnedAchievesCount:0,totalRetropoints:m?.GAME_DATA?.TotalRetropoints,earnedRetropoints:0,earnedSoftpoints:0};awards={award:"",progressionAward:""};gameTime=0;sessionGameTime=0;timerTime=this.TIMER_TIME;gameTimeInterval;getActiveTime=()=>{let e=0;switch(this.SHOW_TIME){case"playTime":e=this.gameTime;break;case"sessionTime":e=this.sessionGameTime;break;case"timer":e=this.timerTime}return this.formatTime(e)};get statusTextValues(){const e={};return this.SHOW_HP&&(e.progressionInPointsStats=`${this.stats.earnedPoints}/${this.stats.totalPoints} HP`),this.SHOW_CHEEVOS&&(e.cheevosStats=`${this.stats.earnedAchievesCount}/${this.stats.totalAchievesCount} CHEEVOS`),this.SHOW_PROGRESSION&&(e.cheevosStats=`${this.stats.earnedProgressionCount}/${this.stats.totalProgressionCount} STEPS`),this.SHOW_RP&&(e.retroPointsStats=`${this.stats.earnedRetropoints}/${this.stats.totalRetropoints} RP`),this.SHOW_SP&&(e.softPointsStats=`${this.stats.earnedSoftpoints}/${this.stats.totalPoints-this.stats.earnedPoints} SP`),this.SHOW_TIME&&(e.gameTime=this.getActiveTime()),e}constructor(){!u.ui.update_section&&(u.ui.update_section={}),!u.ui.update_section.playTime&&(u.ui.update_section.playTime={}),this.initializeElements(),this.addEvents(),this.startAutoScrollRP(),setTimeout((()=>this.fitFontSize()),500)}initializeElements(){this.section=document.querySelector("#update-section"),this.container=this.section.querySelector(".update_container"),this.gamePreview=this.section.querySelector("#game-preview"),this.retroRatioElement=this.section.querySelector(".update__retro-ratio"),this.textBlock=this.section.querySelector("#update-text-block"),this.gameTitle=this.section.querySelector("#game-title"),this.gamePlatform=this.section.querySelector("#game-platform"),this.richPresence=this.section.querySelector("#rich-presence"),this.watchButton=this.section.querySelector("#watching-button"),this.progresBar=this.section.querySelector("#status-progress-bar"),this.progresBarDelta=this.section.querySelector("#status_progress-bar-delta"),this.progressStatusText=this.section.querySelector("#status-progress-text"),this.resizer=this.section.querySelector("#status-resizer"),this.backSide={container:this.section.querySelector(".update_back-side"),imgElement:this.section.querySelector("#update_achiv-preview"),achivTitleElement:this.section.querySelector("#update_achiv-title"),earnedPoints:this.section.querySelector("#update_achiv-earned-points")}}addEvents(){this.watchButton.addEventListener("mousedown",(e=>{e.stopPropagation()})),this.watchButton.addEventListener("click",(e=>{e.stopPropagation();const t=()=>{u.ui.update_section.playTime[u.gameID]=this.gameTime,u.writeConfiguration()};this.watchButton.classList.contains("active")?(m.stopWatching(),t(),clearInterval(this.gameTimeInterval)):(m.startWatching(),this.gameTimeInterval=setInterval((()=>{this.gameTime++,this.sessionGameTime++,this.timerTime--,"timer"===this.SHOW_TIME&&this.timerTime<0&&this.section.classList.add("timer-timeout"),this.gameTime%60==0&&t();const e=this.getActiveTime();this.section.querySelector(".gameTime")&&(this.section.querySelector(".gameTime").innerText=e)}),1e3))})),this.textBlock.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{m.showContextmenu({event:e,menuItems:this.contextMenuItems})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section,callback:()=>this.fitFontSize()})}))}setValues(){this.gamePlatform.classList.toggle("hidden",!this.SHOW_PLATFORM),this.richPresence.classList.toggle("hidden",!this.SHOW_RICH_PRESENCE);const e=m.GAME_DATA.retroRatio,t=m.GAME_DATA.masteryRate;this.retroRatioElement.innerText=this.SHOW_MASTERY_RATE?t:e,this.retroRatioElement.className=`update__retro-ratio difficult-badge__${m.GAME_DATA.gameDifficulty}`;const s=~~(100*(this.stats.earnedPoints/m.GAME_DATA.points_total||0))+"%",i=~~(100*(this.stats.earnedAchievesCount/m?.GAME_DATA?.achievements_published))+"%";this.setProgressBarValue(),this.progressStatusText.innerText="",this.startStatsAnimation(),m.gameCard.updateGameInfoElement({name:"Completion",value:`${s} of points [${i}]`}),m.gameCard.section.classList.toggle("mastered",0!=this.stats.earnedPoints&&this.stats.totalPoints===this.stats.earnedPoints),this.container.classList.toggle("game-border",this.SHOW_GAME_PREV_BORDER),this.container.classList.toggle("show-game-ratio",this.SHOW_GAME_RATIO||this.SHOW_MASTERY_RATE)}setProgressBarValue(){let e=0;switch(this.PROGRESSBAR_PROPERTY_NAME){case"points":e=this.stats.earnedPoints/m.GAME_DATA.points_total;break;case"retropoints":e=this.stats.earnedRetropoints/m.GAME_DATA.TotalRetropoints;break;case"achives":e=this.stats.earnedAchievesCount/m?.GAME_DATA?.achievements_published;break;case"progression":e=this.stats.earnedProgressionCount/m?.GAME_DATA?.progressionSteps;break;case"softpoints":e=this.stats.earnedSoftpoints/this.stats.totalSoftPoints}this.section.style.setProperty("--progress-points",100*(e||0)+"%")}updateData(e=!1){this.stats={gameTitle:m?.GAME_DATA?.FixedTitle??"Title",gamePlatform:m?.GAME_DATA?.ConsoleName??"Platform",richPresence:"Waiting...",imageSrc:`https://media.retroachievements.org${m?.GAME_DATA?.ImageIcon}`,totalPoints:m?.GAME_DATA?.points_total??0,totalSoftPoints:m.GAME_DATA.points_total-m.GAME_DATA.earnedStats.soft.points,totalAchievesCount:m?.GAME_DATA?.achievements_published??0,totalProgressionCount:m?.GAME_DATA?.progressionSteps,earnedPoints:m.GAME_DATA.earnedStats.hard.points,earnedAchievesCount:m.GAME_DATA.earnedStats.hard.count,earnedProgressionCount:m.GAME_DATA.earnedStats.soft.progressionCount,totalRetropoints:m?.GAME_DATA?.TotalRetropoints,earnedRetropoints:m.GAME_DATA.earnedStats.hard.retropoints,earnedSoftpoints:m.GAME_DATA.earnedStats.soft.points-m.GAME_DATA.earnedStats.hard.points},e&&(this.awards.award=m.GAME_DATA.award,this.awards.progressionAward=m.GAME_DATA.progressionAward),this.setValues()}gameChangeEvent(){m.GAME_DATA.FixedTitle!=this.stats.gameTitle&&m.apiTrackerInterval&&(this.addAlertsToQuery([{type:"new-game",value:m.GAME_DATA}]),m.settings.DISCORD_NEW_GAME&&m.sendDiscordMessage({type:"new-game"}));const{ImageIcon:e,FixedTitle:t,ConsoleName:s,badges:i}=m.GAME_DATA,{gamePreview:n,gameTitle:a,gamePlatform:r}=this;n.setAttribute("src",`https://media.retroachievements.org${e}`),a.innerHTML=`${t||"Some game name"} ${o(i)}`,a.setAttribute("href","https://retroachievements.org/game/"+u.gameID),r.innerText=s||"",this.updateData(!0),this.gameTime=u.ui.update_section.playTime[u.gameID]?u.ui.update_section.playTime[u.gameID]:0,this.sessionGameTime=0,this.timerTime=this.TIMER_TIME}updateProgress({earnedAchievementIDs:e}){if(this.updateData(),this.SHOW_NEW_ACHIV&&e.length){const t=()=>{let e;return"mastered"!==this.awards.award&&m.GAME_DATA.earnedStats.hard.count===this.stats.totalAchievesCount?(this.awards.award="mastered",e={type:"new-award",award:"mastered",value:m.GAME_DATA}):""!==this.awards.award&&m.GAME_DATA.earnedStats.soft.count===this.stats.totalAchievesCount&&(this.awards.award="completed",e={type:"new-award",award:"completed",value:m.GAME_DATA}),this.stats.totalProgressionCount>0&&"beaten"!==this.awards.progressionAward&&m.GAME_DATA.earnedStats.hard.progressionCount>=this.stats.totalProgressionCount?(this.awards.progressionAward="beaten",e={type:"new-award",award:"beaten",value:m.GAME_DATA}):this.stats.totalProgressionCount>0&&""==this.awards.progressionAward&&m.GAME_DATA.earnedStats.soft.progressionCount>=this.stats.totalProgressionCount&&(this.awards.progressionAward="beaten-softcore",e={type:"new-award",award:"beaten-softcore",value:m.GAME_DATA}),e},s=e.map((e=>({type:"new-achiv",value:m.ACHIEVEMENTS[e]}))),i=t();i&&s.push(i),this.addAlertsToQuery([...s])}this.progresBarDelta.classList.remove("hidden"),setTimeout((()=>this.progresBarDelta.classList.add("hidden")),50)}alertsQuery=[];addAlertsToQuery(e){this.SHOW_NEW_ACHIV&&(this.alertsQuery.length>0?this.alertsQuery=[...this.alertsQuery,...e]:(this.alertsQuery=[...e],this.startAlerts()))}async startAlerts(){const e=()=>{this.container.classList.remove("new-game-info","new-achiv","new-award","beaten"),this.backSide.container.classList.remove("hardcore","beaten","mastered")},t=()=>{const e=this.section.querySelector(".status_glass-effect");e.classList.remove("update"),setTimeout((()=>e.classList.add("update")),20)},s=e=>{const{FixedTitle:t,badges:s,ImageIcon:i,points_total:n,ConsoleName:a,TotalRetropoints:r,achievements_published:c,masteryRate:l,beatenRate:d}=e;this.backSide.imgElement.src=`https://media.retroachievements.org${i}`,this.backSide.achivTitleElement.innerHTML=`${t} ${o(s)}\n      <i class="game-card_suffix">${a}</i>\n      `;let h=`\n      <p class="status__difficult-badge difficult-badge__pro">${n} HP</p>\n      <p class="status__difficult-badge difficult-badge__pro">${r} RP</p>\n      <p class="status__difficult-badge difficult-badge__pro">${c} CHEEVOS</p> \n      <p class="status__difficult-badge difficult-badge__pro">${l}% MASTERED RATE</p>\n      ${d?`<p class="status__difficult-badge difficult-badge__pro">${d}% BEATEN RATE</p>`:""}\n      `;this.backSide.earnedPoints.innerHTML=h,this.container.classList.add("new-game-info")},i=e=>{const{isHardcoreEarned:t,Title:s,prevSrc:i,Points:n,TrueRatio:o,rateEarned:a,rateEarnedHardcore:r,difficulty:c}=e;this.backSide.imgElement.src=i,this.backSide.achivTitleElement.innerHTML=s+`\n        <p class="status__difficult-badge difficult-badge__${c}">${c}</p>\n      `;let l=t?`<p class="status__difficult-badge difficult-badge__pro">+${n}HP </p>\n        <p class="status__difficult-badge difficult-badge__pro">+${o}RP </p>\n        <p class="status__difficult-badge difficult-badge__pro">TOP${r}</p>`:`\n        <p class="status__difficult-badge difficult-badge__pro">+${n}SP</p> \n        <p class="status__difficult-badge difficult-badge__pro">TOP${a}</p>`;this.backSide.earnedPoints.innerHTML=l,this.backSide.container.classList.toggle("hardcore",e.isHardcoreEarned),setTimeout((()=>this.container.classList.add("new-achiv")),2e3)},a=(e,t)=>{const{FixedTitle:s,badges:i,ImageIcon:n,points_total:a,earnedStats:r,TotalRetropoints:c,masteryRate:l,beatenRate:d,completedRate:h,beatenSoftRate:m,ID:g}=e,p="mastered"==t?l:"beaten"==t?d:"completed"==t?h:m;console.log(t,p,h,e);const E=(e=>{const t=~~(e/3600),s=~~((e-3600*t)/60);return`\n        ${t>0?1==t?"1 hour ":t+" hours ":""}\n        ${t>0&&s>0?"and ":""}\n        ${s>0?1==s?"1 minute":s+" minutes":""}\n      `})(u.ui.update_section.playTime[g]);this.backSide.imgElement.src=`https://media.retroachievements.org${n}`,this.backSide.achivTitleElement.innerHTML=`${s} ${o(i)}\n      <i class="game-card_suffix bg_gold">GAINED AWARD</i>\n      `;let _=`\n        <p class="status__difficult-badge difficult-badge__pro">${t} IN ${E}</p>\n        <p class="status__difficult-badge difficult-badge__pro">TOP${p}%</p>\n        <p class="status__difficult-badge difficult-badge__pro">${r.hard.points}/${a} HP</p>\n        <p class="status__difficult-badge difficult-badge__pro">${r.hard.retropoints}/${c} RP</p>\n      `;this.backSide.earnedPoints.innerHTML=_,this.backSide.container.classList.add(t),setTimeout((()=>this.container.classList.add("new-award")),1e3)},r=t=>{switch(e(),t.type){case"new-game":s(t.value);break;case"new-achiv":i(t.value);break;case"new-award":a(t.value,t.award)}};for(;this.alertsQuery.length>0;)await n(1e3),r(this.alertsQuery[0]),this.container.classList.add("show-back"),t(),setTimeout((()=>this.startAutoScrollElement(this.backSide.achivTitleElement)),2e3),setTimeout((()=>this.startAutoScrollElement(this.backSide.earnedPoints)),2e3),await n(1e3*this.NEW_ACHIV_DURATION),this.container.classList.remove("show-back"),this.alertsQuery.shift(),this.stopAutoScrollElement(this.backSide.earnedPoints,!0),this.stopAutoScrollElement(this.backSide.achivTitleElement,!0)}statsAnimationInterval;startStatsAnimation(){this.stopStatsAnimation(),this.section.classList.remove("timer-timeout"),this.progressStatusText.innerText="",this.progressStatusText.className="progress_points-percent progress-percent";let e=0,t=Object.values(this.statusTextValues).length;"auto"==this.PROGRESSBAR_PROPERTY_NAME&&"gameTime"==Object.getOwnPropertyNames(this.statusTextValues)[e]&&(this.PROGRESSBAR_PROPERTY_NAME="achives"),t>0&&this.changeStatsElementValues({className:Object.getOwnPropertyNames(this.statusTextValues)[e],text:Object.values(this.statusTextValues)[e]}),t>1&&(this.statsAnimationInterval=setInterval((()=>{e=e<t-1?e+1:0,this.progressStatusText.classList.add("hide"),setTimeout((()=>{this.changeStatsElementValues({className:Object.getOwnPropertyNames(this.statusTextValues)[e],text:Object.values(this.statusTextValues)[e]})}),1e3)}),1e3*this.STATS_DURATION))}stopStatsAnimation(){clearInterval(this.statsAnimationInterval),this.currentStatusTextIndex=0}changeStatsElementValues({className:e,text:t}){this.progressStatusText.innerText=t,this.progressStatusText.className=`progress_points-percent progress-percent ${e}`,this.CHANGE_PROGRESS_AUTO&&"gameTime"!=e&&this.section.style.setProperty("--progress-points",this.convertToPercentage(t)||"0%")}autoscrollRPInterval;startAutoScrollRP(e=!0){this.autoscrollRPInterval&&this.stopAutoScrollRP();let t=this.richPresence,s=1;this.AUTOSCROLL_RICHPRESENCE&&(this.autoscrollRPInterval=setInterval((()=>{t.clientWidth==t.scrollWidth?(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP()),1e4)):e?(t.scrollLeft+=s,t.scrollLeft+t.clientWidth>=t.scrollWidth&&(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP(!1)),1e3))):(t.scrollLeft-=s,0==t.scrollLeft&&(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP(!0)),1e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScrollRP(){clearInterval(this.autoscrollRPInterval)}autoscrollAlertInterval={};startAutoScrollElement(e,t=!0){this.autoscrollAlertInterval[e.className]?this.stopAutoScrollElement(e):this.autoscrollAlertInterval[e.className]={};let s=e;this.autoscrollAlertInterval[e.className].interval=setInterval((()=>{s.clientWidth==s.scrollWidth?(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e)),1e4)):t?(s.scrollLeft+=1,s.scrollLeft+s.clientWidth>=s.scrollWidth&&(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e,!1)),1e3))):(s.scrollLeft-=1,0==s.scrollLeft&&(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e,!0)),1e3)))}),50)}stopAutoScrollElement(e,t=!1){t&&(e.scrollLeft=0),clearInterval(this.autoscrollAlertInterval[e.className].interval),clearTimeout(this.autoscrollAlertInterval[e.className].timeout)}convertToPercentage(e){const t=e.split("/");return(parseInt(t[0],10)/parseInt(t[1],10)*100).toFixed(2)+"%"}formatTime(e){const t=e<0;t&&(e*=-1);let s=Math.floor(e/3600),i=Math.floor(e%3600/60),n=e%60;return s=s<10?"0"+s:s,i=i<10?"0"+i:i,n=n<10?"0"+n:n,`${t?"-":""}${"00"!=s?s+":":""}${i}:${n}`}fitFontSize(){const e=document.querySelector(".update_container"),t=u?.ui?.update_section?.height??this.section.getBoundingClientRect().height;e.style.fontSize=(t-10)/5.5+"px"}}class Settings{get settingsItems(){return[{label:"Style",elements:[{type:"select",label:"Select colors",id:"settings_colors-selector",selectValues:[{type:"radio",name:"context_color-scheme",id:"context_color-scheme-default",label:"default",checked:"default"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'default'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-pink",label:"pink",checked:"pink"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'pink'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-lightgreen",label:"lightgreen",checked:"lightgreen"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'lightgreen'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-lightblue",label:"lightblue",checked:"lightblue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'lightblue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-blue",label:"blue",checked:"blue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'blue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-synthwave",label:"synthwave",checked:"synthwave"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'synthwave'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-darkblue",label:"darkblue",checked:"darkblue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'darkblue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-brown",label:"brown",checked:"brown"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'brown'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-pastel",label:"pastel",checked:"pastel"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'pastel'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-retro",label:"retro",checked:"retro"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'retro'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-vintage",label:"vintage",checked:"vintage"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'vintage'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-neon",label:"neon",checked:"neon"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'neon'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-gray",label:"gray",checked:"gray"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'gray'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-custom",label:"custom",checked:"custom"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'custom'\""}]},{type:"checkbox",label:"Show bg",id:"settings_show-bg",onChange:"ui.settings.BG_ANIMATION = this.checked;",checked:this.BG_ANIMATION}]},{label:"Custom colors",elements:[{type:"color",id:"main-color-input",label:"main color",value:u.mainColor,onChange:"console.log(this); config.mainColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"secondary-color-input",label:"secondary color",value:u.secondaryColor,onChange:"config.secondaryColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"accent-color-input",label:"accent color",value:u.accentColor,onChange:"config.accentColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"selection-color-input",label:"selection color",value:u.selectionColor,onChange:"config.selectionColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"font-color-input",label:"font color",value:u.fontColor,onChange:"config.fontColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"}]},{label:"Font family",elements:[{type:"select",label:"Select font",id:"settings_font-family",selectValues:[{type:"radio",name:"settings_font-family",id:"settings_font-family-default",label:"default",checked:"default"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('default');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Oxygen",label:"Oxygen",checked:"Oxygen"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('oxygen');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Shadows",label:"Shadows",checked:"Shadows"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('shadows');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Pixelify",label:"Pixelify",checked:"Pixelify Sans"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('pixelifySans');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Jaro",label:"Jaro",checked:"Jaro"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('jaro');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Jacquard",label:"Jacquard",checked:"Jacquard"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('jacquard');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Custom",label:"Custom",checked:"custom"===m.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('custom');\""}]},{type:"search",label:"paste url here",id:"settings_font-input",value:"",onChange:"ui.settings.FONT_FAMILY = this.value; this.value = '';"}]},{label:"Font size (base in px)",elements:[{type:"number",label:"font size",id:"settings_font-size-input",value:this.FONT_SIZE,onChange:"ui.settings.FONT_SIZE = this.value;"}]},{label:"Update delay (in secs)",elements:[{type:"number",label:"sec",id:"settings_update-delay-input",value:u.updateDelay,onChange:"config.updateDelay = this.value"}]},{label:"Target user",elements:[{type:"search",label:u.targetUser,id:"settings_target-user-input",value:u.targetUser,onChange:"config.targetUser = this.value"}]},{label:"Game ID",elements:[{type:"button",label:"Check ID",id:"settings_check-game-id",onClick:"ui.getAchievements()"},{type:"button",label:"Get last ID",id:"settings_get-last-id",onClick:"ui.settings.getLastGameID()"},{type:"number",label:"game id",id:"settings_game-id-input",value:u.gameID,onChange:"config.gameID = this.value;"}]},{label:"Autoupdate",elements:[{type:"checkbox",label:"Start on load",id:"settings_start-on-load",onChange:"ui.settings.START_ON_LOAD = this.checked;",checked:this.START_ON_LOAD}]},{label:"Discord",elements:[{type:"text-input",label:"paste discord webhook",id:"settings_discord-hook-input",value:this.DISCORD_WEBHOOK??"",onChange:"ui.settings.DISCORD_WEBHOOK = value;"},{type:"checkbox",label:"Start game alert",id:"settings_discord-start-game",onChange:"ui.settings.DISCORD_NEW_GAME = this.checked;",checked:this.DISCORD_NEW_GAME},{type:"checkbox",label:"Start session alert",id:"settings_discord-start-session",onChange:"ui.settings.DISCORD_START_SESSION = this.checked;",checked:this.DISCORD_START_SESSION},{type:"checkbox",label:"Earn cheevo alert",id:"settings_discord-new-cheevo",onChange:"ui.settings.DISCORD_NEW_CHEEVO = this.checked;",checked:this.DISCORD_NEW_CHEEVO}]}]}get DISCORD_WEBHOOK(){return u.DISCORD_WEBHOOK??""}set DISCORD_WEBHOOK(e){u.DISCORD_WEBHOOK=e,u.writeConfiguration()}get DISCORD_NEW_GAME(){return u._cfg?.discordNewGame??!0}set DISCORD_NEW_GAME(e){u._cfg.discordNewGame=e,u.writeConfiguration()}get DISCORD_NEW_CHEEVO(){return u._cfg?.discordNewCheevo??!0}set DISCORD_NEW_CHEEVO(e){u._cfg.discordNewCheevo=e,u.writeConfiguration()}get DISCORD_START_SESSION(){return u._cfg?.discordStartSession??!0}set DISCORD_START_SESSION(e){u._cfg.discordStartSession=e,u.writeConfiguration()}get VISIBLE(){return!this.section.classList.contains("hidden")}get contextMenuItems(){return[{label:"Colors",elements:[{type:"radio",name:"context_color-scheme",id:"context_color-scheme-default",label:"default",checked:"default"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'default'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-pink",label:"pink",checked:"pink"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'pink'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-lightgreen",label:"lightgreen",checked:"lightgreen"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'lightgreen'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-lightblue",label:"lightblue",checked:"lightblue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'lightblue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-blue",label:"blue",checked:"blue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'blue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-synthwave",label:"synthwave",checked:"synthwave"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'synthwave'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-darkblue",label:"darkblue",checked:"darkblue"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'darkblue'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-brown",label:"brown",checked:"brown"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'brown'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-pastel",label:"pastel",checked:"pastel"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'pastel'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-retro",label:"retro",checked:"retro"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'retro'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-vintage",label:"vintage",checked:"vintage"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'vintage'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-neon",label:"neon",checked:"neon"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'neon'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-gray",label:"gray",checked:"gray"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'gray'\""},{type:"radio",name:"context_color-scheme",id:"context_color-scheme-custom",label:"custom",checked:"custom"===m.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'custom'\""}]},{label:"Show bg-animation",type:"checkbox",name:"context_show-bg-animation",id:"context_show-bg-animation",checked:m.settings.BG_ANIMATION,event:'onchange="ui.settings.BG_ANIMATION = this.checked;"'},{label:"Start on load",type:"checkbox",name:"context_show-start-on-load",id:"context_show-start-on-load",checked:m.settings.START_ON_LOAD,event:'onchange="ui.settings.START_ON_LOAD = this.checked;"'}]}get FONT_SIZE(){return u?._cfg.settings?.fontSize??14}set FONT_SIZE(e){u._cfg.settings.fontSize=e,u.writeConfiguration(),document.documentElement.style.setProperty("font-size",`${this.FONT_SIZE}px`)}get FONT_FAMILY(){return this.fonts[u._cfg?.fontSelectorName??"default"]}get FONT_NAME(){let e=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim),t="default";return e.test(this.FONT_FAMILY)&&(t=this.FONT_FAMILY.match(e)[0].replaceAll("+"," ")),t}set FONT_FAMILY(e){let t=new RegExp(/https:\/\/[^'");]*/gim),s=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim);if(t.test(e)){let i=e.match(t)[0],n=e.match(s)[0].replaceAll("+"," ");const o=document.createElement("link");o.rel="stylesheet",o.href=i,document.head.appendChild(o),document.documentElement.style.setProperty("--font-family",`"${n}", system-ui, sans-serif`)}"def"==e&&document.documentElement.style.setProperty("--font-family"," system-ui, sans-serif")}loadCustomFont(e){const t=this.parseFontUrl(e);t&&(u._cfg.settings.customFontFamily=t.fontFamily,this.fontColorInput.value=t.fontName,this.FONT_FAMILY=t.fontFamily,this.fontSelector.value="custom",u._cfg.fontSelectorName="custom",u.writeConfiguration()),"def"==e&&(u._cfg.settings.fontFamily="",u.writeConfiguration(),document.documentElement.style.setProperty("--font-family"," system-ui, sans-serif"))}parseFontUrl(e){let t=new RegExp(/https:\/\/[^'");]*/gim),s=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim);if(t.test(e)){return{fontFamily:e.match(t)[0],fontName:e.match(s)[0].replaceAll("+"," ")}}}get COLOR_SCHEME(){return u._cfg.settings.preset||"default"}set COLOR_SCHEME(e){u._cfg.settings.preset=e,u.writeConfiguration(),UI.updateColors(e)}get BG_ANIMATION(){return u._cfg.settings.bgVisibility??!0}set BG_ANIMATION(e){u._cfg.settings.bgVisibility=e,u.writeConfiguration(),document.querySelector("#background-animation").style.display=u.bgVisibility?"block":"none"}get START_ON_LOAD(){return u._cfg.settings.startOnLoad??!1}set START_ON_LOAD(e){u._cfg.settings.startOnLoad=e,u.writeConfiguration()}fonts={default:"def",pixelifySans:"https://fonts.googleapis.com/css2?family=Pixelify+Sans",jaro:"https://fonts.googleapis.com/css2?family=Jaro",oxygen:"https://fonts.googleapis.com/css2?family=Oxygen:wght@300;400;700",jacquard:"https://fonts.googleapis.com/css2?family=Jacquard+24",shadows:"https://fonts.googleapis.com/css2?family=Shadows+Into+Light&display=swap",custom:u._cfg?.settings?.customFontFamily??"def"};constructor(){this.setValues()}setValues(){this.FONT_SIZE=this.FONT_SIZE,this.FONT_FAMILY=this.fonts[u._cfg?.fontSelectorName??"default"]}getLastGameID(){g.getProfileInfo({}).then((e=>{document.getElementById("settings_game-id-input").value=e.LastGameID,u.gameID=e.LastGameID,m.getAchievements()}))}selectFont(e){const t=e;this.FONT_FAMILY=this.fonts[t],u._cfg.fontSelectorName=t,u.writeConfiguration()}close(){m.buttons.settings.checked=!1,this.section&&this.section.remove()}openSettings(e=this.settingsItems){this.close(),this.section=this.generateSettingsContainer(e),u.ui.settings_section&&(u.ui.settings_section.x&&(this.section.style.left=u.ui.settings_section.x),u.ui.settings_section.y&&(this.section.style.top=u.ui.settings_section.y)),this.section.querySelector(".header-container").addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("click",(e=>{this.section.querySelectorAll(".extended").forEach((e=>e.classList.remove("extended")))})),m.app.appendChild(this.section),m.buttons.settings.checked=!0}generateSettingsContainer(e){const t=document.createElement("section");t.classList.add("prefs_section","section"),t.id="settings_section",t.innerHTML='\n      <div class="header-container prefs-header-container">\n        <div class="header-icon settings-icon"><svg xmlns="http://www.w3.org/2000/svg" height="24" fill="white" viewBox="0 -960 960 960" width="24">\n            <path d="m370-80-16-128q-13-5-24.5-12T307-235l-119 50L78-375l103-78q-1-7-1-13.5v-27q0-6.5 1-13.5L78-585l110-190 119 50q11-8 23-15t24-12l16-128h220l16 128q13 5 24.5 12t22.5 15l119-50 110 190-103 78q1 7 1 13.5v27q0 6.5-2 13.5l103 78-110 190-118-50q-11 8-23 15t-24 12L590-80H370Zm70-80h79l14-106q31-8 57.5-23.5T639-327l99 41 39-68-86-65q5-14 7-29.5t2-31.5q0-16-2-31.5t-7-29.5l86-65-39-68-99 42q-22-23-48.5-38.5T533-694l-13-106h-79l-14 106q-31 8-57.5 23.5T321-633l-99-41-39 68 86 64q-5 15-7 30t-2 32q0 16 2 31t7 30l-86 65 39 68 99-42q22 23 48.5 38.5T427-266l13 106Zm42-180q58 0 99-41t41-99q0-58-41-99t-99-41q-59 0-99.5 41T342-480q0 58 40.5 99t99.5 41Zm-2-140Z"></path>\n          </svg></div>\n        <h2 class="widget-header-text prefs-header">Settings</h2>\n        <button class="header-button header-icon" onclick="ui.settings.close()">\n          <svg height="24" viewBox="0 -960 960 960" width="24">\n            <path d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z"></path>\n          </svg>\n        </button>\n      </div>\n      <div class="settings_container "></div>\n    ';const s=document.createElement("ul");s.classList.add("settings_container","content-container");const i=e=>{switch(e.type){case"button":return`\n            <button class="button-input" ${e.event??""} onclick="${e.onClick??""}">${e.label}</button>\n          `;case"checkbox":return`\n            <div class="checkbox-input_container">\n              <input ${e.event??"--"}  onchange="${e.onChange??""}" type="checkbox" id="${e.id}" ${e.checked&&"checked"}>\n              <label class="checkbox-input" for="${e.id}">${e.label}</label>\n            </div>\n          `;case"radio":return`\n            <div class="radio-input_container">\n              <input ${e.event??"--"} name="${e.name}"  onchange="${e.onChange??""}" type="radio" id="${e.id}" ${e.checked&&"checked"}>\n              <label class="checkbox-input" for="${e.id}">${e.label}</label>\n            </div>\n          `;case"select":return`\n            <button class="select-button" id="${e.id}" onclick="this.classList.toggle('extended'); event.stopPropagation();">\n              <div class="select-label"> ${e.label}</div>\n              <div class="select-menu">\n             ${UI.generateContextMenu({menuItems:e.selectValues}).innerHTML}\n           \n              </div>\n            </button>\n          `;case"number":case"input-number":return`\n          <input type="number" title="${e.title?e.title:e.prefix??""}" class="text-input" id="${e.id}" value="${e.value}"\n               placeholder="${e.label}" onchange="${e.onChange}"/>\n            `;case"text-input":return`\n              <input type="text" class="text-input" id="${e.id}" value="${e.value}"\n               placeholder="${e.label}" onchange="${e.onChange}"/>\n            `;case"search":return`\n              <input type="search" class="text-input" id="${e.id}" value="${e.value}"\n               placeholder="${e.label}" onchange="${e.onChange}"/>\n            `;case"color":return`\n          <input type="color" class="color-input" onchange="${e.onChange}" value="${e.value}" id="${e.id}" title="${e.label}" />\n          `;default:return"default"}};return e.forEach((e=>{const t=document.createElement("li");t.classList.add("settings_setting-line"),t.innerHTML=`\n        <h3 class="settings_setting-header">${e?.label}</h3>\n      `,e.elements?e.elements.forEach((e=>{t.innerHTML+=i(e)})):t.innerHTML+=i(e),s.appendChild(t)})),t.appendChild(s),t}}class GameCard{get VISIBLE(){return!this.section.classList.contains("hidden")}get SHOW_BADGES(){return u.ui?.game_section?.showBadges??!0}set SHOW_BADGES(e){u.ui.game_section.showBadges=e,u.writeConfiguration(),this.updateGameCardInfo(m.GAME_DATA)}get contextMenuItems(){return[...this.contexMenuSettingsItems,...this.contextMenuPropertiesItems]}get contextMenuPropertiesItems(){return this._contextMenuPropertiesItems}set contextMenuPropertiesItems(e){this._contextMenuPropertiesItems=e}get contexMenuSettingsItems(){return[{label:"Show title badges",type:"checkbox",name:"game-card_show-badges",id:"game-card_show-badges",event:"onchange=\"ui.gameCard.SHOW_BADGES = this.parentNode.querySelector('input').checked\"",checked:this.SHOW_BADGES}]}_contextMenuPropertiesItems=[{label:"Platform",type:"checkbox",name:"context_show-platform",id:"context_show-platform",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Platform', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Developer",type:"checkbox",name:"context_show-developer",id:"context_show-developer",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Developer', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Publisher",type:"checkbox",name:"context_show-publisher",id:"context_show-publisher",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Publisher', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Genre",type:"checkbox",name:"context_show-genre",id:"context_show-genre",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Genre', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Released",type:"checkbox",name:"context_show-released",id:"context_show-released",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Released', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Points",type:"checkbox",name:"context_show-points",id:"context_show-points",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Points', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Players",type:"checkbox",name:"context_show-players",id:"context_show-players",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Players', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Completion",type:"checkbox",name:"context_show-completion",id:"context_show-completion",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Completion', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:"Achievements",type:"checkbox",name:"context_show-achievements",id:"context_show-achievements",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Achievements', checkbox: this.parentNode.querySelector('input')})\"",checked:!0}];gameInfoElements={Platform:{title:"Platform",id:"game-card-platform"},Developer:{title:"Developer",id:"game-card-developer"},Publisher:{title:"Publisher",id:"game-card-publisher"},Genre:{title:"Genre",id:"game-card-genre"},Released:{title:"Released",id:"game-card-released"},Completion:{title:"Completion",id:"game-card-completion",value:""},Points:{title:"Points",id:"game-card-points-total"},Players:{title:"Players",id:"#game-card-players-total"},Achievements:{title:"Achievements",id:"game-card-achivs-count"}};updateGameInfoElement({name:e,value:t,visibility:s,checkbox:i}){this.gameInfoElements.hasOwnProperty(e)&&(i&&(s=i.checked?"visible":"hidden",this.gameInfoElements[e].visibility=s,this.contextMenuPropertiesItems.map((t=>{t.label==e&&(t.checked=i.checked)})),u.ui.hasOwnProperty("game_section")||(u.ui.game_section=[]),u.ui.game_section.gameInfoElements=this.gameInfoElements,u.ui.game_section.contextMenuPropertiesItems=this.contextMenuPropertiesItems,u.writeConfiguration()),t&&(this.gameInfoElements[e].value=t),s&&(this.gameInfoElements[e].visibility=s)),this.generateInfo()}constructor(){this.loadSavedData(),this.initializeElements(),this.addEvents()}loadSavedData(){u.ui?.game_section?.gameInfoElements&&(this.gameInfoElements=u.ui.game_section.gameInfoElements),u.ui?.game_section?.contextMenuItems&&(this.contextMenuPropertiesItems=u.ui.game_section.contextMenuItems)}initializeElements(){this.section=document.querySelector(".game-card_section"),this.header=document.querySelector("#game-card-header"),this.descriptions=document.querySelector(".game-card-description"),this.preview=document.querySelector("#game-card-image"),this.platform=document.querySelector("#game-card-platform"),this.developer=document.querySelector("#game-card-developer"),this.publisher=document.querySelector("#game-card-publisher"),this.genre=document.querySelector("#game-card-genre"),this.released=document.querySelector("#game-card-released"),this.completion=document.querySelector("#game-card-completion"),this.achivsCount=document.querySelector("#game-card-achivs-count"),this.playersCount=document.querySelector("#game-card-players-total"),this.pointsCount=document.querySelector("#game-card-points-total"),this.resizer=document.querySelector("#game-card-resizer")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{e.preventDefault(),e.stopPropagation(),document.querySelector(".context-menu")?.remove(),this.contextMenu=UI.generateContextMenu({menuItems:this.contextMenuItems,sectionCode:""}),this.section.appendChild(this.contextMenu),e.x+this.contextMenu.offsetWidth>window.innerWidth?this.contextMenu.style.left=e.x-this.contextMenu.offsetWidth+"px":this.contextMenu.style.left=e.x+"px",e.y+this.contextMenu.offsetHeight>window.innerHeight?this.contextMenu.style.top=e.y-this.contextMenu.offsetHeight+"px":this.contextMenu.style.top=e.y+"px",this.contextMenu.classList.remove("hidden")})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}updateGameCardInfo({Title:e,FixedTitle:t,ID:s,ImageBoxArt:i,ConsoleName:n,Developer:a,Publisher:r,Genre:c,Released:l,achievements_published:d,players_total:h,points_total:u,badges:m}){this.header.innerHTML=`${t} ${this.SHOW_BADGES?o(m):""} `,this.header.setAttribute("href",`https://retroachievements.org/game/${s}`),this.preview.setAttribute("src",`https://media.retroachievements.org${i}`),this.gameInfoElements.Platform.value=n,this.gameInfoElements.Developer.value=a,this.gameInfoElements.Publisher.value=r,this.gameInfoElements.Genre.value=c,this.gameInfoElements.Released.value=l,this.gameInfoElements.Points.value=u,this.gameInfoElements.Players.value=h,this.gameInfoElements.Achievements.value=d,this.generateInfo()}generateInfo(){this.descriptions.innerHTML="",Object.getOwnPropertyNames(this.gameInfoElements).forEach((e=>{let t=document.createElement("div");t.classList.add("game-card-info"),t.classList.toggle("hidden","hidden"==this.gameInfoElements[e].visibility),t.innerHTML=`\n      <h3 class="game-info-header">${this.gameInfoElements[e].title}</h3>\n      <p class="game-card-text" id="${this.gameInfoElements[e].id}">${this.gameInfoElements[e].value}</p>\n      `,this.descriptions.appendChild(t)}))}close(){m.buttons.gameCard.click()}}class Awards{get VISIBLE(){return!this.section.classList.contains("hidden")}awardTypes={mastery:"mastery",completion:"completion",beatenSoftcore:"beatenSoftcore",beatenHardcore:"beatenHardcore"};constructor(){this.initializeElements(),this.addEvents()}initializeElements(){this.section=document.querySelector(".awards_section"),this.header=document.querySelector(".awards-header_container"),this.container=document.querySelector(".awards-content_container"),this.resizer=document.querySelector("#awards-resizer")}addEvents(){this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}async updateAwards(){const e=await g.getUserAwards({});e.TotalAwardsCount==this.container.dataset.total&&e.MasteryAwardsCount==this.container.dataset.mastery&&e.BeatenHardcoreAwardsCount==this.container.dataset.beatenHard||this.parseAwards(e)}parseAwards(e){if(!e?.TotalAwardsCount)return;this.container.innerHTML="";const{dataset:t}=this.container;t.total=e.TotalAwardsCount,t.beatenSoftcore=e.BeatenSoftcoreAwardsCount,t.beatenHard=e.BeatenHardcoreAwardsCount,t.completion=e.CompletionAwardsCount,t.mastery=e.MasteryAwardsCount;let s=[...e.VisibleUserAwards];s=this.fixGamesProperties(s);const i=this.generateAwardsGroupsArray(s);this.generateConsolesAwards(i)}fixGamesProperties(e){return e.map((e=>(e.awardedDate=new Date(e.AwardedAt),e.awardeTypeFixed="Game Beaten"===e.AwardType?1===e.AwardDataExtra?this.awardTypes.beatenHardcore:this.awardTypes.beatenSoftcore:1===e.AwardDataExtra?this.awardTypes.mastery:this.awardTypes.completion,e))).sort(((e,t)=>t.awardedDate-e.awardedDate))}generateAwardsGroupsArray(e){return e.reduce(((e,t)=>(e.hasOwnProperty(t.ConsoleName)||(e[t.ConsoleName]=[]),e[t.ConsoleName].push(t),e.Total.push(t),e)),{Total:[]})}generateConsolesAwards(e){Object.getOwnPropertyNames(e).forEach((t=>{let s=document.createElement("li");s.classList.add("console-awards"),"Total"!==t&&s.classList.add("collapsed"),s.dataset.consoleName=t;let i=e[t].length;const n=({awardType:e,gamesArray:t})=>t.filter((t=>t.awardeTypeFixed===e)).length;let o=n({awardType:this.awardTypes.beatenSoftcore,gamesArray:e[t]}),a=n({awardType:this.awardTypes.beatenHardcore,gamesArray:e[t]}),r=n({awardType:this.awardTypes.completion,gamesArray:e[t]}),c=n({awardType:this.awardTypes.mastery,gamesArray:e[t]});s.innerHTML=`\n        <h3 class="awards-console_header" onclick="ui.awards.expandAwards(this)">${t}</h3>\n        <ul class="console-awards-values">      \n          <li class="awarded-games total" title="total awards" onclick="ui.awards.filterAwards('all')">${i}</li>\n          <li class="awarded-games beaten-softcore" title="beaten softcore" onclick="ui.awards.filterAwards('${this.awardTypes.beatenSoftcore}')">${o}</li>\n          <li class="awarded-games beaten"  title="beaten"  onclick="ui.awards.filterAwards('${this.awardTypes.beatenHardcore}')">${a}</li>\n          <li class="awarded-games completed"  title="completed" onclick="ui.awards.filterAwards('${this.awardTypes.completion}')">${r}</li>\n          <li class="awarded-games mastered"  title="mastered" onclick="ui.awards.filterAwards('${this.awardTypes.mastery}')">${c}</li>\n        </ul>\n        <button class="expand-awards_button" onclick="ui.awards.expandAwards(this)"> </button>\n        <ul class="awarded-games_list  ${"Total"==t?"":"hidden"} total">\n        </ul>\n        `,this.container.appendChild(s);let l=s.querySelector(".awarded-games_list");e[t].forEach((e=>{l.appendChild(this.makeGameAwardsElement(e))}))}))}makeGameAwardsElement(e){let t=document.createElement("li");return t.classList.add("awarded-game",e.awardeTypeFixed),t.innerHTML=`\n          <img class="awarded-game-preview" src="https://media.retroachievements.org${e.ImageIcon}" alt=" ">\n          <h3 class="game-title">${e.Title}</h3>\n          <p class="console-name">${e.ConsoleName}</p>\n          <p class="awarded-date">${e.timeString}</p>\n      `,t}expandAwards(e){const t=e.parentNode,s=t.querySelector(".awarded-games_list");s.classList.contains("hidden")?(t.classList.remove("collapsed"),s.classList.remove("hidden")):(t.classList.add("collapsed"),s.classList.add("hidden"))}filterAwards(e){this.container.querySelectorAll(".awarded-game").forEach((t=>{t.classList.remove("hidden"),t.classList.contains(e)||"all"===e||t.classList.add("hidden")}))}close(){m.buttons.awards.click()}}class Target{sectionCode="-target";get VISIBLE(){return!this.section.classList.contains("hidden")}get contextMenuItems(){return[{label:"Style",elements:[{label:"Show header",type:"checkbox",name:"context_hide-target-header",id:"context_hide-target-header",checked:this.SHOW_HEADER,event:'onchange="ui.target.SHOW_HEADER = this.checked;"'},{label:"Show background",type:"checkbox",name:"context_hide-target-bg",id:"context_hide-target-bg",checked:!this.HIDE_BG,event:'onchange="ui.target.HIDE_BG = !this.checked;"'},{type:"checkbox",name:"context_autoscroll-target",id:"context_autoscroll-target",label:"Autoscroll",checked:this.AUTOSCROLL,event:'onchange="ui.target.AUTOSCROLL = this.checked;"'},{type:"checkbox",name:"context-hide-unearned",id:"context-hide-unearned",label:"Show overlay",checked:this.SHOW_PREV_OVERLAY,event:'onchange="ui.target.SHOW_PREV_OVERLAY = this.checked"'},{type:"checkbox",name:"context-show-border",id:"context-show-border",label:"Show img border",checked:this.SHOW_PREV_BORDER,event:'onchange="ui.target.SHOW_PREV_BORDER = this.checked"'},{type:"checkbox",name:"context-show-difficult",id:"context-show-difficult",label:"Show difficult",checked:this.SHOW_DIFFICULT,event:'onchange="ui.target.SHOW_DIFFICULT = this.checked"'}]},{label:"Sort",elements:[{type:"radio",name:"context-sort",id:"context-sort_latest",label:"Latest",checked:this.SORT_NAME===UI.sortMethods.latest,event:"onchange=\"ui.target.SORT_NAME = 'latest';\""},{type:"radio",name:"context-sort",id:"context-sort_rarest",label:"Rarest",checked:this.SORT_NAME===UI.sortMethods.earnedCount,event:"onchange=\"ui.target.SORT_NAME = 'earnedCount';\""},{type:"radio",name:"context-sort",id:"context-sort_points",label:"Points",checked:this.SORT_NAME===UI.sortMethods.points,event:"onchange=\"ui.target.SORT_NAME = 'points';\""},{type:"radio",name:"context-sort",id:"context-sort_retropoints",label:"Retropoints",checked:this.SORT_NAME===UI.sortMethods.truepoints,event:"onchange=\"ui.target.SORT_NAME = 'truepoints';\""},{type:"radio",name:"context-sort",id:"context-sort_default",label:"Default",checked:this.SORT_NAME===UI.sortMethods.default,event:"onchange=\"ui.target.SORT_NAME = 'default';\""},{type:"radio",name:"context-sort",id:"context-sort_level",label:"Level (if possible)",checked:this.SORT_NAME===UI.sortMethods.level,event:"onchange=\"ui.target.SORT_NAME = 'level';\""},{type:"radio",name:"context-sort",id:"context-sort_dont-sort",label:"Disable",checked:this.SORT_NAME===UI.sortMethods.disable,event:"onchange=\"ui.target.SORT_NAME = 'disable';\""},{type:"checkbox",name:"context-reverse-sort",id:"context-reverse-sort",label:"Reverse",checked:-1==this.REVERSE_SORT,event:'onchange="ui.target.REVERSE_SORT = this.checked"'}]},{label:"Filter",elements:[{type:"radio",name:"context-filter",id:"context_filter-progression",label:"Progression",checked:this.FILTER_NAME===UI.filterMethods.progression,event:"onchange=\"ui.target.FILTER_NAME = 'progression';\""},{type:"radio",name:"context-filter",id:"context_filter-missable",label:"Missable",checked:this.FILTER_NAME===UI.filterMethods.missable,event:"onchange=\"ui.target.FILTER_NAME = 'missable';\""},{type:"radio",name:"context-filter",id:"context_filter-earned",label:"Earned",checked:this.FILTER_NAME===UI.filterMethods.earned,event:"onchange=\"ui.target.FILTER_NAME = 'earned';\""},{type:"radio",name:"context-filter",id:"context_filter-all",label:"All",checked:this.FILTER_NAME===UI.filterMethods.all,event:"onchange=\"ui.target.FILTER_NAME = 'all';\""},{type:"checkbox",name:"context-reverse-filter",id:"context-reverse-filter",label:"Reverse",checked:this.REVERSE_FILTER,event:'onchange="ui.target.REVERSE_FILTER = this.checked;"'},{type:"checkbox",name:"context-hide-filtered",id:"context-hide-filtered",label:"Hide filtered",checked:this.HIDE_FILTERED,event:'onchange="ui.target.HIDE_FILTERED = this.checked;"'}]},{label:"Clear",elements:[{type:"button",name:"context-clear-all",id:"context-clear-all",label:"Clear All",event:'onclick="ui.target.clearAllAchivements();"'},{type:"checkbox",name:"context-autoclear",id:"context-autoclear",label:"Autoclear earned",checked:this.AUTOCLEAR,event:'onchange="ui.target.AUTOCLEAR = this.checked;"'},{prefix:"Delay",postfix:"sec",type:"input-number",name:"context-autoclear-delay",id:"context-autoclear-delay",label:"Delay",value:this.AUTOCLEAR_DELAY,event:'onchange="ui.target.AUTOCLEAR_DELAY = this.value;"'}]},{label:"Fill",elements:[{type:"button",name:"context-fill",id:"context-fill",label:"Fill",event:'onclick="ui.target.fillItems()"'},{type:"checkbox",name:"context-autofill",id:"context-autofill",label:"Autofill",checked:this.AUTOFILL,event:'onchange="ui.target.AUTOFILL = this.checked;"'}]}]}get SHOW_HEADER(){return u?.ui.target_section?.showHeader??!0}set SHOW_HEADER(e){u.ui.target_section.showHeader=e,u.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get HIDE_BG(){return u?.ui.target_section?.hideBg??!1}set HIDE_BG(e){u.ui.target_section.hideBg=e,u.writeConfiguration(),this.section.classList.toggle("hide-bg",this.HIDE_BG)}set SORT_NAME(e){u._cfg.settings.sortTargetBy=e,u.writeConfiguration(),this.applySort()}get SORT_NAME(){return u._cfg.settings.sortTargetBy||UI.sortMethods.default}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}get REVERSE_SORT(){return u._cfg.settings.reverseSortTarget||1}set REVERSE_SORT(e){u._cfg.settings.reverseSortTarget=e?-1:1,u.writeConfiguration(),this.applySort()}get FILTER_NAME(){return u._cfg.settings.filterTargetBy||UI.filterMethods.all}set FILTER_NAME(e){u._cfg.settings.filterTargetBy=e,u.writeConfiguration(),this.applyFilter()}get FILTER_METHOD(){return UI.filterBy[this.FILTER_NAME]}get REVERSE_FILTER(){return u._cfg.settings.reverseFilterTarget??!1}set REVERSE_FILTER(e){u._cfg.settings.reverseFilterTarget=e,u.writeConfiguration(),this.applyFilter()}get HIDE_FILTERED(){return u._cfg.settings.hideFilteredTarget??!1}set HIDE_FILTERED(e){u._cfg.settings.hideFilteredTarget=e,u.writeConfiguration(),this.applyFilter()}get AUTOCLEAR(){return u._cfg.settings.autoClearTarget??!1}set AUTOCLEAR(e){u._cfg.settings.autoClearTarget=e,u.writeConfiguration()}get AUTOFILL(){return u._cfg.settings.autoFillTarget??!0}set AUTOFILL(e){u._cfg.settings.autoFillTarget=e,u.writeConfiguration()}get AUTOCLEAR_DELAY(){return Number(u._cfg.settings.autoClearTargetTime??5)}set AUTOCLEAR_DELAY(e){u._cfg.settings.autoClearTargetTime=e>=0?e:0,u.writeConfiguration()}get AUTOSCROLL(){return u?.ui?.target_section?.autoscroll??!0}set AUTOSCROLL(e){u.ui.target_section.autoscroll=e,u.writeConfiguration(),e?this.startAutoScroll():this.stopAutoScroll()}get SHOW_PREV_BORDER(){return u?.ui?.target_section?.showPrevBorder??!0}set SHOW_PREV_BORDER(e){u.ui.target_section.showPrevBorder=e,u.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("border",e)))}get SHOW_PREV_OVERLAY(){return u?.ui?.target_section?.showPrevOverlay??!0}set SHOW_PREV_OVERLAY(e){u.ui.target_section.showPrevOverlay=e,u.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("overlay",e)))}get SHOW_DIFFICULT(){return u?.ui?.target_section?.showDifficult??!0}set SHOW_DIFFICULT(e){u.ui.target_section.showDifficult=e,u.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("show-difficult",e)))}constructor(){this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=document.querySelector("#target_section"),this.header=document.querySelector(".target-header_container"),this.container=document.querySelector(".target-container"),this.autoclearCheckbox=document.querySelector(`#context-autoclear${this.sectionCode}`),this.autoClearInput=document.querySelector(`#context-autoclear-delay${this.sectionCode}`),this.autofillCheckbox=document.querySelector(`#context-autofill${this.sectionCode}`),this.sortByLatestRadio=document.querySelector(`#context-sort_latest${this.sectionCode}`),this.sortByPointsRadio=document.querySelector(`#context-sort_points${this.sectionCode}`),this.sortByTruepointsRadio=document.querySelector(`#context-sort_retropoints${this.sectionCode}`),this.sortByRarestRadio=document.querySelector(`#context-sort_rarest${this.sectionCode}`),this.sortByIdRadio=document.querySelector(`#context-sort_id${this.sectionCode}`),this.sortByDefaultRadio=document.querySelector(`#context-sort_default${this.sectionCode}`),this.sortByDisableRadio=document.querySelector(`#context-sort_dont-sort${this.sectionCode}`),this.sortReverseCheckbox=document.querySelector(`#context-reverse-sort${this.sectionCode}`),this.filterByMissableRadio=document.querySelector(`#context_filter-missable${this.sectionCode}`),this.filterByEarnedRadio=document.querySelector(`#context_filter-earned${this.sectionCode}`),this.filterByAllRadio=document.querySelector(`#context_filter-all${this.sectionCode}`),this.filterReverseCheckbox=document.querySelector(`#context-reverse-filter${this.sectionCode}`),this.hideFilteredCheckbox=document.querySelector(`#context-hide-filtered${this.sectionCode}`),this.clearAllAchivementsButton=document.querySelector(`#context-clear-all${this.sectionCode}`),this.fillAchivementsButton=document.querySelector(`#context-fill${this.sectionCode}`),this.resizer=document.querySelector("#target-resizer")}addEvents(){this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.container.addEventListener("mousedown",(e=>e.stopPropagation())),this.section.addEventListener("contextmenu",(e=>{m.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})}));var e,t;e=this.container,t=e=>{m.target.addAchieveToTarget(e),this.section.querySelector(".achiv-block")?.remove()},new Sortable(e,{group:{name:"cheevos",pull:!1},animation:100,chosenClass:"dragged",onAdd:function(e){const s=e.item.dataset.achivId;t&&t(s)}})}setValues(){this.section.classList.toggle("compact",!this.SHOW_HEADER),this.section.classList.toggle("hide-bg",this.HIDE_BG),this.startAutoScroll()}updateEarnedAchieves({earnedAchievementIDs:e}){e.forEach((e=>{const t=this.container.querySelector(`.target-achiv[data-achiv-id='${e}']`);m.ACHIEVEMENTS[e].isHardcoreEarned&&t?(t.classList.add("earned","hardcore","show-hard-anim"),t.dataset.DateEarnedHardcore=m.ACHIEVEMENTS[e].DateEarnedHardcore):t?.classList.add("earned","show-hard-anim"),setTimeout((()=>t?.classList.remove("show-hard-anim")),5e3)})),this.applyFilter(),this.applySort()}autoscrollInterval;startAutoScroll(e=!0){this.stopAutoScroll();let t=this.container,s=1;this.AUTOSCROLL&&(this.autoscrollInterval=setInterval((()=>{t.scrollHeight-t.clientHeight<=10&&this.stopAutoScroll(),e?(t.scrollTop+=s,t.scrollTop+t.clientHeight>=t.scrollHeight&&(this.stopAutoScroll(),setTimeout((()=>this.startAutoScroll(!1)),2e3))):(t.scrollTop-=s,0===t.scrollTop&&(this.stopAutoScroll(),setTimeout((()=>this.startAutoScroll(!0)),2e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScroll(){clearInterval(this.autoscrollInterval)}isAchievementInTargetSection({ID:e,targetContainer:t=this.container}){return[...t.querySelectorAll(".target-achiv")].filter((t=>t.dataset.achivId==e)).length>0}addAchieveToTarget(e){if(this.isAchievementInTargetSection({ID:e}))return;const t=m.ACHIEVEMENTS[e],s=document.createElement("li");async function i(e){n();const s=function(e){let t=document.createElement("div");return t.classList.add("achiv-details-block","popup"),t.innerHTML=`\n          <h3 class="achievement__header">${e.Title} <p class="difficult-badge difficult-badge__${e.difficulty}">${e.difficulty}</p>\n          </h3>\n          <p>${e.Description}</p>\n                   <div class="points">\n            <p><i class="target_description-icon  points-icon"></i>${e.Points}</p>\n            <p><i class="target_description-icon  retropoints-icon"></i>${e.TrueRatio} </p> \n            <i class="target_description-icon ${e.type??"none"}"></i>            \n          </div>\n          ${e.DateEarnedHardcore?"<p>Earned hardcore: "+e.DateEarnedHardcore+"</p>":e.DateEarned?"<p>Earned softcore: "+e.DateEarned+"</p>":""}\n          <p>Earned by ${e.NumAwardedHardcore} (${e.NumAwarded}) of ${e.totalPlayers} players</p>\n          <p>Earned rate: ${e.rateEarnedHardcore} (${e.rateEarned})</p>\n          <p>Created : ${new Date(e.DateCreated).toLocaleDateString()} (${new Date(e.DateModified).toLocaleDateString()})</p>\n          <p>Created by: ${e.Author}</p>\n \n          \n          \n        `,t}(t);m.app.appendChild(s),function(e,t){const s=t.x,i=t.y;e.style.left=s+50+"px",e.style.top=i+"px";let{left:n,right:o,top:a,bottom:r}=e.getBoundingClientRect();n<0&&e.classList.remove("left-side"),o>window.innerWidth&&e.classList.add("left-side"),a<0?e.classList.remove("top-side"):r>window.innerHeight&&e.classList.add("top-side")}(s,e),setTimeout((()=>s.classList.add("visible")),333)}async function n(){document.querySelectorAll(".popup").forEach((e=>e.remove()))}(()=>{s.classList.add("target-achiv"),s.classList.toggle("border",this.SHOW_PREV_BORDER),s.classList.toggle("overlay",this.SHOW_PREV_OVERLAY),s.classList.toggle("show-difficult",this.SHOW_DIFFICULT),s.classList.toggle("earned",t.isEarned),s.classList.toggle("hardcore",t.isHardcoreEarned)})(),s.dataset.type=t.type,s.dataset.Points=t.Points,s.dataset.TrueRatio=t.TrueRatio,s.dataset.DisplayOrder=t.DisplayOrder,t.DateEarnedHardcore&&(s.dataset.DateEarnedHardcore=t.DateEarnedHardcore),s.dataset.NumAwardedHardcore=t.NumAwardedHardcore,s.dataset.achivId=e,s.dataset.level=t.level,(()=>{const i=t.TrueRatio/t.Points;s.innerHTML=`\n      <button class="delete-from-target" title="remove from target" onclick="ui.target.deleteFromTarget(this)">\n        <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">\n          <path d="M280-440h400v-80H280v80ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/>\n        </svg>\n      </button>\n      <div class="prev">\n          <img\n            class="prev-img"\n            src="${t.prevSrc}"\n            alt=" "\n          />\n        </div>\n        <div class="target-achiv-details">\n          <h3 class="achiv-name">\n            <a target="_blanc" href="https://retroachievements.org/achievement/${e}">\n            ${t.level<1e3?`<p class="game-card_suffix suffix-bold bg_gold"> LVL ${t.level?.toString()?.replace(".","-")} </p>`:""}\n              ${t.Title}\n            </a>\n          </h3>\n          <p class="achiv-description">${t.Description}</p>\n          <div class="target-other-descriptions">       \n          <i class=" target_description-icon ${t.type??"none"}" title="achievement type"></i> \n          \n            <p class="target-description-text" title="points"><i class="target_description-icon  points-icon"></i>${t.Points}\n            </p>\n            \n            <p class="target-description-text" title="retropoints"><i class="target_description-icon  retropoints-icon"></i>${t.TrueRatio}\n            </p>\n            \n            <p class="target-description-text" title="earned by"><i class="target_description-icon  trending-icon"></i>${~~(100*t.NumAwardedHardcore/t.totalPlayers)}%\n            </p>\n             <p class="target-description-text" title="true ratio">\n              <i class="target_description-icon  ${i>13?"difficult-badge__hell":""}  rarity-icon"></i>\n              ${i.toFixed(2)}\n            </p>\n            <p class="difficult-badge difficult-badge__${t.difficulty}">${t.difficulty}</p>\n          </div>             \n        </div>\n      `})(),this.container.appendChild(s),s.addEventListener("mouseover",i),s.addEventListener("mouseleave",n),s.addEventListener("mousedown",(e=>{e.stopPropagation()})),this.isDynamicAdding||(this.applyFilter(),this.applySort()),this.delayedRemove()}moveToTop(e){1==this.REVERSE_SORT?this.container.prepend(e):this.container.append(e),this.applyFilter()}applyFilter(){UI.applyFilter({container:this.container,itemClassName:".target-achiv",filterMethod:this.FILTER_METHOD,reverse:this.REVERSE_FILTER,isHide:this.HIDE_FILTERED})}applySort(){UI.applySort({container:this.container,itemClassName:".target-achiv",sortMethod:this.SORT_METHOD,reverse:this.REVERSE_SORT})}highlightCurrentLevel(e){[...this.container.querySelectorAll(".target-achiv")].forEach((t=>{if(t.classList.remove("highlight"),t.dataset.level==e&&t.classList.add("highlight"),!Number.isInteger(e)){const s=parseInt(e);t.dataset.level==s&&t.classList.add("highlight")}}))}deleteFromTarget(e){const t=e.closest(".target-achiv");t.classList.add("removing"),setTimeout((()=>t.remove()),0)}clearEarned(){this.container.querySelectorAll(".target-achiv").forEach((e=>{e.classList.contains("hardcore")&&e.remove()}))}clearAllAchivements(){this.container.innerHTML=""}delayedRemove(){this.AUTOCLEAR&&this.container.querySelectorAll(".earned").forEach((e=>{setTimeout((()=>e.remove()),1e3*this.AUTOCLEAR_DELAY)}))}fillItems(){this.isDynamicAdding=!0,this.clearAllAchivements(),Object.keys(m.ACHIEVEMENTS).forEach((e=>{this.addAchieveToTarget(e)})),this.applyFilter(),this.applySort(),this.isDynamicAdding=!1}close(){m.buttons.target.click()}}class LoginCard{get VISIBLE(){return!this.section.classList.contains("hidden")}constructor(){this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=document.querySelector("#login_section"),this.header=document.querySelector(".login-header_container"),this.userName=document.querySelector("#login-user-name"),this.apiKey=document.querySelector("#login-api-key"),this.userImage=document.querySelector(".login-user-image"),this.submitLoginButton=this.section.querySelector(".submit-login"),this.linkGoogleButton=this.section.querySelector(".submit-login-google")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}setValues(){this.apiKey.value=u.API_KEY,this.userName.value=u.USER_NAME,this.userImage.src=u.userImageSrc,u.identConfirmed&&this.submitLoginButton.classList.add("verified"),this.linkGoogleButton.addEventListener("click",(()=>this.linkGoogleEvent()))}async linkGoogleEvent(){await loginWithGoogle(),this.linkGoogleButton.classList.add("linked")}pasteApiKeyFromClipboard(){navigator.clipboard.readText().then((e=>{this.apiKey.value=e,u.API_KEY=this.apiKey.value})).catch((e=>{console.error("Не вдалося отримати доступ до буферу обміну:",e)}))}submitLogin(){let e=this.userName.value,t=this.apiKey.value;g.verifyUserIdent({userName:e,apiKey:t}).then((s=>{s.ID?(this.updateLogin({userName:e,apiKey:t,userObj:s}),setTimeout((()=>location.reload()),1e3)):this.errorLogin()}))}updateLogin({userName:e,apiKey:t,userObj:s}){u.USER_NAME=e,u.API_KEY=t,u.identConfirmed=!0,u.userImageSrc=`https://media.retroachievements.org${s?.UserPic}`,this.userImage.src=u.userImageSrc,document.querySelector("#submit-login").classList.remove("error"),document.querySelector("#submit-login").classList.add("verified")}errorLogin(){u.identConfirmed=!1,document.querySelector("#submit-login").classList.remove("verified"),document.querySelector("#submit-login").classList.add("error")}close(){m.buttons.login.click()}}class Games{get platformFilterItems(){return Object.keys(l).reduce(((e,t)=>{const s={label:t,type:"group"},i=Object.keys(l[t]).reduce(((e,s)=>{const i={label:s,type:"checkbox",name:"filter-by-platform",checked:this.PLATFORMS_FILTER.includes(l[t][s]),onChange:`ui.games.platformCheckboxChangeEvent(this,${l[t][s]})`,id:`filter-by-platform-${l[t][s]}`};return e.push(i),e}),[]);return e=[...e,s,...i]}),[])}get awardsFilterItems(){return Object.keys(this.awardTypes).reduce(((e,t)=>{const s={label:this.awardTypes[t],name:"filter-by-award",checked:this.AWARD_FILTER.includes(t),onChange:`ui.games.awardCheckboxChangeEvent(this,"${t}")`,id:`filter-by-platform-${t}`};return e.push(s),e}),[])}get genresFilterItems(){return Object.keys(c).reduce(((e,t)=>{const s={label:c[t],name:"filter-by-genre",checked:this.GENRE_FILTER.includes(t),onChange:`ui.games.genreCheckboxChangeEvent(this,"${t}")`,id:`filter-by-genre-${t}`};return e.push(s),e}),[])}get VISIBLE(){return!this.section.classList.contains("hidden")}set FAVOURITES(e){this._favs=e,u.ui.favouritesGames=e,u.writeConfiguration()}get FAVOURITES(){return this._favs??[]}set COOP_FILTER(e){u.ui.games_section.coopOnly=e,u.writeConfiguration(),this.updateGamesList()}get COOP_FILTER(){return u.ui.games_section?.coopOnly??!1}awardCheckboxChangeEvent(e,t){let s=this.AWARD_FILTER;e.checked?s.push(t):s=s.filter((e=>e!=t)),this.AWARD_FILTER=s}platformCheckboxChangeEvent(e,t){let s=this.PLATFORMS_FILTER;e.checked?s.push(t+""):s=s.filter((e=>e!=t)),this.PLATFORMS_FILTER=s}genreCheckboxChangeEvent(e,t){let s=this.GENRE_FILTER;e.checked?s.push(t):s=s.filter((e=>e!=t)),this.GENRE_FILTER=s}set PLATFORMS_FILTER(e){let t=e.filter((e=>Object.keys(r).includes(e)));u.ui.games_section.platformsFilter=t,u.writeConfiguration(),this.updateGamesList()}get PLATFORMS_FILTER(){return u.ui?.games_section?.platformsFilter??["7"]}set GENRE_FILTER(e){let t=e.filter((e=>Object.keys(c).includes(e)));u.ui.games_section.genreFilter=t,u.writeConfiguration(),this.updateGamesList()}get GENRE_FILTER(){return u.ui?.games_section?.genreFilter??[]}set AWARD_FILTER(e){u.ui.games_section.awardFilter=e,u.writeConfiguration(),this.updateGamesList()}get AWARD_FILTER(){return u.ui?.games_section?.awardFilter??[]}set FAVOURITES_FILTER(e){u.ui.games_section.favouritesFilter=e,u.writeConfiguration(),this.updateGamesList()}get FAVOURITES_FILTER(){return u.ui?.games_section?.favouritesFilter??!1}get TYPES_FILTER(){return u.ui?.games_section?.typesFilter??["original"]}set TYPES_FILTER(e){const t=e.dataset.type??"",s=this.TYPES_FILTER;if(e.checked)s.push(t);else{const e=s.indexOf(t);-1!==e&&s.splice(e,1)}u.ui.games_section.typesFilter=s,u.writeConfiguration(),this.applyFilter()}set REVERSE_SORT(e){u._cfg.ui.games_section.reverse_sort=e?-1:1,u.writeConfiguration(),this.updateGamesList()}get REVERSE_SORT(){return u._cfg.ui?.games_section?.reverse_sort??-1}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}get SORT_NAME(){return u._cfg.ui?.games_section?.sort_name??UI.sortMethods.title}set SORT_NAME(e){e==this.SORT_NAME&&(u._cfg.ui.games_section.reverse_sort=-1*this.REVERSE_SORT),u._cfg.ui.games_section.sort_name=e,u.writeConfiguration(),this.updateGamesList()}titleFilter="";applyFilter(){const e=new RegExp(this.titleFilter,"gi");this.games=this.titleFilter?this.GAMES.filter((t=>t.FixedTitle.match(e))):this.GAMES,this.COOP_FILTER&&(this.games=this.games?.filter((e=>"true"==e.Coop))),this.PLATFORMS_FILTER.length>0&&(this.games=this.games?.filter((e=>{let t=!1;for(let s of this.PLATFORMS_FILTER)s==e.ConsoleID&&(t=!0);return t}))),this.GENRE_FILTER.length>0&&(this.games=this.games?.filter((e=>{let t=!1;for(let s of this.GENRE_FILTER)e?.Genres?.includes(+s)&&(t=!0);return t}))),this.FAVOURITES_FILTER&&(this.games=this.games.filter((e=>this.FAVOURITES.includes(e.ID)))),this.AWARD_FILTER.length>0&&(this.games=this.games.filter((e=>{let t=!1;for(let s of this.AWARD_FILTER)s==e.Award&&(t=!0);return t})))}applySort(){this.games=this.games.sort(((e,t)=>this.REVERSE_SORT*this.SORT_METHOD(e,t)))}platformCodes={};awardTypes={mastered:"mastered","beaten-hardcore":"beaten",completed:"completed","beaten-softcore":"beaten softcore",started:"started"};games={};gamesInfo={};constructor(){this._favs=u.ui.favouritesGames??[],this.initializeElements(),this.setValues(),this.addEvents(),this.gamesList.innerHTML='\n    <button class="games__load-button" onclick="ui.games.loadGames()"></button>\n    '}initializeElements(){this.section=document.querySelector("#games_section"),this.header=this.section.querySelector(".header-container"),this.container=this.section.querySelector(".games_container"),this.searchbar=this.section.querySelector("#games__searchbar"),this.platformFiltersList=this.section.querySelector("#games_filter-platform-list"),this.gamesList=this.section.querySelector("#games-list"),this.resizer=this.section.querySelector(".resizer")}setValues(){this.section.querySelector("#games__favourites-filter").checked=this.FAVOURITES_FILTER,this.section.querySelector("#games__coop-filter").checked=this.COOP_FILTER}addEvents(){this.searchbar.addEventListener("input",(e=>{const t=this.searchbar.value;this.titleFilter=t,this.searchbar.classList.toggle("empty",""==t),this.updateGamesList()})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}updateGamesList(){this.applyFilter(),this.applySort(),this.gamesList.innerHTML=this.gamesListHeaderHtml(),function({list:e,items:t,callback:s}){const i=document.createElement("div");i.classList.add("lazy-load_trigger"),e.appendChild(i);let n=0;const o=40,a=i=>{for(let o=0;o<i&&n<t.length;o++)e.appendChild(s(t[n++]))};a(o);const r=(s,r)=>{s.forEach((s=>{s.isIntersecting&&(a(o),r.unobserve(i),e.appendChild(i),n<t.length&&r.observe(i))}))};new IntersectionObserver(r,{root:null,rootMargin:"0px",threshold:1}).observe(i)}({list:this.gamesList,items:this.games,callback:this.GameElement})}loadGames(){this.getAllGames().then((()=>{this.updateGamesList()})),this.loadGameInfo()}async loadGameInfo(){const e=await fetch("./json/games/all_info.json");this.gamesInfo=await e.json()}async getAllGames(){this.GAMES={};try{const e=await fetch("./json/games/all_ext.json"),t=await e.json(),s=await g.SAVED_COMPLETION_PROGRESS;for(let e of s.Results){let s=t.find((t=>e.ID===t.ID));s?(e.NumAwardedHardcore&&(s.NumAwardedHardcore=e.NumAwardedHardcore),e.HighestAwardKind?s.Award=e.HighestAwardKind:s.Award="started",e.MostRecentAwardedDate&&(s.MostRecentAwardedDate=e.MostRecentAwardedDate)):(s=e,s.ImageIcon=s.ImageIcon.match(/\d+/gi)[0],e.NumAwardedHardcore&&(s.NumAwardedHardcore=e.NumAwardedHardcore),e.HighestAwardKind?s.Award=e.HighestAwardKind:s.Award="started",s.Points="",t.push(s))}this.GAMES=t}catch(e){return[]}}GameElement(e){const t=document.createElement("li");t.classList.add("platform_game-item"),t.dataset.id=e.ID;const s=e.ImageIcon.match(/\d+/g);var i;return t.innerHTML=`    \n      \x3c!--<div class="game-preview_container">\n        <img src="./assets/imgCache/${s}.webp"\n            onerror="this.src='https://media.retroachievements.org/Images/${e.ImageIcon}.png';" alt=""\n            class="game-preview_image">\n      </div>--\x3e\n      <h3 class="game-description_title">\n        <button title="open game" class="game-description_button"\n              onclick="ui.games.showGameInfoPopup(${e.ID})">\n              ${e.FixedTitle} \n              ${o(e.badges)} \n              ${"true"===e.Coop?o(["coop"]):""} \n              ${e.Genres?(i=e.Genres,i?.reduce(((e,t)=>e+`<i class="game-card_suffix game-title_genre">${c[t]}</i> `),"")):""}            \n        \n        </button>           \n      </h3>      \n      <p title="${e.Award??""}" class="game-description  award-type">\n        ${e.Award?`<i class="icon award-type__icon ${e.Award}_icon"></i>`:""}\n      </p>\n      <button class="favourites-button game-description icon-button games__icon-button ${m.games.FAVOURITES.includes(e.ID)?"checked":""}" onclick="ui.games.addToFavourite(event,${e.ID})">\n        <i class="icon favourite_icon"></i>\n      </button>\n      <p title="Rating" class="game-description  game-rating">\n        ${e.Rating?e.Rating:"n/a"}\n      </p>\n            <p title="Date" class="game-description  game-date">\n        ${e.Date?e.Date:"n/a"}\n      </p>\n      <p title="achievements count" class="game-description  achievements-count">\n        ${r[e.ConsoleID].match(/[^\/]*/gi)[0]}\n      </p>\n      <p title="achievements count" class="game-description  achievements-count">\n      ${e.NumAwardedHardcore?e.NumAwardedHardcore+"/":""}${e.NumAchievements}\n      </p>\n      <p title="points count" class="game-description  points-count">\n      ${e.Points}\n      </p>\n\n      <p class="game-description game-description__links">\n        <button class=" game-description_link" onclick="ui.getAchievements(${e.ID})"> \n              <i class="game-description_icon link_icon apply-icon"></i>\n        </button>\n          <a title="google search" target="_blanc" \n            href="https://google.com/search?q='${e?.FixedTitle}' '${r[e?.ConsoleID]}' ${d}"\n            class="game-description game-description_link">\n            <i class="game-description_icon link_icon search-icon google_link"></i>\n          </a> \n          <a title="go to RA" target="_blanc" href="https://retroachievements.org/game/${e.ID}"\n              class="game-description game-description_link">\n              <i class="game-description_icon link_icon ra-link_icon"></i>\n          </a>\n      </p>   \n    `,t.addEventListener("mouseover",(function(e){document.querySelectorAll(".popup").forEach((e=>e.remove()));const t=function(){const t=e.target.closest(".platform_game-item").dataset.id;if(!m.games?.gamesInfo[t]?.Title)return;let s=document.createElement("div");return s.classList.add("popup","game-info__popup"),s.innerHTML=`\n        <h3 class="achievement__header">${m.games?.gamesInfo[t]?.Title}</h3>\n          <p>${m.games?.gamesInfo[t]?.Info}</p>\n        `,s}();t&&(m.app.appendChild(t),function(e,t){const s=t.x+100,i=t.y+20;e.style.left=s+"px",e.style.top=i+"px";let{left:n,right:o,top:a,bottom:r}=e.getBoundingClientRect();n<0&&e.classList.remove("left-side"),o>window.innerWidth&&e.classList.add("left-side"),a<0?e.classList.remove("top-side"):r>window.innerHeight&&e.classList.add("top-side")}(t,e),setTimeout((()=>t.classList.add("visible")),200))})),t.addEventListener("mouseleave",(()=>document.querySelectorAll(".popup").forEach((e=>e.remove())))),t}gamesListHeaderHtml=()=>`\n    <div class="platform_game-item header">\n      \x3c!--<div class="game-preview_container">\n      </div>--\x3e\n      <h3 class="header__game-description game-description_title ${"title"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n        onclick="ui.games.SORT_NAME = 'title'">Title\n      </h3>\n      <p title="award type" class="header__game-description ${"award"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}" onclick="ui.games.SORT_NAME = 'award'">\n        <i class="icon award_icon"></i>\n      </p>\n      <div class="header__game-description"><i class="icon favourite_icon checked"></i></div>\n      <p title="Rating" class="game-description header__game-description  game-rating ${"rating"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n        onclick="ui.games.SORT_NAME = 'rating'">\n          Rating\n      </p>\n      <p title="Date" class="game-description header__game-description  game-date ${"date"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n        onclick="ui.games.SORT_NAME = 'date'">\n          Date\n      </p>\n      <p title="achievements count" class=" game-description  achievements-count"\n        >\n          Platform\n      </p>\n      <p title="achievements count" class="header__game-description game-description  achievements-count ${"achievementsCount"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n          onclick="ui.games.SORT_NAME ='achievementsCount'">\n            Cheevos\n        </p>\n      <p title="points count" class="header__game-description game-description  points-count ${"points"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n          onclick="ui.games.SORT_NAME = 'points'">\n            Points\n        </p>\n\n        <p title="" class=" game-description game-description_link">Links</p>\n      </div>\n  `;addToFavourite(e,t){const s=this.FAVOURITES.includes(t);this.FAVOURITES=s?this.FAVOURITES.filter((e=>e!=t)):[t,...this.FAVOURITES],e.target.closest("button").classList.toggle("checked",!s)}toggleFilterList(e,t){const s=()=>{this.section.querySelector(".games__filters-list")?.remove(),this.section.querySelectorAll(".games__filter-header .extended").forEach((e=>e.classList.remove("extended")))},i=e.target.closest("button");if(i.classList.contains("extended"))s();else{let e;switch(s(),i.classList.add("extended"),t){case"platform":e=this.generateFiltersList(this.platformFilterItems);break;case"award":e=this.generateFiltersList(this.awardsFilterItems);break;case"genre":e=this.generateFiltersList(this.genresFilterItems)}this.section.append(e),this.section.querySelector(".games__filter-container").appendChild(e)}}generateFiltersList(e){const t=Object.values(e).reduce(((e,t)=>{if("group"==t.type){const s=document.createElement("li");s.classList.add("filter-list__platform-header"),s.innerText=t.label+": ",e.appendChild(s)}else{const s=t.checked,i=document.createElement("li");i.classList.add("checkbox-input_container"),i.innerHTML=`\n          <input ${s?"checked":""} onchange='${t.onChange}' type="checkbox"   name="${t.name}" id="${t.id}" ></input>\n          <label class=" checkbox-input" for="${t.id}">${t.label}</label>\n        `,e.appendChild(i)}return e}),document.createElement("ul"));return t.classList.add("games__filters-list"),t}async showGameInfoPopup(e=1){document.querySelectorAll(".game-popup__section").forEach((e=>e.remove()));const t=document.createElement("section"),s=await g.getGameProgress({gameID:e});t.innerHTML=`\n    <section class="section game-popup__section">\n        <div class="game-popup__header-container header-container">\n            <h2 class="widget-header-text"><a href="https://retroachievements.org/game/${s.ID}" target="_blank">${s.FixedTitle} ${o(s.badges)}</a></h2>\n            <button class="header-button header-icon" onclick="this.closest('section').remove();">\n                <svg height="24" viewBox="0 -960 960 960" width="24">\n                    <path\n                        d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z" />\n                </svg>\n            </button>\n        </div>\n        <div class="game-info__container">\n            <div class="game-info__images-container">\n                <img src="https://media.retroachievements.org${s.ImageBoxArt}" alt="" class="game__image">\n                <img src="https://media.retroachievements.org${s.ImageIngame}" alt="" class="game__image">\n                <img src="https://media.retroachievements.org${s.ImageTitle}" alt="" class="game__image">\n\n            </div>\n            <div class="game-info__descriptions-container">\n                <div class="game-description__property">Platform: <span>${s?.ConsoleName}</span></div>\n                <div class="game-description__property">Developer: <span>${s?.Developer} Soft</span></div>\n                <div class="game-description__property">Genre: <span>${s?.Genre}</span></div>\n                <div class="game-description__property">Publisher: <span>${s?.Publisher} Soft</span></div>\n                <div class="game-description__property">Released: <span>${s?.Released}</span></div>\n                <div class="game-description__property">Achievements total : <span>${s?.NumAwardedToUserHardcore} / ${s?.NumAwardedToUser} / ${s?.achievements_published}</span>\n                </div>\n                <div class="game-description__property">Total retropoints : <span>\n                ${s?.earnedStats.hard.retropoints} / ${s?.TotalRetropoints}</span></div>\n                <div class="game-description__property">Total points : <span>\n                  ${s?.earnedStats.hard.points} / ${s?.earnedStats.soft.points} / ${s?.points_total}</span></div>\n                <div class="game-description__property">Total players : <span>${s?.masteredCount} / ${s?.beatenCount} / ${s?.players_total}</span></div>\n                <div class="game-description__property">Completion : <span>${s?.masteryRate}% / ${s?.beatenRate}%</span></div>\n                <div class="game-description__property">RetroRatio : <span>${s?.retroRatio}</span></div>\n                \n            </div>\n            <div class="game-info__cheevos-container">\n\n            </div>\n        </div>\n    </section>\n    `,m.app.appendChild(t)}toggleFullscreen(){this.section.classList.toggle("fullscreen")}}class Progression{get VISIBLE(){return!this.section.classList.contains("hidden")}constructor(){this.initializeElements(),this.addEvents()}initializeElements(){this.section=document.querySelector("#progression_section"),this.header=this.section.querySelector(".header-container"),this.notEarnedList=this.section.querySelector("#not-earned_progression-list"),this.earnedList=this.section.querySelector("#earned_progression-list"),this.resizer=this.section.querySelector("#progression-resizer")}addEvents(){this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}fillCards(){this.notEarnedList.innerHTML="",this.earnedList.innerHTML="",Object.values(m.ACHIEVEMENTS).filter((e=>UI.filterBy.progression(e))).sort(((e,t)=>-1*UI.sortBy.id(e,t))).sort(((e,t)=>-1*UI.sortBy.default(e,t))).forEach((e=>{if("progression"===e.type||"win_condition"===e.type){const t=this.generateCard(e);this.addGlowEffectToCard(t),e.isHardcoreEarned?this.earnedList.prepend(t):this.notEarnedList.appendChild(t)}}))}addGlowEffectToCard(e){var t=e.querySelector(".marker");let s;function i(s){var i=s.offsetX,n=s.offsetY,o=e.offsetHeight,a=e.offsetWidth,r=Math.abs(Math.floor(100/a*i)-100),c=Math.abs(Math.floor(100/o*n)-100);t.style.backgroundPosition=`${r}% ${c}%`}e.addEventListener("mouseenter",(n=>{s=e.getBoundingClientRect(),t.classList.remove("hidden"),e.addEventListener("mousemove",(e=>{i(e)}))})),e.addEventListener("mouseleave",(s=>{e.style.transform="",e.style.background="",t.classList.add("hidden"),e.removeEventListener("mousemove",(e=>i(e)))}))}generateCard({Title:e,ID:t,prevSrc:s,Points:i,TrueRatio:n,NumAwardedHardcore:o,totalPlayers:a,type:r,Description:c}){const l=document.createElement("li");return l.classList.add("horizon-list_item","progression-achiv","win_condition"==r?"trophy":"f"),l.dataset.id=t,l.innerHTML=`\n    <div class="progression-achiv_container">\n        <div class="progression_descriptions">\n            <p class="progression-description-text" title="points"><i\n                    class="progression_description-icon game-description_icon points-icon"></i>${i}\n\n            </p>\n            <p class="progression-description-text" title="points"><i\n                    class="progression_description-icon game-description_icon retropoints-icon"></i>${n}\n\n            </p>\n            <p class="progression-description-text" title="earned by"><i\n                    class="progression_description-icon game-description_icon trending-icon"></i>${~~(o/a*100)}%</p>\n            <div class="progression_description-icon condition ${r}" title="achievement type">\n        </div>\n        </div> \n        <div class="progression-achiv_prev-container">\n            <img class="progression-achiv_prev-img" src="${s}"  alt=" ">\n        </div>\n        <h3 class="progression_achiv-name">\n            <a class="progression_achiv-link" progression="_blanc" href="https://retroachievements.org/achievement/56855">${e}</a>\n        </h3>\n        <div class="progression-details">\n            ${c}\n        </div>\n           \n        <div class="marker hidden" style="position: absolute;"></div>\n      </div>       \n      `,l}updateEarnedCards({gameIDArray:e}){e?.forEach((e=>{this.notEarnedList.querySelectorAll(".progression-achiv").forEach((t=>{t.dataset.id==e&&(t.classList.add("removed"),setTimeout((()=>{t.classList.remove("removed"),this.earnedList.appendChild(t),t.classList.add("added")}),500))}))}))}close(){m.buttons.progression.click()}}class Note{get VISIBLE(){return!this.section.classList.contains("hidden")}AUTOSAVE_INTERVAL_MILISECS=3e3;get NOTES_VALUE(){return u._cfg.ui?.note_section?.notes??""}set NOTES_VALUE(e){u._cfg.ui.note_section.notes=e,u.writeConfiguration()}constructor(){this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=document.querySelector("#note_section"),this.header=this.section.querySelector(".header-container"),this.resizer=this.section.querySelector("#note-resizer"),this.textaria=this.section.querySelector(".note-textaria")}addEvents(){this.delayedSave,this.textaria.addEventListener("input",(e=>{clearTimeout(this.delayedSave),this.delayedSave=setTimeout((()=>{this.NOTES_VALUE=this.textaria.value}),this.AUTOSAVE_INTERVAL_MILISECS)})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}setValues(){this.textaria.value=this.NOTES_VALUE}}class UserInfo{get VISIBLE(){return!this.section.classList.contains("hidden")}USER_INFO=u._cfg.ui?.userInfoData??{userName:u.USER_NAME??"userName",status:"Offline",userImageSrc:u.userImageSrc??"",userRank:"???",softpoints:"",retropoints:"",hardpoints:"",lastGames:[],lastAchivs:[]};constructor(){this.initializeElements(),this.addEvents(),this.setValues(),u.identConfirmed}initializeElements(){this.section=document.querySelector("#user_section"),this.userNameElement=this.section.querySelector(".user_user-name"),this.userImg=this.section.querySelector(".user-preview"),this.connectionStatus=this.section.querySelector(".user_online-indicator"),this.userRankElement=this.section.querySelector(".user_rank"),this.userSoftpointsElement=this.section.querySelector(".user_softcore-points"),this.userHardpointsElement=this.section.querySelector(".user_hardcore-points"),this.userRetropointsElement=this.section.querySelector(".user_retropoints"),this.lastGamesList=this.section.querySelector(".user_last-games-list"),this.lastAchivsList=this.section.querySelector(".user_last-achivs-list"),this.resizer=this.section.querySelector("#user-info-resizer")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}setValues(){this.userNameElement.innerText=this.USER_INFO.userName,this.connectionStatus.classList.toggle("online","online"==this.USER_INFO.status),this.userImg.src=this.USER_INFO.userImageSrc,this.userRankElement.innerText=this.USER_INFO.userRank,this.userHardpointsElement.innerText=this.USER_INFO.hardpoints,this.userSoftpointsElement.innerText=this.USER_INFO.softpoints,this.userRetropointsElement.innerText=this.USER_INFO.retropoints,this.lastGamesList.innerHTML="",this.lastAchivsList.innerHTML="",this.USER_INFO?.lastGames?.forEach((e=>{this.lastGamesList.appendChild(this.generateGameElement(e))})),this.USER_INFO?.lastAchivs?.forEach((e=>{this.lastAchivsList.appendChild(this.generateAchivElement(e))}))}async update({userSummary:e}){e||(e=await g.getUserSummary({}));const{User:t,Status:s,UserPic:i,Rank:n,TotalRanked:o,TotalPoints:a,TotalSoftcorePoints:r,TotalTruePoints:c,RecentlyPlayed:l,RecentAchievements:d}=e;this.USER_INFO.userName=t,this.USER_INFO.status=s.toLowerCase(),this.USER_INFO.userImageSrc=`https://media.retroachievements.org${i}`,this.USER_INFO.userRank=`${n} (Top ${~~(1e4*n/o)/100}%)`,this.USER_INFO.softpoints=r,this.USER_INFO.retropoints=c,this.USER_INFO.hardpoints=a,this.USER_INFO.lastGames=l,this.USER_INFO.lastAchivs=d.sort(((e,t)=>new Date(t.DateAwarded)-new Date(e.DateAwarded))),m.notifications.parseUserSummary(this.USER_INFO),this.setValues()}async updateMainInformation(){const e=await g.getUserProfile({}),{User:t,UserPic:s,TotalPoints:i,TotalSoftcorePoints:n,TotalTruePoints:o}=e;this.USER_INFO.userName=t,this.USER_INFO.userImageSrc=`https://media.retroachievements.org${s}`,this.USER_INFO.softpoints=n,this.USER_INFO.retropoints=o,this.USER_INFO.hardpoints=i}async updateRecentGames(){const e=await g.getRecentlyPlayedGames({count:3});this.USER_INFO.lastGames=e}async updateRecentAchives(){const e=await g.getRecentAchieves({});this.USER_INFO.lastAchivs=e.slice(0,5).reverse()}updatePoints({points:e}){this.USER_INFO.softpoints=e.TotalSoftcorePoints,this.USER_INFO.retropoints=e.TotalTruePoints,this.USER_INFO.hardpoints=e.TotalPoints,this.setValues()}pushNewGame({game:e}){this.USER_INFO.lastGames.unshift(e),this.USER_INFO.lastGames.pop(),this.setValues()}pushAchievements({achievements:e}){e.forEach((e=>{e.DateEarnedHardcore?(this.USER_INFO.hardpoints+=e.Points,this.USER_INFO.retropoints+=e.TrueRatio):this.USER_INFO.softpoints+=e.Points,this.USER_INFO.lastAchivs.unshift(e),this.USER_INFO.lastAchivs.pop()})),this.setValues()}generateGameElement(e){const t=document.createElement("li");return t.classList.add("user_last-game"),t.innerHTML=`\n    <div class="user_game-preview">\n        <img class="user_game-img" src="https://media.retroachievements.org${e.ImageIcon}" alt="">\n    </div>\n    <div class="user_game-title">${e.Title}</div>\n    <p class="user_game-description">${e.ConsoleName}</p>\n    `,t}generateAchivElement(e){const t=document.createElement("li");return t.classList.add("user_last-game"),t.innerHTML=`\n    <div class="user_game-preview">\n        <img class="user_game-img" src="https://media.retroachievements.org/Badge/${e.BadgeName}.png" alt="">\n    </div>\n    <div class="user_game-title">${e.Title}</div>\n    <p class="user_game-description">${e.DateAwarded??e.Date}</p>\n    `,t}close(){m.buttons.user.click()}}class Notifications{get contextMenuItems(){return[{label:"Show header",type:"checkbox",name:"context_hide-notification-header",id:"context_hide-notification-header",checked:this.SHOW_HEADER,event:'onchange="ui.notifications.SHOW_HEADER = this.checked;"'},{label:"Hide background",type:"checkbox",name:"context_hide-notification-bg",id:"context_hide-notification-bg",checked:this.HIDE_BG,event:'onchange="ui.notifications.HIDE_BG = this.checked;"'},{label:"Show timestamp",type:"checkbox",name:"context_show-notification-time",id:"context_show-notification-time",checked:this.SHOW_TIMESTAMP,event:'onchange="ui.notifications.SHOW_TIMESTAMP = this.checked;"'}]}types={newGame:"newGame",earnedAchivs:"earnedAchivs"};get VISIBLE(){return!this.section.classList.contains("hidden")}get SHOW_TIMESTAMP(){return u?.ui.notification_section?.showTimestamp??!0}set SHOW_TIMESTAMP(e){u.ui.notification_section||(u.ui.notification_section={}),this.section.querySelectorAll(".notification_timestamp").forEach((e=>e.classList.toggle("hidden",this.SHOW_TIMESTAMP))),u.ui.notification_section.showTimestamp=e,u.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get SHOW_HEADER(){return u?.ui.notification_section?.showHeader??!0}set SHOW_HEADER(e){u.ui.notification_section||(u.ui.notification_section={}),u.ui.notification_section.showHeader=e,u.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get HIDE_BG(){return u?.ui.notification_section?.hideBg??!1}set HIDE_BG(e){u.ui.notification_section||(u.ui.notification_section={}),u.ui.notification_section.hideBg=e,u.writeConfiguration(),this.section.classList.toggle("hide-bg",this.HIDE_BG)}get NOTIFICATIONS(){return this._notifications??{time:"",notifications:[]}}constructor(){this.initializeElements(),this.addEvents(),this.HIDE_BG=this.HIDE_BG,this.SHOW_HEADER=this.SHOW_HEADER,this.updateInterval=setInterval((()=>{this.container.querySelectorAll(".notification_timestamp").forEach((e=>{e.innerText=this.getDeltaTime(e.dataset.time)}))}),6e4)}initializeElements(){this.section=document.querySelector("#notification_section"),this.container=this.section.querySelector(".notification-container"),this.resizer=this.section.querySelector(".resizer")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{m.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}parseUserSummary(e){e.lastGames.map((e=>(e.DateEarnedHardcore=e.LastPlayed,e.type=this.types.newGame,e))),e.lastAchivs.map((e=>(e.DateEarnedHardcore=e.DateAwarded,e.type=this.types.earnedAchivs,e.BadgeURL=`Badge/${e.BadgeName}.png`,e))),[...e.lastAchivs,...e.lastGames].sort(((e,t)=>-1*UI.sortBy.latest(e,t))).forEach((e=>this.pushNotification({type:e.type,elements:e,time:e.DateEarnedHardcore})))}pushNotification({type:e,elements:t,time:s}){const i=this.generatePopupTime(s);let n=[];switch(e){case this.types.newGame:n.push(this.generateNewgameElement(t));break;case this.types.earnedAchivs:n=this.generateNewachivsElements(Array.isArray(t)?t:[t]);break;default:return void console.log("notification type doesn't exist")}const o=this.generateTimeBlock(i,n);n.length>0&&this.container.prepend(o);const a=o.getBoundingClientRect().height;this.container.style.setProperty("--offset-height",`${a}px`),o.classList.add("notification_popup")}generateTimeBlock(e,t){const s=document.createElement("ul");return s.classList.add("notification_timeblock-list"),s.appendChild(e),t.forEach((e=>{s.appendChild(e)})),s}generatePopupTime(e){const t=document.createElement("li"),s=(e?(e=>{const[t,s]=e.split(", "),[i,n,o]=t.split(".").map(Number),[a,r]=s.split(":").map(Number);return new Date(o,n-1,i,a,r)})(e):new Date).getTime();return t.dataset.time=s,t.classList.add("notification_timestamp"),!this.SHOW_TIMESTAMP&&t.classList.add("hidden"),t.innerHTML=`\n     ${this.getDeltaTime(s)}\n    `,t}generateNewgameElement(e){const t=document.createElement("li");return t.classList.add("notification-game","new-game"),t.innerHTML=`\n      <div class="prev">\n        <img class="prev-img" src="https://media.retroachievements.org${e.ImageIcon}" alt=" ">\n      </div>\n      <div class="notification_details">\n        <h3 class="achiv-name">\n          <a target="_blanc" href="https://retroachievements.org/game/${e.ID??e.GameID}">\n            ${e.Title}\n          </a>\n        </h3>\n        <p class="achiv-description">${e.Genre?e.Genre+",\n":""}${e.ConsoleName}</p>\n        <div class="notification_description-icons">\n          <p class="notification_description-text" title="points">\n            <i class="notification_description-icon  points-icon"></i>\n            ${e.points_total??""}\n          </p>\n          <p class="notification_description-text" title="retropoints">\n            <i class="notification_description-icon  achievements-icon"></i>\n            ${e.achievements_published??e.AchievementsTotal}\n          </p>\n          <p class="notification_description-text" title="earned by">\n            <i class="notification_description-icon  players-icon"></i>\n            ${e.NumDistinctPlayersHardcore??""}\n          </p>\n        </div>\n      </div>\n    `,t}generateNewachivsElements(e){let t=[];return e.forEach((e=>{const{AchievementID:s,BadgeURL:i,Description:n,Title:o,Points:a,TrueRatio:r,HardcoreMode:c,ID:l}=e;let d="";m.GAME_DATA.ID==e.GameID&&(d=~~(100*m.ACHIEVEMENTS[s??l].NumAwardedHardcore/m.GAME_DATA.NumDistinctPlayers));const h=document.createElement("li");h.classList.add("notification-achiv","new-achiv"),h.innerHTML=`   \n      <div class="prev">\n                <img class="prev-img" src="https://media.retroachievements.org/${i}" alt=" ">\n              </div>\n              <div class="notification_details">\n                <h3 class="achiv-name"><a target="_blanc" href="https://retroachievements.org/achievement/${s??l}">${o}</a></h3>\n                <p class="achiv-description">${n}</p>\n                <div class="notification_description-icons">       \n                  <p class="notification_description-text" title="points">\n                    <i class="notification_description-icon  points-icon"></i>\n                    ${a}\n                  </p>\n                  \n                  <p class="notification_description-text" title="retropoints">\n                    <i class="notification_description-icon  retropoints-icon"></i>\n                    ${r??""}\n                  </p>\n                  <p class="notification_description-text" title="earned by">\n                    <i class="notification_description-icon  trending-icon"></i>\n                    ${d?d+"%":""}\n                  </p>\n                </div>             \n              </div>\n      `,t.push(h)})),t}getDeltaTime(e){let t=+e,s=~~(((new Date).getTime()-t)/1e3);return s<120?"moment ago":s<600?"few minutes ago":s<3600?~~(s/60)+" minutes ago":s<43200?new Date(t).toLocaleTimeString().replace(/:[^:]*$/gi,""):new Date(t).toLocaleString().replace(/:[^:]*$/gi,"")}}class Stats{get contextMenuItems(){return[{label:"Show stats",elements:[{type:"checkbox",name:"context_show-points",id:"context_show-points",label:"Hard points",checked:this.SHOW_HP,event:'onchange="ui.stats.SHOW_HP = this.checked;"'},{type:"checkbox",name:"context_show-retropoints",id:"context_show-retropoints",label:"Retropoints",checked:this.SHOW_RP,event:'onchange="ui.stats.SHOW_RP = this.checked;"'},{type:"checkbox",name:"context_show-softpoints",id:"context_show-softpoints",label:"Softpoints",checked:this.SHOW_SP,event:'onchange="ui.stats.SHOW_SP = this.checked;"'},{type:"checkbox",name:"context_show-rank",id:"context_show-rank",label:"Rank",checked:this.SHOW_RANK,event:'onchange="ui.stats.SHOW_RANK = this.checked;"'},{type:"checkbox",name:"context_show-percentile",id:"context_show-percentile",label:"Percentile",checked:this.SHOW_PERCENTILE,event:'onchange="ui.stats.SHOW_PERCENTILE = this.checked;"'},{type:"checkbox",name:"context_show-true-ratio",id:"context_show-true-ratio",label:"True Ratio",checked:this.SHOW_TR,event:'onchange="ui.stats.SHOW_TR = this.checked;"'}]},{label:"Style",elements:[{type:"checkbox",name:"context_show-header",id:"context_show-header",label:"Show header",checked:this.SHOW_HEADER,event:'onchange="ui.stats.SHOW_HEADER = this.checked;"'},{type:"checkbox",name:"context_show-bg",id:"context_show-bg",label:"Show background",checked:this.SHOW_BG,event:'onchange="ui.stats.SHOW_BG = this.checked;"'}]},{type:"checkbox",name:"context_show-session-progress",id:"context_show-session-progress",label:"Show Session Progress",checked:this.SHOW_SESSION_PROGRESS,event:'onchange="ui.stats.SHOW_SESSION_PROGRESS = this.checked;"'}]}get SHOW_BG(){return u.ui?.stats_section?.showBG??!0}set SHOW_BG(e){this.saveProppertySetting("showBG",e),this.setElementsVisibility()}get SHOW_HEADER(){return u.ui?.stats_section?.showHeader??!0}set SHOW_HEADER(e){this.saveProppertySetting("showHeader",e),this.setElementsVisibility()}get SHOW_HP(){return u.ui?.stats_section?.showHP??!0}set SHOW_HP(e){this.saveProppertySetting("showHP",e),this.setElementsVisibility()}get SHOW_RP(){return u.ui?.stats_section?.showRP??!0}set SHOW_RP(e){this.saveProppertySetting("showRP",e),this.setElementsVisibility()}get SHOW_SP(){return u.ui?.stats_section?.showSP??!0}set SHOW_SP(e){this.saveProppertySetting("showSP",e),this.setElementsVisibility()}get SHOW_RANK(){return u.ui?.stats_section?.showRank??!0}set SHOW_RANK(e){this.saveProppertySetting("showRank",e),this.setElementsVisibility()}get SHOW_PERCENTILE(){return u.ui?.stats_section?.showPercentile??!0}set SHOW_PERCENTILE(e){this.saveProppertySetting("showPercentile",e),this.setElementsVisibility()}get SHOW_TR(){return u.ui?.stats_section?.showTrueRatio??!0}set SHOW_TR(e){this.saveProppertySetting("showTrueRatio",e),this.setElementsVisibility()}get SHOW_SESSION_PROGRESS(){return u.ui?.stats_section?.showSessionProgress??!0}set SHOW_SESSION_PROGRESS(e){this.saveProppertySetting("showSessionProgress",e),this.setElementsVisibility()}get VISIBLE(){return!this.section.classList.contains("hidden")}saveProppertySetting(e,t){u.ui.stats_section||(u.ui.stats_section={}),u.ui.stats_section[e]=t,u.writeConfiguration()}initialUserSummary;userSummary;constructor(){this.initializeElements(),this.setElementsVisibility(),this.addEvents()}initializeElements(){this.section=document.querySelector("#stats_section"),this.header=this.section.querySelector(".header-container"),this.container=this.section.querySelector(".stats-container"),this.rankRateElement=this.section.querySelector("#stats_rank-rate"),this.rankElement=this.section.querySelector("#stats_rank"),this.pointsElement=this.section.querySelector("#stats_points"),this.retropointsElement=this.section.querySelector("#stats_retropoints"),this.softpointsElement=this.section.querySelector("#stats_softpoints"),this.trueRatioElement=this.section.querySelector("#stats_true-ratio"),this.masteredCountElement=this.section.querySelector("#stats_mastered-count"),this.beatenCountElement=this.section.querySelector("#stats_beaten-count"),this.playedCountElement=this.section.querySelector("#stats_played-count"),this.resizer=this.section.querySelector(".resizer")}setElementsVisibility(){this.pointsElement.closest("li").classList.toggle("hidden",!this.SHOW_HP),this.retropointsElement.closest("li").classList.toggle("hidden",!this.SHOW_RP),this.softpointsElement.closest("li").classList.toggle("hidden",!this.SHOW_SP),this.rankElement.closest("li").classList.toggle("hidden",!this.SHOW_RANK),this.rankRateElement.closest("li").classList.toggle("hidden",!this.SHOW_PERCENTILE),this.trueRatioElement.closest("li").classList.toggle("hidden",!this.SHOW_TR),this.section.classList.toggle("compact",!this.SHOW_HEADER),this.section.classList.toggle("hide-bg",!this.SHOW_BG),this.container.classList.toggle("show-session-progress",this.SHOW_SESSION_PROGRESS)}addEvents(){this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{m.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),new Sortable(this.container,{animation:100})}initialSetStats({userSummary:e,completionProgress:t}){this.initialData={Rank:e.Rank,rankRate:+(100*e.Rank/e.TotalRanked).toFixed(2),TotalPoints:e.TotalPoints,TotalSoftcorePoints:e.TotalSoftcorePoints,TotalTruePoints:e.TotalTruePoints,trueRatio:+(e.TotalTruePoints/e.TotalPoints).toFixed(2)},e&&(this.userSummary=e,this.initialUserSummary=e,this.rankElement.innerText=e.Rank,this.rankRateElement.innerText=(100*e.Rank/e.TotalRanked).toFixed(2)+"%",this.pointsElement.innerText=e.TotalPoints,this.softpointsElement.innerText=e.TotalSoftcorePoints,this.retropointsElement.innerText=e.TotalTruePoints,this.trueRatioElement.innerText=(e.TotalTruePoints/e.TotalPoints).toFixed(2))}async updateStats({currentUserSummary:e}){e||(e=await g.getUserSummary({gamesCount:"0",achievesCount:0}));const t=(t,s)=>{let i=0,n=0,o=0,a=0;switch(s){case"rankRate":o=(100*e.Rank/e.TotalRanked).toFixed(2),a=(100*this.userSummary.Rank/this.userSummary.TotalRanked).toFixed(2),i=+(o-a).toFixed(2),n=+(o-this.initialData.rankRate).toFixed(2),o+="%";break;case"trueRatio":o=(e.TotalTruePoints/e.TotalPoints).toFixed(2),a=(this.userSummary.TotalTruePoints/this.userSummary.TotalPoints).toFixed(2),i=+(o-a).toFixed(2),n=+(o-this.initialData.trueRatio).toFixed(2);break;default:i=e[s]-this.userSummary[s],n=e[s]-this.initialData[s],o=e[s]}if(0===i)return;const r=i<0,c=n<0;t.classList.add("delta"),t.classList.toggle("negative",r),t.dataset.delta=`${r?"":"+"}${i}`;setTimeout((()=>{t.innerHTML=o+` <span class="session-progress ${c?"negative":""}">\n          ${c?"":"+"}${n}</span>`,t.classList.remove("delta")}),5e3)};t(this.rankRateElement,"rankRate"),t(this.rankElement,"Rank"),t(this.pointsElement,"TotalPoints"),t(this.softpointsElement,"TotalSoftcorePoints"),t(this.retropointsElement,"TotalTruePoints"),t(this.trueRatioElement,"trueRatio"),this.userSummary=e}}const n=e=>new Promise((t=>setTimeout(t,e)));function o(e){return e?.reduce(((e,t)=>e+`<i class="game-card_suffix game-title_${t.toLowerCase()}">${t}</i> `),"")}const a=e=>{let t;const s=["level","levels","stage","area","world","mission","chapter","section","part","zone","phase","realm","domain","episode","act","sequence","tier","floor","dimension","region","floor","scene","🚩","in"].join("|");return t=((e,t)=>{const i=new RegExp(`(${s})(\\s|-\\s*|:\\s*)((\\d+-\\d+)|(\\d+))`,"gi"),n=(new RegExp(`\\s*((\\d+-\\d+)|(\\d+))\\s(${s})`,"gi"),e.matchAll(i));for(const e of n){return Number(e[3]?.replace("-","."))}return null})((e=>{const t={first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9,tenth:10,"1st":1,"2nd":2,"3rd":3,"4th":4,"5th":5,"6th":6,"7th":7,"8th":8,"9th":9,"10th":10},s=new RegExp(Object.keys(t).join("|"),"gi");return e.replace(s,(e=>t[e.toLowerCase()]))})(e)),!!Number.isFinite(t)&&t},r={1:"Genesis/Mega Drive",2:"Nintendo 64",3:"SNES/Super Famicom",4:"Game Boy",5:"GB Advance",6:"GB Color",7:"NES/Famicom",8:"PC Engine/TurboGrafx-16",9:"Sega CD",10:"32X",11:"Master System",12:"PlayStation",13:"Atari Lynx",14:"Neo Geo Pocket",15:"Game Gear",17:"Atari Jaguar",18:"Nintendo DS",21:"PlayStation 2",23:"Magnavox Odyssey 2",24:"Pokemon Mini",25:"Atari 2600",27:"Arcade",28:"Virtual Boy",29:"MSX",33:"SG-1000",37:"Amstrad CPC",38:"Apple II",39:"Saturn",40:"Dreamcast",41:"PlayStation Portable",43:"3DO Interactive Multiplayer",44:"ColecoVision",45:"Intellivision",46:"Vectrex",47:"PC-8000/8800",49:"PC-FX",51:"Atari 7800",53:"WonderSwan",56:"Neo Geo CD",57:"Fairchild Channel F",63:"Watara Supervision",69:"Mega Duck",71:"Arduboy",72:"WASM-4",73:"Arcadia 2001",74:"Interton VC 4000",75:"Elektor TV Games Computer",76:"PC Engine CD/TurboGrafx-CD",77:"Atari Jaguar CD",78:"Nintendo DSi",80:"Uzebox",101:"Events",102:"Standalone"},c={1:"Compilation",2:"Strategy",3:"Casino",4:"Music",5:"Action",6:"Platform",7:"Puzzle",8:"Quiz",9:"Shooter",10:"Vehicle Simulation",11:"Construction and Management Simulation",12:"Fighting",13:"Sports",14:"Role-Playing",15:"Racing",16:"Beat 'em Up",17:"Adventure",18:"Education",19:"Life Simulation",20:"Board Game",21:"Stealth",22:"Pinball",23:"Flight Simulator",24:"Visual Novel",25:"Horror",26:"Sandbox",27:"Party",28:"MMO"},l={SEGA:{"SG-1000":"33","Master System":"11","Genesis/Mega Drive":"1","Game Gear":"15","Sega CD":"9","32X":"10",Saturn:"39",Dreamcast:"40"},Nintendo:{"NES/Famicom":"7","Game Boy":"4","SNES/Super Famicom":"3","Game Boy Color":"6","Nintendo 64":"2","Game Boy Advance":"5","Virtual Boy":"28","Nintendo DS":"18","Nintendo DSi":"78","Pokemon Mini":"24"},NEC:{"PC Engine/TurboGrafx-16":"8","PC Engine CD/TurboGrafx-CD":"76","PC-8000/8800":"47","PC-FX":"49"},SONY:{PlayStation:"12","PlayStation 2":"21","PlayStation Portable":"41"},SNK:{"Neo Geo Pocket":"14","Neo Geo CD":"56"},Atari:{"Atari 2600":"25","Atari 7800":"51","Atari Lynx":"13","Atari Jaguar":"17","Atari Jaguar CD":"77"},Other:{"Magnavox Odyssey 2":"23",Arcade:"27","Apple II":"38","Amstrad CPC":"37",MSX:"29","3DO Interactive Multiplayer":"43",ColecoVision:"44",Intellivision:"45",Vectrex:"46",WonderSwan:"53","Fairchild Channel F":"57","Watara Supervision":"63","Mega Duck":"69",Arduboy:"71","WASM-4":"72","Arcadia 2001":"73","Interton VC 4000":"74","Elektor TV Games Computer":"75",Uzebox:"80"},Special:{Events:"101",Standalone:"102"}},d="site:www.romhacking.net OR site:wowroms.com/en/roms OR site:cdromance.org OR site:coolrom.com.au/roms OR site:planetemu.net OR site:emulatorgames.net OR site:romsfun.com/roms OR site:emu-land.net/en";class APIWorker{get _savedCompletionProgress(){return u._cfg?.apiWorker?.completionProgress??{}}get SAVED_COMPLETION_PROGRESS(){let e=this._savedCompletionProgress;return e?.Total&&u._cfg.apiWorker.targetUser===u.targetUser?this.updateCompletionProgress({batchSize:20,savedArray:e.Results}).then((()=>this._savedCompletionProgress)):this.updateCompletionProgress({batchSize:500}).then((()=>this._savedCompletionProgress))}set SAVED_COMPLETION_PROGRESS(e){e.Results=e.Results.map((e=>(delete e.ConsoleName,delete e.NumLeaderboards,e))),u._cfg.apiWorker||(u._cfg.apiWorker={}),u._cfg.apiWorker.targetUser=u.targetUser,u._cfg.apiWorker.completionProgress=e,u.writeConfiguration()}baseUrl="https://retroachievements.org/API/";endpoints={userProfile:"API_GetUserProfile.php",gameProgress:"API_GetGameInfoAndUserProgress.php",recentAchieves:"API_GetUserRecentAchievements.php",gameInfo:"API_GetGame.php",extendedGameInfo:"API_GetGameExtended.php",recentlyPlayedGames:"API_GetUserRecentlyPlayedGames.php",userAwards:"API_GetUserAwards.php",userGameRankAndScore:"API_GetUserGameRankAndScore.php",completionProgress:"API_GetUserCompletionProgress.php",gameList:"API_GetGameList.php",userSummary:"API_GetUserSummary.php"};getUrl({endpoint:e,targetUser:t,gameID:s,minutes:i,apiKey:n,userName:o,achievesCount:a,count:r,offset:c}){let l=new URL(e,this.baseUrl),d={y:n||u.API_KEY,z:o||u.USER_NAME,u:t||u.targetUser,g:s||u.gameID,m:i||2e3,i:s||u.gameID,f:1,h:1,a:a||5,c:r||20,o:c||0};return l.search=new URLSearchParams(d),l}constructor(){}getUserGameRank({targetUser:e,gameID:t}){let s=this.getUrl({endpoint:this.endpoints.userRankAndScore});return fetch(s).then((e=>e.json()))}getProfileInfo({targetUser:e}){let t=this.getUrl({targetUser:e,endpoint:this.endpoints.userProfile});return fetch(t).then((e=>e.json()))}getUserCompelitionProgress({targetUser:e,count:t,offset:s}){let i=this.getUrl({targetUser:e||u.targetUser,count:t||100,offset:s||0,endpoint:this.endpoints.completionProgress});return fetch(i).then((e=>e.json())).then((e=>(e.Results=e.Results.map((e=>(e.ID=e.GameID,e.NumAchievements=e.MaxPossible,delete e.MaxPossible,delete e.NumLeaderboards,e))),e)))}getUserAwards({targetUser:e}){let t=this.getUrl({targetUser:e||u.targetUser,endpoint:this.endpoints.userAwards});return fetch(t).then((e=>e.json())).then((e=>(e.VisibleUserAwards=e.VisibleUserAwards.map((e=>(e.award="Game Beaten"==e.AwardType?"1"==e.AwardDataExtra?"beaten":"beaten_softcore":"1"==e.AwardDataExtra?"mastered":"completed",e.DateEarnedHardcore=e.AwardedAt,"Events"==e.ConsoleName&&(e.award="event"),e.timeString=this.toLocalTimeString(e.AwardedAt),e))),e)))}getGameProgress({targetUser:e,gameID:t}){let s=this.getUrl({endpoint:this.endpoints.gameProgress,targetUser:e||u.targetUser,gameID:t||u.gameID});return fetch(s).then((e=>e.json())).then((e=>{e={...e,TotalRealPlayers:0,TotalRetropoints:0,progressionRetroRatio:0,beatenCount:1/0,masteredCount:1/0,beatenSoftCount:1/0,completedCount:1/0,earnedStats:{soft:{count:0,points:0,retropoints:0,progressionCount:0},hard:{count:0,points:0,retropoints:0,progressionCount:0}}};const t={Count:0,WinCount:0,WinAwardedCount:0,WinAwardedSoftCount:0,WinEarnedCount:0},s={isBeaten:!0,isBeatenSoftcore:!0,isWinEarned:!1,isWinEarnedSoftcore:!1};for(let i of Object.values(e.Achievements))e.TotalRetropoints+=i.TrueRatio,e.TotalRealPlayers<i.NumAwarded&&(e.TotalRealPlayers=i.NumAwarded),i.DateEarned&&(e.earnedStats.soft.count+=1,e.earnedStats.soft.points+=i.Points,e.earnedStats.soft.retropoints+=i.TrueRatio,"progression"!==i.type&&"win_condition"!==i.type||e.earnedStats.soft.progressionCount++),i.DateEarnedHardcore&&(e.earnedStats.hard.count+=1,e.earnedStats.hard.points+=i.Points,e.earnedStats.hard.retropoints+=i.TrueRatio,"progression"!==i.type&&"win_condition"!==i.type||e.earnedStats.hard.progressionCount++),"progression"===i.type&&(t.Count++,i.DateEarned?i.DateEarnedHardcore||(s.isBeaten=!1):(s.isBeaten=!1,s.isBeatenSoftcore=!1),e.beatenCount>i.NumAwardedHardcore&&(e.beatenCount=i.NumAwardedHardcore),e.beatenSoftCount>i.NumAwarded&&(e.beatenSoftCount=i.NumAwarded)),"win_condition"===i.type&&(i.DateEarnedHardcore?(s.isWinEarned=!0,s.isWinEarnedSoftcore=!0):i.DateEarned&&(s.isWinEarnedSoftcore=!0),t.WinCount++,i.NumAwardedHardcore>t.WinAwardedCount&&(t.WinAwardedCount=i.NumAwardedHardcore),i.NumAwarded>t.WinAwardedSoftCount&&(t.WinAwardedSoftCount=i.NumAwarded),i.DateEarnedHardcore&&t.WinEarnedCount++),i.NumAwardedHardcore<e.masteredCount&&(e.masteredCount=i.NumAwardedHardcore),i.NumAwarded<e.completedCount&&(e.completedCount=i.NumAwarded);(e={...e,winVariantCount:t.WinCount,winEarnedCount:t.WinEarnedCount,progressionSteps:t.WinCount>0?t.Count+1:t.Count}).achievements_published===e.NumAwardedToUserHardcore?e.award="mastered":e.achievements_published===e.NumAwardedToUser&&(e.award="completed"),s.isBeaten&&e.earnedStats.hard.progressionCount>=e.progressionSteps?e.progressionAward="beaten":s.isBeatenSoftcore&&e.earnedStats.soft.progressionCount>=e.progressionSteps&&(e.progressionAward="beaten-softcore"),t.WinCount>0&&(e.beatenCount=t.WinAwardedCount,e.beatenSoftCount=t.WinAwardedSoftCount),e.beatenCount!=1/0&&(e.beatenRate=~~(1e4*e.beatenCount/e.TotalRealPlayers)/100),e.beatenSoftCount!=1/0&&(e.beatenSoftRate=~~(1e4*e.beatenSoftCount/e.TotalRealPlayers)/100),e.masteredCount!=1/0&&(e.masteryRate=~~(1e4*e.masteredCount/e.TotalRealPlayers)/100),e.completedCount!=1/0&&(e.completedRate=~~(1e4*e.completedCount/e.TotalRealPlayers)/100);const i=~~(e.TotalRetropoints/e.points_total*100)/100;return e.retroRatio=i,e.gameDifficulty=i>9?"insane":i>7?"expert":i>5?"pro":i>3?"standard":"easy",Object.values(e.Achievements).map((t=>this.fixAchievement(t,e))),e=this.fixGameTitle(e)}))}getRecentAchieves({targetUser:e,minutes:t}){let s=this.getUrl({endpoint:this.endpoints.recentAchieves,targetUser:e,minutes:t});return fetch(s).then((e=>e.json())).then((e=>e.map((e=>(e.Date=this.toLocalTimeString(e.Date),e)))))}getGameInfo({gameID:e,extended:t}){let s=this.getUrl({endpoint:this.endpoints[t?"extendedGameInfo":"gameInfo"],gameID:e});return fetch(s).then((e=>e.json()))}getRecentlyPlayedGames({targetUser:e,count:t}){let s=this.getUrl({endpoint:this.endpoints.recentlyPlayedGames,targetUser:e,count:t||50});return fetch(s).then((e=>e.json())).then((e=>e.map(((e,t)=>(e.ID=e.GameID,e.Points=e.ScoreAchievedHardcore+"/"+e.PossibleScore,e.NumAchievements=e.NumAchievedHardcore+"/"+e.AchievementsTotal,e.NumLeaderboards="",e.DateEarnedHardcore=e.LastPlayed,this.fixGameTitle(e))))))}getUserProfile({userName:e}){let t=this.getUrl({targetUser:e,userName:e,endpoint:this.endpoints.userProfile});return fetch(t).then((e=>e.json()))}getUserSummary({targetUser:e,gamesCount:t=3,achievesCount:s}){let i=this.getUrl({targetUser:e,gameID:t,achievesCount:s,endpoint:this.endpoints.userSummary});return fetch(i).then((e=>e.json())).then((e=>(e.RecentlyPlayed=e.RecentlyPlayed.map((t=>(t.LastPlayed=this.toLocalTimeString(t.LastPlayed),e.Awarded[t.GameID]&&(t={...t,...e.Awarded[t.GameID]}),t))),e.RecentAchievements=Object.values(e.RecentAchievements).flatMap((e=>Object.values(e))).map((e=>(e.DateAwarded=this.toLocalTimeString(e.DateAwarded),e))),e.RecentlyPlayed.length&&(e.isInGame=new Date-new Date(e.RecentlyPlayed[0].LastPlayed)<3e5),e)))}verifyUserIdent({userName:e,apiKey:t}){let s=this.getUrl({targetUser:e,userName:e,apiKey:t,endpoint:this.endpoints.userProfile});return fetch(s).then((e=>e.json()))}getGameList({userName:e,apiKey:t,systemID:s}){let i=this.getUrl({userName:e,apiKey:t,gameID:s,endpoint:this.endpoints.gameList});return fetch(i).then((e=>e.json()))}doTestEndpoint({endpoint:e}){let t=this.getUrl({endpoint:e});return fetch(t).then((e=>e.json())).then((e=>console.log(e)))}async updateCompletionProgress({savedArray:e=[],completionProgress:t=[],batchSize:s=500}){let i=await this.getUserCompelitionProgress({count:s,offset:t.length}),n=(t=[...t,...i.Results]).at(-1);if(e.findIndex((e=>e.hasOwnProperty("GameID")&&e.GameID===n.GameID&&e.MostRecentAwardedDate===n.MostRecentAwardedDate))>=0||t.length===i.Total){const s=t.map((e=>e.GameID));e=e.filter((e=>!s.includes(e.GameID))),e=[...t,...e],this.SAVED_COMPLETION_PROGRESS={Total:e.length,Results:e}}else setTimeout((()=>this.updateCompletionProgress({savedArray:e,completionProgress:t,batchSize:s})),100)}fixAchievement(e,t){const{BadgeName:s,DateEarned:i,DateEarnedHardcore:n,NumAwardedHardcore:o,NumAwarded:a,TrueRatio:r,ID:c}=e,{NumDistinctPlayers:l,NumAwardedToUserHardcore:d,TotalRealPlayers:h}=t,u=100*(o-.5*d)/(.5*(l+h)-.5*d);t.Achievements[c]={...e,totalPlayers:l,isEarned:!!i,isHardcoreEarned:!!n,DateEarned:i&&this.toLocalTimeString(i),DateEarnedHardcore:n&&this.toLocalTimeString(n),prevSrc:`https://media.retroachievements.org/Badge/${s}.png`,rateEarned:~~(100*a/l)+"%",rateEarnedHardcore:~~(100*o/l)+"%",trend:u,level:this.getCheevoLevel(e),difficulty:u<1.5&&r>300||r>=500?"hell":u<=3&&r>100||r>=300?"insane":u<8&&r>24?"expert":u<13&&r>10?"pro":u<20&&r>5||r>10?"standard":"easy"}}fixGameTitle(e){let t=e.Title;const s=[/\[SUBSET[^\[]*\]/gi,/~[^~]*~/g,".HACK//"].reduce(((s,i)=>{const n=new RegExp(i,"gi"),o=e.Title.match(n);return o&&o.forEach((e=>{t=t.replace(e,"");let i=e;s.push(i.replace(/[~\.\[\]]|subset -|\/\//gi,""))})),s}),[]);return e.badges=s,e.FixedTitle=t.trim(),e}toLocalTimeString(e){!/(\+00\:00$)|(z$)/gi.test(e)&&(e+="+00:00");return new Date(e).toLocaleDateString("uk-UA",{day:"2-digit",month:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",hour12:!1})}getCheevoLevel(e){const t=["level","levels","stage","area","world","mission","chapter","section","part","zone","phase","realm","domain","episode","act","sequence","tier","floor","dimension","region","scene","screen","complete","round\\s"],s={one:"1",first:"1",two:"2",second:"2",three:"3",third:"3",four:"4",fourth:"4",five:"5",fifth:"5",six:"6",sixth:"6",seven:"7",seventh:"7",eight:"8",eighth:"8",nine:"9",ninth:"9",ten:"10",tenth:"10",eleven:"11",eleventh:"11",twelve:"12",twelfth:"12",thirteen:"13",thirteenth:"13",fourteen:"14",fourteenth:"14",fifteen:"15",fifteenth:"15",sixteen:"16",sixteenth:"16",seventeen:"17",seventeenth:"17",eighteen:"18",eighteenth:"18",nineteen:"19",nineteenth:"19",twenty:"20",twentieth:"20"};const i=function(e){const s=t.join("|"),i="\\d{1,2}(?!\\d|\\s*%)",n=new RegExp(`(?:${s})\\s*((${i}-${i})|(${i}))|((${i}-${i})|(${i}))\\s*(?:${s})`,"gi").exec(e);if(n){const e=n[1]||n[4];return parseFloat(e.replace("-","."))}return null}(function(e){e=e.replaceAll(/(\d)(st|nd|rd|th)/gi,((e,t)=>t));const t=new RegExp(Object.keys(s).join("|"),"gi");return e.replace(t,(e=>s[e.toLowerCase()]))}(e.Description));return Number.isFinite(i)?i:+e.DisplayOrder>0?1e3*e.DisplayOrder:e.ID}async rawgSearchGame({gameTitle:e,platformID:t}){e=e.split("|")[0];const s=h[t];if(!s)return!1;let i=new URL("games","https://api.rawg.io/api/"),n={search:e,platforms:s,key:"179353905bcb491d975b1fc03b3c8bd6"};i.search=new URLSearchParams(n);try{const s=await fetch(i);if(!s.ok)return console.log(`HTTP error! status: ${s.status}`),!1;const n=await s.json(),o=n.results?n.results[0]:null,a=e.replace(/[^a-z0-9]/gi," ").trim(),r=o?.name.replace(/[^a-z0-9]/gi," ").trim()??"";if(!o||a!==r)return console.log(`Game not found for title: ${e} on platform: ${t}`),!1;const c=["name","playtime","released","background_image","rating","ratings","added","metacritic","score","community_rating","genres"];return Object.fromEntries(Object.entries(o).filter((([e])=>c.includes(e))))}catch(e){return console.log(`Fetch error: ${e.message}`),!1}}}const h={1:167,2:83,3:79,4:26,5:24,6:43,7:49,8:null,9:119,10:117,11:74,12:27,13:46,14:null,15:77,17:112,18:9,21:15,23:null,24:null,25:23,27:12,28:null,29:null,33:null,37:null,38:41,39:107,40:106,41:17,43:111,44:null,45:null,46:null,47:null,49:null,51:28,53:null,56:null,57:null,63:null,69:null,71:null,72:null,73:null,74:null,75:null,76:null,77:null,78:13,80:null,101:null,102:null};let u,m,g,p;const E=navigator.userAgent||navigator.vendor||window.opera;/android/i.test(E)||/iPhone/.test(E)&&!window.MSStream?window.location.href="./mobile/index.html":(u=new Config,m=new UI,g=new APIWorker,window.ui=m,window.config=u,window.apiWorker=g),document.addEventListener("keydown",(function(e){const t=["ArrowUp","ArrowUp","ArrowDown","ArrowDown","ArrowLeft","ArrowRight","ArrowLeft","ArrowRight","KeyB","KeyA"],s=e.code;s===t[_.length]?(_.push(s),_.length===t.length&&(S=1===S?2:1,function(){v&&clearTimeout(v),document.querySelector("#secret")?.remove();let e=document.createElement("audio");10!==_.length&&(e=null),_=[],e.id="secret",e.innerHTML=`\n    <source src="./assets/s/ss-${S}.m4a" type="audio/mpeg">\n  `,m.app.appendChild(e),e.play();const t=document.querySelector("#background-animation");t.style.opacity=0,setTimeout((()=>{t.style.opacity=1,t.classList.add("secret"),document.querySelector("#background-animation").style.display="block"}),2e3);v=setTimeout((()=>{t.classList.remove("secret"),document.querySelector("#background-animation").style.display=u.bgVisibility?"block":"none"}),1e3*(2===S?240:66))}())):_=[]}));let _=[],S=0,v=0})();