/*! For license information please see bundle.min.js.LICENSE.txt */
(()=>{"use strict";var e={d:(t,s)=>{for(var i in s)e.o(s,i)&&!e.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:s[i]})},o:(e,t)=>Object.prototype.hasOwnProperty.call(e,t)};e.d({},{Js:()=>_,$W:()=>m,ui:()=>p});const t="retroApiConfig";class Config{get version(){return this._cfg.version??"0"}set version(e){this._cfg.version=e,this.writeConfiguration()}get API_KEY(){return this._cfg.identification.RAApi_key}set API_KEY(e){this._cfg.identification.RAApi_key=e,this.writeConfiguration()}get USER_NAME(){return this._cfg.identification.RAApi_login}set USER_NAME(e){this._cfg.identification.RAApi_login=e,this.writeConfiguration()}get identConfirmed(){return this._cfg.identification.identConfirmed??!1}set identConfirmed(e){this._cfg.identification.identConfirmed=e,this.writeConfiguration()}get DISCORD_WEBHOOK(){return this._cfg.discordWebhook}set DISCORD_WEBHOOK(e){this._cfg.discordWebhook=e,this.writeConfiguration()}get userImageSrc(){return this._cfg.identification.userImageSrc||""}set userImageSrc(e){this._cfg.identification.userImageSrc=e,this.ui.buttons&&(ui.buttons.userImage.src=e),this.writeConfiguration()}get startOnLoad(){return this._cfg.settings.startOnLoad}set startOnLoad(e){this._cfg.settings.startOnLoad=e,this.writeConfiguration()}get targetUser(){return this._cfg.settings.targetUser||this.USER_NAME}set targetUser(e){this._cfg.settings.targetUser=e,this.writeConfiguration(),this.identConfirmed&&(ui.settings.getLastGameID(),ui.awards.updateAwards())}get gameID(){return this._cfg.settings.gameID}set gameID(e){this._cfg.settings.gameID=e,this.writeConfiguration()}get updateDelay(){const e=this._cfg.settings.updateDelay;return e<5?5:e}get updateDelayInMiliSecs(){return 1e3*this._cfg.settings.updateDelay}set updateDelay(e){let t=parseInt(e)>0?e:10;this._cfg.settings.updateDelay=t,this.writeConfiguration()}get bgVisibility(){return this._cfg.settings.bgVisibility??!0}set bgVisibility(e){this._cfg.settings.bgVisibility=e,this.writeConfiguration()}get targetMoveToTop(){return this._cfg.settings.targetMoveToTop}set targetMoveToTop(e){this._cfg.settings.targetMoveToTop=e,this.writeConfiguration()}get aotw(){const e=this._cfg.aotw;return!!(e&&function(e){const t=new Date,s=new Date;return s.setDate(t.getDate()-7),new Date(e)>s}(e.StartAt))&&this._cfg.aotw}set aotw(e){this._cfg.aotw=e,this.writeConfiguration()}get ui(){return this._cfg.ui}get mainColor(){return this._cfg.settings.mainColor??s.default.mainColor}get secondaryColor(){return this._cfg.settings.secondaryColor??s.default.secondaryColor}get accentColor(){return this._cfg.settings.accentColor??s.default.accentColor}get fontColor(){return this._cfg.settings.fontColor??s.default.fontColor}get selectionColor(){return this._cfg.settings.selectionColor??s.default.selectionColor}set mainColor(e){this._cfg.settings.mainColor=e,this.writeConfiguration()}set secondaryColor(e){this._cfg.settings.secondaryColor=e,this.writeConfiguration()}set accentColor(e){this._cfg.settings.accentColor=e,this.writeConfiguration()}set fontColor(e){this._cfg.settings.fontColor=e,this.writeConfiguration()}set selectionColor(e){this._cfg.settings.selectionColor=e,this.writeConfiguration()}get colorsPreset(){return this._cfg.settings.preset||"default"}set colorsPreset(e){this._cfg.settings.preset=e,this.writeConfiguration()}constructor(){this.readConfiguration()}getColors(e){return this.colorsPreset=e,"custom"===e?{mainColor:this.mainColor,secondaryColor:this.secondaryColor,accentColor:this.accentColor,fontColor:this.fontColor,selectionColor:this.selectionColor}:s[e]||s.default}setNewPosition({id:e,xPos:t,yPos:s,width:i,height:n,hidden:a}){this._cfg.ui.hasOwnProperty(e)||(this._cfg.ui[e]={id:e,x:t,y:s,width:i,height:n,hidden:a}),t&&(this._cfg.ui[e].x=t),s&&(this._cfg.ui[e].y=s),i&&(this._cfg.ui[e].width=i+"px"),n&&(this._cfg.ui[e].height=n+"px"),void 0!==a&&(this._cfg.ui[e].hidden=a),this.writeConfiguration()}readConfiguration(){let e=JSON.parse(localStorage.getItem(t));e||(e={identification:{RAApi_key:"",RAApi_login:""},settings:{updateDelay:5,sort:"default",gameID:1,ACHIV_MAX_SIZE:150,ACHIV_MIN_SIZE:30},ui:{}}),this._cfg=e,localStorage.setItem(t,JSON.stringify(this._cfg)),this.writeConfiguration()}delayedWrite;writeConfiguration(){clearTimeout(this.delayedWrite),this.delayedWrite=setTimeout((()=>{localStorage.setItem(t,JSON.stringify(this._cfg))}),1e3)}}const s={default:{mainColor:"#171A21",secondaryColor:"#202329",accentColor:"#27396e",fontColor:"#d6d6d6",selectionColor:"#2c303d"},blue:{mainColor:"#070F2B",secondaryColor:"#1B1A55",accentColor:"#535C91",fontColor:"#eeeeee",selectionColor:"#9290C3"},retro:{mainColor:"#1D2B53",secondaryColor:"#333A73",accentColor:"#387ADF",fontColor:"#cdcdcd",selectionColor:"#FBA834"},vintage:{mainColor:"#222831",secondaryColor:"#31363F",accentColor:"#76ABAE",fontColor:"#eeeeee",selectionColor:"#EEEEEE"},pastel:{mainColor:"#51829B",secondaryColor:"#9BB0C1",accentColor:"#F6995C",fontColor:"#000",selectionColor:"#EADFB4"},lightgreen:{mainColor:"#C5EBAA",secondaryColor:"#A5DD9B",accentColor:"#F2C18D",fontColor:"#000000",selectionColor:"#F6F193"},lightblue:{mainColor:"#A0E9FF",secondaryColor:"#89CFF3",accentColor:"#00A9FF",fontColor:"#000000",selectionColor:"#CDF5FD"},synthwave:{mainColor:"#5D0E41",secondaryColor:"#A0153E",accentColor:"#FF204E",fontColor:"#dedede",selectionColor:"#00224D"},brown:{mainColor:"#481E14",secondaryColor:"#9B3922",accentColor:"#0C0C0C",fontColor:"#eeeeee",selectionColor:"#F2613F"},neon:{mainColor:"#7E2553",secondaryColor:"#FF004D",accentColor:"#FAEF5D",fontColor:"#000000",selectionColor:"#50C4ED"},gray:{mainColor:"#808080",secondaryColor:"#757575",accentColor:"#cfcfcf",fontColor:"#000000",selectionColor:"#2ab754"},black:{mainColor:"#050505",secondaryColor:"#202329",accentColor:"#0a7ff5",fontColor:"#ffffff",selectionColor:"#083b82"}},i={gameCard:"./elements/gameCard.elem",about:"./elements/about.elem",target:"./elements/target.elem",achievements:"./elements/progression.elem",panel:"./elements/side-panel.elem",awards:"./elements/awards.elem",status:"./elements/status.elem",games:"./elements/games.elem",note:"./elements/note.elem",notification:"./elements/notification.elem",stats:"./elements/stats.elem"};class AchievementsBlock{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}get contextMenuItems(){return[{label:p.lang.style,elements:[{type:"checkbox",name:"context-show-load-anim",id:"context-show-load-anim",label:"**Show Load Animation**",checked:this.SHOW_LOAD_ANIMATION,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_LOAD_ANIMATION = this.checked"`},{type:"checkbox",name:"context-show-mario",id:"context-show-mario",label:p.lang.showMario,checked:this.SHOW_MARIO,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_MARIO = this.checked"`},{type:"checkbox",name:"context_autoscroll-achieves",id:"context_autoscroll-achieves",label:p.lang.autoscroll,checked:this.AUTOSCROLL,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].AUTOSCROLL = this.checked;"`},{type:"checkbox",name:"context_stretch-achieves",id:"context_stretch-achieves",label:p.lang.stretch,checked:this.ACHIV_STRETCH,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_STRETCH = this.checked;"`},{prefix:p.lang.minSize,postfix:"px",type:"input-number",id:"context-menu_min-size",label:p.lang.minSize,value:this.ACHIV_MIN_SIZE,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_MIN_SIZE = this.value;"`},{prefix:p.lang.maxSize,postfix:"px",type:"input-number",id:"context-menu_max-size",label:p.lang.maxSize,value:this.ACHIV_MAX_SIZE,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].ACHIV_MAX_SIZE = this.value;"`}]},{label:p.lang.overlaySet,elements:[{type:"checkbox",name:"context-hide-unearned",id:"context-hide-unearned",label:p.lang.showOverlay,checked:this.SHOW_PREV_OVERLAY,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_PREV_OVERLAY = this.checked"`},...Object.keys(this.overlayTypes).reduce(((e,t)=>{const s={type:"radio",name:"context-achieves-overlay",id:`context-achieves-overlay-${t}`,label:`${this.overlayTypes[t].name}`,checked:this.OVERLAY_TYPE==t,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].OVERLAY_TYPE = '${t}'"`};return e.push(s),e}),[])]},{label:p.lang.sort,elements:[{type:"radio",name:"context-sort",id:"context-sort_latest",label:p.lang.latest,checked:this.SORT_NAME===UI.sortMethods.latest,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'latest';"`},{type:"radio",name:"context-sort",id:"context-sort_rarest",label:p.lang.rarest,checked:this.SORT_NAME===UI.sortMethods.earnedCount,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'earnedCount';"`},{type:"radio",name:"context-sort",id:"context-sort_points",label:p.lang.points,checked:this.SORT_NAME===UI.sortMethods.points,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'points';"`},{type:"radio",name:"context-sort",id:"context-sort_retropoints",label:p.lang.retropoints,checked:this.SORT_NAME===UI.sortMethods.truepoints,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'truepoints';"`},{type:"radio",name:"context-sort",id:"context-sort_default",label:p.lang.default,checked:this.SORT_NAME===UI.sortMethods.default,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'default';"`},{type:"radio",name:"context-sort",id:"context-sort_level",label:p.lang.level,checked:this.SORT_NAME===UI.sortMethods.level,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'level';"`},{type:"radio",name:"context-sort",id:"context-sort_disable",label:p.lang.disable,checked:this.SORT_NAME===UI.sortMethods.disable,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SORT_NAME = 'disable';"`},{type:"checkbox",name:"context-reverse-sort",id:"context-reverse-sort",label:p.lang.reverse,checked:-1==this.REVERSE_SORT,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].REVERSE_SORT = this.checked"`}]},{label:p.lang.filter,elements:[{type:"radio",name:"context-filter",id:"context_filter-progression",label:p.lang.progression,checked:this.FILTER_NAME===UI.filterMethods.progression,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'progression';"`},{type:"radio",name:"context-filter",id:"context_filter-missable",label:p.lang.missable,checked:this.FILTER_NAME===UI.filterMethods.missable,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'missable';"`},{type:"radio",name:"context-filter",id:"context_filter-earned",label:p.lang.earned,checked:this.FILTER_NAME===UI.filterMethods.earned,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'earned';"`},{type:"radio",name:"context-filter",id:"context_filter-all",label:p.lang.all,checked:this.FILTER_NAME===UI.filterMethods.all,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].FILTER_NAME = 'all';"`},{type:"checkbox",name:"context-reverse-filter",id:"context-reverse-filter",label:p.lang.reverse,checked:this.REVERSE_FILTER,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].REVERSE_FILTER = this.checked;"`},{type:"checkbox",name:"context-hide-filtered",id:"context-hide-filtered",label:p.lang.hideFiltered,checked:this.HIDE_FILTERED,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].HIDE_FILTERED = this.checked;"`}]},{label:p.lang.elements,elements:[{label:p.lang.showHeader,type:"checkbox",name:"context_hide-achivs-header",id:"context_hide-achivs-header",checked:this.SHOW_HEADER,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].SHOW_HEADER = this.checked;"`},{label:p.lang.showBackground,type:"checkbox",name:"context_show-bg",id:"context_show-bg",checked:this.BG_VISIBILITY,event:`onchange="ui.achievementsBlock[${this.CLONE_NUMBER}].BG_VISIBILITY = this.checked;"`}]}]}get OVERLAY_TYPE(){return m?.ui[this.SECTION_NAME]?.overlayType??"border"}set OVERLAY_TYPE(e){m.ui[this.SECTION_NAME].overlayType=e,m.writeConfiguration(),this.updateOverlay()}overlayTypes={border:{name:"Border",link:"../assets/img/border/overlay_sets/",closedLink:"../assets/img/overlay_sets/border/closed-1.png",earnedSoftcoreLink:"../assets/img/overlay_sets/border/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/border/earned.png"},digger:{name:"Digger"},mario_q:{name:"Mario '?'",link:"../assets/img/mario_q/overlay_sets/",closedLink:"../assets/img/overlay_sets/mario_q/closed.webp",earnedSoftcoreLink:"../assets/img/overlay_sets/mario_q/earned_soft.webp",earnedHardcoreLink:"../assets/img/overlay_sets/mario_q/earned.webp"},cd_box:{name:"C&D Box",link:"../assets/img/cd_box/",closedLink:"../assets/img/overlay_sets/cd_box/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/cd_box/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/cd_box/earned.png"},kirby:{name:"Kirby",link:"../assets/img/kirby/",closedLink:"../assets/img/overlay_sets/kirby/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/kirby/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/kirby/earned.png"},megaman:{name:"Megaman",link:"../assets/img/megaman/",closedLink:"../assets/img/overlay_sets/megaman/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/megaman/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/megaman/earned.png"},sonic:{name:"Sonic",link:"../assets/img/sonic/",closedLink:"../assets/img/overlay_sets/sonic/closed.png",earnedSoftcoreLink:"../assets/img/overlay_sets/sonic/earned_soft.png",earnedHardcoreLink:"../assets/img/overlay_sets/sonic/earned.png"}};set SORT_NAME(e){m._cfg.ui[this.SECTION_NAME].sortAchievementsBy=e,m.writeConfiguration(),this.applySorting()}get SORT_NAME(){return m?.ui[this.SECTION_NAME]?.sortAchievementsBy||UI.sortMethods.default}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}set FILTER_NAME(e){m.ui[this.SECTION_NAME].filterBy=e,m.writeConfiguration(),this.applyFilter()}get FILTER_NAME(){return m?.ui[this.SECTION_NAME]?.filterBy||UI.filterMethods.all}get FILTER_METHOD(){return UI.filterBy[this.FILTER_NAME]}get HIDE_FILTERED(){return m?.ui[this.SECTION_NAME]?.hideFiltered??!1}set HIDE_FILTERED(e){m.ui[this.SECTION_NAME].hideFiltered=e,m.writeConfiguration(),this.applyFilter()}get REVERSE_SORT(){return m?.ui[this.SECTION_NAME]?.reverseSort||1}set REVERSE_SORT(e){m.ui[this.SECTION_NAME].reverseSort=e?-1:1,m.writeConfiguration(),this.applySorting()}get REVERSE_FILTER(){return m?.ui[this.SECTION_NAME]?.reverseFilter??!1}set REVERSE_FILTER(e){m.ui[this.SECTION_NAME].reverseFilter=e,m.writeConfiguration(),this.applyFilter()}get ACHIV_MIN_SIZE(){return m?.ui[this.SECTION_NAME]?.ACHIV_MIN_SIZE??30}set ACHIV_MIN_SIZE(e){+e>10&&(m.ui[this.SECTION_NAME].ACHIV_MIN_SIZE=e,m.writeConfiguration(),this.fitSizeVertically())}get ACHIV_MAX_SIZE(){return m?.ui[this.SECTION_NAME]?.ACHIV_MAX_SIZE??150}set ACHIV_MAX_SIZE(e){+e>+this.ACHIV_MIN_SIZE&&(m.ui[this.SECTION_NAME].ACHIV_MAX_SIZE=e,m.writeConfiguration(),this.fitSizeVertically())}get ACHIV_STRETCH(){return m?.ui[this.SECTION_NAME]?.stretchAchievements??!1}set ACHIV_STRETCH(e){m.ui[this.SECTION_NAME].stretchAchievements=e,m.writeConfiguration(),this.container.style.height=this.ACHIV_STRETCH?"100%":"auto"}get BG_VISIBILITY(){return m?.ui[this.SECTION_NAME]?.bgVisibility??!0}set BG_VISIBILITY(e){m.ui[this.SECTION_NAME].bgVisibility=e,m.writeConfiguration(),this.section.classList.toggle("hide-bg",!this.BG_VISIBILITY)}get SHOW_HEADER(){return m?.ui[this.SECTION_NAME]?.showHeader??!0}set SHOW_HEADER(e){m.ui[this.SECTION_NAME].showHeader=e,m.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get AUTOSCROLL(){return m?.ui[this.SECTION_NAME]?.autoscroll??!0}set AUTOSCROLL(e){m.ui[this.SECTION_NAME].autoscroll=e,e?this.startAutoScroll():this.stopAutoScroll()}get SMART_AUTOSCROLL(){return!1}set SMART_AUTOSCROLL(e){m.ui[this.SECTION_NAME].smartAutoscroll=e,this.stopAutoScroll(),this.startAutoScroll()}get SHOW_PREV_OVERLAY(){return m.ui[this.SECTION_NAME]?.showPrevOverlay??!0}set SHOW_PREV_OVERLAY(e){m.ui[this.SECTION_NAME].showPrevOverlay=e,m.writeConfiguration(),this.container.querySelectorAll(".achiv-block").forEach((t=>t.classList.toggle("overlay",e)))}get SHOW_MARIO(){return m.ui[this.SECTION_NAME]?.showMario??!0}set SHOW_MARIO(e){m.ui[this.SECTION_NAME].showMario=e,m.writeConfiguration()}get SHOW_LOAD_ANIMATION(){return m.ui[this.SECTION_NAME]?.showLoadAnimation??!0}set SHOW_LOAD_ANIMATION(e){m.ui[this.SECTION_NAME].showLoadAnimation=e,m.writeConfiguration()}get SECTION_NAME(){return 0===this.CLONE_NUMBER?"achievements_section":`achievements_section-${this.CLONE_NUMBER}`}get CLONE_NUMBER(){return this._cloneNumber}set CLONE_NUMBER(e){if(!e?.length)return this._cloneNumber=0;this._cloneNumber=e.length}constructor(e=!1){this.CLONE_NUMBER=p.achievementsBlock,this.isClone=e,this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=this.generateNewWidget({}),!this.isClone&&(this.widgetIcon=document.querySelector("#open-achivs-button")),document.querySelector(".wrapper").appendChild(this.section),this.container=this.section.querySelector(".achievements-container"),this.resizer=this.section.querySelector(`#achivs-resizer${this.CLONE_NUMBER}`)}addEvents(){this.section.querySelector(".header-container").addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{p.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:this.CLONE_NUMBER})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),this.stopAutoScroll(),UI.resizeEvent({event:e,section:this.section,callback:()=>{this.fitSizeVertically(!0)}})})),this.resizer.addEventListener("mouseup",(()=>{this.startAutoScroll()})),new Sortable(this.container,{group:{name:"cheevos",pull:"clone",push:"false"},animation:100,chosenClass:"dragged"})}setValues(){UI.applyPosition({widget:this}),this.section.classList.toggle("hide-bg",!this.BG_VISIBILITY),this.section.classList.toggle("compact",!this.SHOW_HEADER),m.ui[this.SECTION_NAME]&&(this.section.style.top=m.ui[this.SECTION_NAME].y??"0px",this.section.style.left=m.ui[this.SECTION_NAME].x??"0px",this.section.style.height=m.ui[this.SECTION_NAME].height??"600px",this.section.style.width=m.ui[this.SECTION_NAME].width??"350px"),this.container.style.height=this.ACHIV_STRETCH?"100%":"auto",this.AUTOSCROLL&&this.startAutoScroll(),this.updateOverlay()}updateOverlay(){this.section.dataset.overlay=this.OVERLAY_TYPE}parseGameAchievements(e){(()=>{this.container.innerHTML=""})(),(e=>{Object.values(e.Achievements).forEach((e=>{const t=this.generateAchievement(e);this.container.appendChild(t)}))})(e),this.fitSizeVertically(),this.applyFilter(),this.applySorting(),this.SHOW_LOAD_ANIMATION&&this.doLoadAnimation(),this.startAutoScroll()}generateAchievement(e){function t(){s();const t=UI.generateAchievementPopup(e);p.app.appendChild(t),function(e,t){const s=t.getBoundingClientRect(),i=s.left+t.offsetWidth+8,n=s.top+2;e.style.left=i+"px",e.style.top=n+"px";let{left:a,right:o,top:r,bottom:c}=e.getBoundingClientRect();a<0&&e.classList.remove("left-side"),o>window.innerWidth&&e.classList.add("left-side"),r<0?e.classList.remove("top-side"):c>window.innerHeight&&e.classList.add("top-side")}(t,i),setTimeout((()=>t.classList.add("visible")),333)}function s(){document.querySelectorAll(".popup").forEach((e=>e.remove()))}const i=document.createElement("li");var n;return n=this,i.classList.add("achiv-block"),i.classList.toggle("start-load-anim",n.SHOW_LOAD_ANIMATION),i.classList.toggle("overlay",n.SHOW_PREV_OVERLAY),i.classList.toggle("earned",e.isEarned),i.classList.toggle("hardcore",e.isHardcoreEarned),i.dataset.achivId=e.ID,i.dataset.Points=e.Points,i.dataset.TrueRatio=e.TrueRatio,e.TrueRatio>50&&(i.dataset.rarity="normal"),e.TrueRatio>150&&(i.dataset.rarity="rare"),e.TrueRatio>300&&(i.dataset.rarity="mythycal"),i.dataset.DisplayOrder=e.DisplayOrder,i.dataset.type=e.type,e.level&&(i.dataset.level=e.level),i.dataset.NumAwardedHardcore=e.NumAwardedHardcore,e.DateEarnedHardcore&&(i.dataset.DateEarnedHardcore=e.DateEarnedHardcore),e.DateEarned&&(i.dataset.DateEarned=e.DateEarned),i.innerHTML=`\n        <div class="preview-container">\n          <img class="achiv-preview" src="${e.prevSrc}"  alt="${e.Title} icon"/>\n        </div>\n        `,i.addEventListener("mouseover",t),i.addEventListener("mouseleave",s),i.addEventListener("mousedown",(e=>{e.stopPropagation()})),i}async moveToTop(e){if(this.container.offsetHeight<this.container.scrollHeight)return void this.applySorting();const t=-1===this.REVERSE_SORT;this.container.style.setProperty("--duration","1000ms");const s=e,i=this.container.querySelector(".achiv-block"),n=this.container.querySelector(".achiv-block:last-of-type"),a=document.createElement("li"),o=document.createElement("li");a.classList.add("shrink-element"),o.classList.add("grow-element");const c=t?n.offsetLeft:i.offsetLeft,l=t?n.offsetTop:i.offsetTop,d=s.offsetLeft,h=s.offsetTop;s.style.left=d+"px",s.style.top=h+"px",s.classList.add("move"),t?this.container.append(o):this.container.prepend(o),this.container.insertBefore(a,s),await r(50),s.style.left=c+"px",s.style.top=l+"px",await r(1100),o.remove(),a.remove(),s.classList.remove("move"),s.style.left="auto",s.style.top="auto",t?this.container.append(s):this.container.prepend(s),this.applyFilter()}fitSizeVertically(e=!1){const{section:t,container:s}=this;let i,n;s.style.flex="1",e||!m.ui[this.SECTION_NAME]?.height?(i=s.clientHeight,n=s.clientWidth):(i=parseInt(m.ui[this.SECTION_NAME].height)-t.querySelector(".header-container").clientHeight,n=parseInt(m.ui[this.SECTION_NAME].width)),s.style.flex="";const a=s.querySelectorAll(".achiv-block:not(.removed)").length;if(0===a)return;let o,r,c=Math.floor(Math.sqrt(n*i/a));do{c--,o=Math.floor(i/(c+1)),r=Math.floor(n/(c+1))}while(o*r<a&&c>this.ACHIV_MIN_SIZE);c=c<this.ACHIV_MIN_SIZE?this.ACHIV_MIN_SIZE:c>this.ACHIV_MAX_SIZE?this.ACHIV_MAX_SIZE:c,this.section.style.setProperty("--achiv-height",c+"px")}autoscrollInterval={};async updateEarnedAchieves({earnedAchievementIDs:e}){await r(500),this.stopAutoScroll();for(let t of e){const e=this.container.querySelector(`.achiv-block[data-achiv-id="${t}"]`);this.SHOW_MARIO&&this.isAchieveVisible(e)&&p.ACHIEVEMENTS[t].isHardcoreEarned?await this.marioAction(e):e.classList.add("earned",p.ACHIEVEMENTS[t].isHardcoreEarned?"hardcore":"f"),this.SORT_NAME==UI.sortMethods.latest&&await this.moveToTop(e),p.ACHIEVEMENTS[t].DateEarnedHardcore&&(e.dataset.DateEarnedHardcore=p.ACHIEVEMENTS[t].DateEarnedHardcore)}this.applyFilter(),this.startAutoScroll()}async marioAction(e){const t=document.createElement("div");t.classList.add("mario__container","stand"),this.container.appendChild(t);const s=t.getBoundingClientRect().width,i=e?.getBoundingClientRect(),n={xPos:i.left,yPos:i.top+s},a=2*s,o=i.left>window.innerWidth/2,c={xPos:o?window.innerWidth+s:-s,yPos:n.yPos+a},l=70;let d=Math.sqrt(20*a);t.style.top=c.yPos+"px",t.style.left=c.xPos+"px";const h=()=>{const t=document.createElement("div");t.classList.add("coin__container"),t.innerHTML=`\n        <div class='coins__points'>+${e.dataset.TrueRatio}RP</div>\n        <div class='coins__coin'></div>\n        `,this.container.appendChild(t),t.style.top=i.top-i.height/2+"px",t.style.left=n.xPos+"px",e?.classList.add("earned","hardcore","mario-dumb"),setTimeout((()=>e?.classList.remove("mario-dumb")),500),setTimeout((()=>t.remove()),5e3)};await(async()=>{let e=c.xPos;for(t.classList.remove("stand"),t.classList.add("walk"),t.classList.toggle("to-left",o),t.style.setProperty("--frame-duration","70ms");e!==n.xPos;)o?(e-=20,e<n.xPos&&(e=n.xPos)):(e+=20,e>n.xPos&&(e=n.xPos)),t.style.left=e+"px",await r(l);t.classList.remove("walk"),t.classList.add("stand"),await r(500)})(),await(async()=>{t.classList.remove("stand"),t.classList.add("jump");let e=c.yPos;for(;~~d>0;)e-=d,d-=10,e<n.yPos?(e=n.yPos-2,t.style.top=e+"px"):(t.style.top=e+"px",await r(l));for(h(),d=0;e<c.yPos;)e+=d,d+=10,e>c.yPos&&(e=c.yPos),t.style.top=e+"px",await r(l);t.classList.remove("jump"),t.classList.add("stand"),await r(500),t.classList.toggle("to-left",!o),await r(500)})(),await(async()=>{let e=t.getBoundingClientRect().left;for(t.style.setProperty("--frame-duration","52.5ms"),t.className=`mario__container walk ${o?"":"to-left"} `;e!==c.xPos;)o?(e+=20,e>c.xPos&&(e=c.xPos)):(e-=20,e<c.xPos&&(e=c.xPos)),t.style.left=e+"px",await r(52.5)})(),t.remove(),await r(100)}startAutoScroll(e=!0){if(clearTimeout(this.autoscrollInterval.timeout),clearInterval(this.autoscrollInterval.interval),this.SMART_AUTOSCROLL&&this.isAllEarnedAchievesVisible())return void(this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(e)),3e4));let t=this.container,s=1;this.AUTOSCROLL&&(this.autoscrollInterval.interval=setInterval((()=>{t.scrollHeight-t.clientHeight<=10&&this.stopAutoScroll(),e?(t.scrollTop+=s,t.scrollTop+t.clientHeight>=t.scrollHeight&&(clearInterval(this.autoscrollInterval.interval),this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(!1)),5e3))):(t.scrollTop-=s,0===t.scrollTop&&(clearInterval(this.autoscrollInterval.interval),this.autoscrollInterval.timeout=setTimeout((()=>this.startAutoScroll(!0)),5e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScroll(){clearInterval(this.autoscrollInterval.interval),clearTimeout(this.autoscrollInterval.timeout)}isAllEarnedAchievesVisible(){let e=!0;return this.container.querySelectorAll(".earned").forEach((t=>{!this.isAchieveVisible(t)&&(e=!1)})),e}isAchieveVisible(e){let t=!0;const s=this.container.getBoundingClientRect().top,i=this.container.getBoundingClientRect().height,n=e.getBoundingClientRect().top-s,a=e.getBoundingClientRect().top-s+e.getBoundingClientRect().height;return(n<0||a>i)&&(t=!1),t}highlightCurrentLevel(e){[...this.container.querySelectorAll(".achiv-block")].forEach((t=>{if(t.classList.remove("highlight"),t.dataset.level==e&&t.classList.add("highlight"),!Number.isInteger(e)){const s=parseInt(e);t.dataset.level==s&&t.classList.add("highlight")}}))}applySorting(){UI.applySort({container:this.container,itemClassName:".achiv-block",sortMethod:this.SORT_METHOD,reverse:this.REVERSE_SORT})}applyFilter(){UI.applyFilter({container:this.container,itemClassName:".achiv-block",filterMethod:this.FILTER_METHOD,reverse:this.REVERSE_FILTER,isHide:this.HIDE_FILTERED}),this.fitSizeVertically()}doLoadAnimation(){const e=this.container,t=e.querySelectorAll(".achiv-block");const s=e=>new Promise((t=>setTimeout(t,e)));setTimeout((()=>function(){const i=e.scrollHeight;e.style.setProperty("--top-position",-i+"px");let n=0;[...t].reverse().forEach((async e=>{const t=100*n+200;!e.classList.contains("removed")&&n++;const i=t+1e3;e.style.setProperty("--load-delay",t+"ms"),e.classList.add("start-load-anim"),await s(50),e.classList.add("show-load-anim"),await s(i+500),e.classList.remove("show-load-anim","start-load-anim")}))}()),0)}close(){0===this.CLONE_NUMBER?p.buttons.achievements.click():UI.switchSectionVisibility(p.achievementsBlock[this.CLONE_NUMBER])}generateNewWidget({}){const e=document.createElement("section");return e.id=`${this.SECTION_NAME}`,e.classList.add("achivs","section"),e.style.width=m.ui.achievements_section?.width??"350px",e.style.height=m.ui.achievements_section?.height??"650px",e.innerHTML=`\n        <div class="header-container achievements-header_container">\n          <div class="header-icon achievements-icon">\n          </div>\n          <h2 class="widget-header-text achivs-header-text">Cheevos${0===this.CLONE_NUMBER?"":" ~"}</h2>\n        <button class="header-button header-icon tweak-icon tweak-button" onclick="ui.settings.openSettings(ui.achievementsBlock[${this.CLONE_NUMBER}].contextMenuItems)">\n               \n        </button>\n          <button class="header-button header-icon close-icon" onclick="ui.achievementsBlock[${this.CLONE_NUMBER}].close();">\n            \n          </button>\n        </div>\n        <ul class="achievements-container content-container"></ul>\n        <div class="resizer" id="achivs-resizer${this.CLONE_NUMBER}"></div>\n      `,e}}class Target{sectionCode="-target";get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}get contextMenuItems(){return[{label:p.lang.style,elements:[{type:"checkbox",name:"context-show-genre-badge",id:"context-show-genre-badge",label:"**Show genre badges**",checked:this.SHOW_GENRE,event:'onchange="ui.target.SHOW_GENRE = this.checked;"'},{type:"checkbox",name:"context-show-events-checkbox",id:"context-show-events-checkbox",label:p.lang.showEvents,checked:this.SHOW_EVENTS,event:'onchange="ui.target.SHOW_EVENTS = this.checked"'},{type:"checkbox",name:"context_autoscroll-target",id:"context_autoscroll-target",label:p.lang.autoscroll,checked:this.AUTOSCROLL,event:'onchange="ui.target.AUTOSCROLL = this.checked;"'},{type:"checkbox",name:"context-hide-unearned",id:"context-hide-unearned",label:p.lang.showOverlay,checked:this.SHOW_PREV_OVERLAY,event:'onchange="ui.target.SHOW_PREV_OVERLAY = this.checked"'},{type:"checkbox",name:"context-show-border",id:"context-show-border",label:p.lang.showImageBorder,checked:this.SHOW_PREV_BORDER,event:'onchange="ui.target.SHOW_PREV_BORDER = this.checked"'},{type:"checkbox",name:"context-show-difficult",id:"context-show-difficult",label:p.lang.showDifficult,checked:this.SHOW_DIFFICULT,event:'onchange="ui.target.SHOW_DIFFICULT = this.checked"'}]},{label:p.lang.elements,elements:[{label:p.lang.showHeader,type:"checkbox",name:"context_hide-target-header",id:"context_hide-target-header",checked:this.SHOW_HEADER,event:'onchange="ui.target.SHOW_HEADER = this.checked;"'},{label:p.lang.showBackground,type:"checkbox",name:"context_hide-target-bg",id:"context_hide-target-bg",checked:!this.HIDE_BG,event:'onchange="ui.target.HIDE_BG = !this.checked;"'}]},{label:p.lang.sort,elements:[{type:"radio",name:"context-sort",id:"context-sort_latest",label:p.lang.latest,checked:this.SORT_NAME===UI.sortMethods.latest,event:"onchange=\"ui.target.SORT_NAME = 'latest';\""},{type:"radio",name:"context-sort",id:"context-sort_rarest",label:p.lang.rarest,checked:this.SORT_NAME===UI.sortMethods.earnedCount,event:"onchange=\"ui.target.SORT_NAME = 'earnedCount';\""},{type:"radio",name:"context-sort",id:"context-sort_points",label:p.lang.points,checked:this.SORT_NAME===UI.sortMethods.points,event:"onchange=\"ui.target.SORT_NAME = 'points';\""},{type:"radio",name:"context-sort",id:"context-sort_retropoints",label:p.lang.retropoints,checked:this.SORT_NAME===UI.sortMethods.truepoints,event:"onchange=\"ui.target.SORT_NAME = 'truepoints';\""},{type:"radio",name:"context-sort",id:"context-sort_default",label:p.lang.default,checked:this.SORT_NAME===UI.sortMethods.default,event:"onchange=\"ui.target.SORT_NAME = 'default';\""},{type:"radio",name:"context-sort",id:"context-sort_level",label:p.lang.level,checked:this.SORT_NAME===UI.sortMethods.level,event:"onchange=\"ui.target.SORT_NAME = 'level';\""},{type:"radio",name:"context-sort",id:"context-sort_dont-sort",label:p.lang.disable,checked:this.SORT_NAME===UI.sortMethods.disable,event:"onchange=\"ui.target.SORT_NAME = 'disable';\""},{type:"checkbox",name:"context-reverse-sort",id:"context-reverse-sort",label:p.lang.reverse,checked:-1==this.REVERSE_SORT,event:'onchange="ui.target.REVERSE_SORT = this.checked"'}]},{label:p.lang.filter,elements:[{type:"radio",name:"context-filter",id:"context_filter-progression",label:p.lang.progression,checked:this.FILTER_NAME===UI.filterMethods.progression,event:"onchange=\"ui.target.FILTER_NAME = 'progression';\""},{type:"radio",name:"context-filter",id:"context_filter-missable",label:p.lang.missable,checked:this.FILTER_NAME===UI.filterMethods.missable,event:"onchange=\"ui.target.FILTER_NAME = 'missable';\""},{type:"radio",name:"context-filter",id:"context_filter-earned",label:p.lang.earned,checked:this.FILTER_NAME===UI.filterMethods.earned,event:"onchange=\"ui.target.FILTER_NAME = 'earned';\""},{type:"radio",name:"context-filter",id:"context_filter-all",label:p.lang.all,checked:this.FILTER_NAME===UI.filterMethods.all,event:"onchange=\"ui.target.FILTER_NAME = 'all';\""},{type:"checkbox",name:"context-reverse-filter",id:"context-reverse-filter",label:p.lang.reverse,checked:this.REVERSE_FILTER,event:'onchange="ui.target.REVERSE_FILTER = this.checked;"'},{type:"checkbox",name:"context-hide-filtered",id:"context-hide-filtered",label:p.lang.hideFiltered,checked:this.HIDE_FILTERED,event:'onchange="ui.target.HIDE_FILTERED = this.checked;"'}]},{label:p.lang.level,elements:[{type:"checkbox",name:"context-show-level",id:"context-show-level",label:p.lang.showLevel,checked:this.SHOW_LEVEL,event:'onchange="ui.target.SHOW_LEVEL = this.checked"'},{type:"checkbox",name:"context-hide-passed-levels",id:"context-hide-passed-levels",label:p.lang.hidePassedLevels,checked:this.HIDE_PASSED_LEVELS,event:'onchange="ui.target.HIDE_PASSED_LEVELS = this.checked;"'},{type:"checkbox",name:"context-highlight-passed",id:"context-highlight-passed",label:p.lang.highLightPassedLevels,checked:this.HIGHLIGHT_PASSED_LEVELS,event:'onchange="ui.target.HIGHLIGHT_PASSED_LEVELS = this.checked;"'}]},{label:p.lang.data,elements:[{type:"button",name:"context-fill",id:"context-fill",label:p.lang.fillAll,event:'onclick="ui.target.fillItems()"'},{type:"checkbox",name:"context-autofill",id:"context-autofill",label:p.lang.autofill,checked:this.AUTOFILL,event:'onchange="ui.target.AUTOFILL = this.checked;"'},{type:"button",name:"context-clear-all",id:"context-clear-all",label:p.lang.clearAll,event:'onclick="ui.target.clearAllAchivements();"'},{type:"checkbox",name:"context-autoclear",id:"context-autoclear",label:p.lang.autoclearEarned,checked:this.AUTOCLEAR,event:'onchange="ui.target.AUTOCLEAR = this.checked;"'},{prefix:p.lang.clearDelay,postfix:"sec",type:"input-number",name:"context-autoclear-delay",id:"context-autoclear-delay",label:p.lang.clearDelay,value:this.AUTOCLEAR_DELAY,event:'onchange="ui.target.AUTOCLEAR_DELAY = this.value;"'}]}]}get SHOW_HEADER(){return m?.ui.target_section?.showHeader??!0}set SHOW_HEADER(e){m.ui.target_section.showHeader=e,m.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get HIDE_BG(){return m?.ui.target_section?.hideBg??!1}set HIDE_BG(e){m.ui.target_section.hideBg=e,m.writeConfiguration(),this.section.classList.toggle("hide-bg",this.HIDE_BG)}set SORT_NAME(e){m._cfg.settings.sortTargetBy=e,m.writeConfiguration(),this.applySort()}get SORT_NAME(){return m._cfg.settings.sortTargetBy||UI.sortMethods.default}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}get REVERSE_SORT(){return m._cfg.settings.reverseSortTarget||1}set REVERSE_SORT(e){m._cfg.settings.reverseSortTarget=e?-1:1,m.writeConfiguration(),this.applySort()}get FILTER_NAME(){return m._cfg.settings.filterTargetBy||UI.filterMethods.all}set FILTER_NAME(e){m._cfg.settings.filterTargetBy=e,m.writeConfiguration(),this.applyFilter()}get FILTER_METHOD(){return UI.filterBy[this.FILTER_NAME]}get REVERSE_FILTER(){return m._cfg.settings.reverseFilterTarget??!1}set REVERSE_FILTER(e){m._cfg.settings.reverseFilterTarget=e,m.writeConfiguration(),this.applyFilter()}get HIDE_FILTERED(){return m._cfg.settings.hideFilteredTarget??!1}set HIDE_FILTERED(e){m._cfg.settings.hideFilteredTarget=e,m.writeConfiguration(),this.applyFilter(),this.filterByGenre(this.genreFilter,!0)}get AUTOCLEAR(){return m._cfg.settings.autoClearTarget??!1}set AUTOCLEAR(e){m._cfg.settings.autoClearTarget=e,m.writeConfiguration()}get AUTOFILL(){return m._cfg.settings.autoFillTarget??!0}set AUTOFILL(e){m._cfg.settings.autoFillTarget=e,m.writeConfiguration()}get AUTOCLEAR_DELAY(){return Number(m._cfg.settings.autoClearTargetTime??5)}set AUTOCLEAR_DELAY(e){m._cfg.settings.autoClearTargetTime=e>=0?e:0,m.writeConfiguration()}get AUTOSCROLL(){return m?.ui?.target_section?.autoscroll??!1}set AUTOSCROLL(e){m.ui.target_section.autoscroll=e,m.writeConfiguration(),e?this.startAutoScroll():this.stopAutoScroll()}get SHOW_PREV_BORDER(){return m?.ui?.target_section?.showPrevBorder??!0}set SHOW_PREV_BORDER(e){m.ui.target_section.showPrevBorder=e,m.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("border",e)))}get SHOW_PREV_OVERLAY(){return m?.ui?.target_section?.showPrevOverlay??!0}set SHOW_PREV_OVERLAY(e){m.ui.target_section.showPrevOverlay=e,m.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("overlay",e)))}get SHOW_DIFFICULT(){return m?.ui?.target_section?.showDifficult??!0}set SHOW_DIFFICULT(e){m.ui.target_section.showDifficult=e,m.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("show-difficult",e)))}get SHOW_LEVEL(){return m?.ui?.target_section?.showLevel??!0}set SHOW_LEVEL(e){m.ui.target_section.showLevel=e,m.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("show-level",e)))}get SHOW_GENRE(){return m?.ui?.target_section?.showGenre??!0}set SHOW_GENRE(e){m.ui.target_section.showGenre=e,m.writeConfiguration(),this.container.querySelectorAll(".target-achiv").forEach((t=>t.classList.toggle("show-genre",e)))}get HIDE_PASSED_LEVELS(){return m?.ui?.target_section?.hidePassedLevels??!0}set HIDE_PASSED_LEVELS(e){m.ui.target_section.hidePassedLevels=e,m.writeConfiguration(),this.section.classList.toggle("hide-passed",e)}get HIGHLIGHT_PASSED_LEVELS(){return m?.ui?.target_section?.highlightPassedLevels??!0}set HIGHLIGHT_PASSED_LEVELS(e){m.ui.target_section.highlightPassedLevels=e,m.writeConfiguration(),this.section.classList.toggle("highlight-passed",e)}get SHOW_EVENTS(){return m.ui.target_section?.showEvents??!0}set SHOW_EVENTS(e){m.ui.target_section.showEvents=e,m.writeConfiguration(),this.section.classList.toggle("show-events",e)}constructor(){this.initializeElements(),this.addEvents(),this.setValues(),this.showAotwEvent({cheevo:m.aotw})}initializeElements(){this.section=document.querySelector("#target_section"),this.widgetIcon=document.querySelector("#open-target-button"),this.header=document.querySelector(".target-header_container"),this.container=document.querySelector(".target-container"),this.searchInput=this.section.querySelector("#target__searchbar"),this.resizer=document.querySelector("#target-resizer")}addEvents(){this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.container.addEventListener("mousedown",(e=>e.stopPropagation())),this.section.addEventListener("contextmenu",(e=>{p.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})}));var e,t;e=this.container,t=e=>{p.target.addAchieveToTarget(e),this.section.querySelector(".achiv-block")?.remove()},new Sortable(e,{group:{name:"cheevos",pull:!1},animation:100,chosenClass:"dragged",onAdd:function(e){const s=e.item.dataset.achivId;t&&t(s)}}),this.searchInput?.addEventListener("change",this.searchHandler)}searchHandler(e){e.stopPropagation();[...p.target.container.querySelectorAll(".target-achiv")].forEach((e=>{const t=e.dataset.achivId,s=e.querySelector(".achiv-description"),i=e.querySelector(".achiv-name a");s&&(s.innerText=p.ACHIEVEMENTS[t]?.Description),i&&(i.innerText=p.ACHIEVEMENTS[t]?.Title)})),p.target.applySort();const t=e.target.value;if(t){(e=>{const t=new RegExp(`(${e})`,"gi");[...p.target.container.querySelectorAll(".target-achiv")].reverse().forEach((e=>{const s=e.querySelector(".achiv-description"),i=e.querySelector(".achiv-name a");i.innerText.match(t)&&(p.target.moveToTop(s.closest(".target-achiv")),i.innerHTML=i.innerHTML.replace(t,(e=>`<span class="badge highlight-badge">${e}</span>`))),s.innerText.match(t)&&(p.target.moveToTop(s.closest(".target-achiv")),s.innerHTML=s.innerHTML.replace(t,(e=>`<span class="badge highlight-badge">${e}</span>`)))}))})(t);const e=document.querySelector(".badge.highlight-badge");e&&e.scrollIntoView({behavior:"smooth",block:"center"})}}setValues(){UI.applyPosition({widget:this}),this.section.classList.toggle("show-events",this.SHOW_EVENTS),this.section.classList.toggle("compact",!this.SHOW_HEADER),this.section.classList.toggle("hide-bg",this.HIDE_BG),this.section.classList.toggle("hide-passed",this.HIDE_PASSED_LEVELS),this.section.classList.toggle("highlight-passed",this.HIGHLIGHT_PASSED_LEVELS),this.startAutoScroll()}gameChangeEvent(){this.genreFilter="",this.AUTOCLEAR&&this.clearEarned(),this.AUTOFILL&&this.fillItems()}updateEarnedAchieves({earnedAchievementIDs:e}){e.forEach((e=>{const t=this.container.querySelector(`.target-achiv[data-achiv-id='${e}']`);p.ACHIEVEMENTS[e].isHardcoreEarned&&t?(t.classList.add("earned","hardcore","show-hard-anim"),t.dataset.DateEarnedHardcore=p.ACHIEVEMENTS[e].DateEarnedHardcore):t?.classList.add("earned","show-hard-anim"),setTimeout((()=>t?.classList.remove("show-hard-anim")),5e3)})),this.applyFilter(),this.applySort(),this.genreFilter&&this.filterByGenre(this.genreFilter,!0)}autoscrollInterval;startAutoScroll(e=!0){this.stopAutoScroll();let t=this.container,s=1;this.AUTOSCROLL&&(this.autoscrollInterval=setInterval((()=>{t.scrollHeight-t.clientHeight<=10&&this.stopAutoScroll(),e?(t.scrollTop+=s,t.scrollTop+t.clientHeight>=t.scrollHeight&&(this.stopAutoScroll(),setTimeout((()=>this.startAutoScroll(!1)),2e3))):(t.scrollTop-=s,0===t.scrollTop&&(this.stopAutoScroll(),setTimeout((()=>this.startAutoScroll(!0)),2e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScroll(){clearInterval(this.autoscrollInterval)}isAchievementInTargetSection({ID:e,targetContainer:t=this.container}){return[...t.querySelectorAll(".target-achiv")].filter((t=>t.dataset.achivId==e)).length>0}addAchieveToTarget(e){if(this.isAchievementInTargetSection({ID:e}))return;const t=p.ACHIEVEMENTS[e],s=document.createElement("li");async function i(e){n();const s=UI.generateAchievementPopup(t);p.app.appendChild(s),function(e,t){const s=t.x,i=t.y;e.style.left=s+50+"px",e.style.top=i+"px";let{left:n,right:a,top:o,bottom:r}=e.getBoundingClientRect();n<0&&e.classList.remove("left-side"),a>window.innerWidth&&e.classList.add("left-side"),o<0?e.classList.remove("top-side"):r>window.innerHeight&&e.classList.add("top-side")}(s,e),setTimeout((()=>s.classList.add("visible")),333)}async function n(){document.querySelectorAll(".popup").forEach((e=>e.remove()))}(()=>{s.classList.add("target-achiv"),s.classList.toggle("border",this.SHOW_PREV_BORDER),s.classList.toggle("overlay",this.SHOW_PREV_OVERLAY),s.classList.toggle("show-difficult",this.SHOW_DIFFICULT),s.classList.toggle("show-level",this.SHOW_LEVEL),s.classList.toggle("show-genre",this.SHOW_GENRE),s.classList.toggle("earned",t.isEarned),s.classList.toggle("hardcore",t.isHardcoreEarned)})(),s.dataset.type=t.type,s.dataset.Points=t.Points,s.dataset.TrueRatio=t.TrueRatio,s.dataset.DisplayOrder=t.DisplayOrder,t.DateEarnedHardcore&&(s.dataset.DateEarnedHardcore=t.DateEarnedHardcore),t.DateEarned&&(s.dataset.DateEarned=t.DateEarned),s.dataset.NumAwardedHardcore=t.NumAwardedHardcore,s.dataset.achivId=e,t.level&&(s.dataset.level=t.level),s.innerHTML=`\n        <button class="delete-from-target" title="remove from target" onclick="ui.target.deleteFromTarget(this)">\n          <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">\n            <path d="M280-440h400v-80H280v80ZM480-80q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/>\n          </svg>\n        </button>\n        <div class="prev">\n            <img\n              class="prev-img"\n              src="${t.prevSrc}"\n              alt="${t.Title} icon"\n            />\n          </div>\n          <div class="target-achiv-details">\n            <h3 class="achiv-name">\n              ${t.zone?`<p class="target-level-badge badge badge-bold badge_green">${t.zone} Area</p>`:""}${!t.zone&&t.level?`<p class="target-level-badge badge badge-bold badge_green">LVL ${t.level?.toString()?.replace(".","-")}</p>`:""}\n              ${t.genres?.map((e=>`\n                <p class="target-genre-badge badge badge-bold badge_gold badge-button" onclick="ui.target.filterByGenre('${e}')">\n                  ${e}\n                </p>`)).join("\n")}\n            \n              <a target="_blanc" href="https://retroachievements.org/achievement/${e}">\n                ${t.Title}\n              </a>\n              </h3>\n            <p class="achiv-description">${t.Description}</p>\n            <div class="target-other-descriptions">    \n              \x3c!--<button class="game-description_link" onclick="ui.target.showComments('${t.ID}')"> \n                <i class="description-icon link_icon chat-icon"></i>\n              </button> --\x3e\n              <i class=" description-icon ${t.type??"none"}" title="achievement type"></i> \n            \n              <p class="target-description-text" title="points"><i class="description-icon  points-icon"></i>${t.Points}\n              </p>\n              \n              <p class="target-description-text" title="retropoints"><i class="description-icon  retropoints-icon"></i>${t.TrueRatio}\n              </p>\n              \n              <p class="target-description-text" title="earned by"><i class="description-icon  trending-icon"></i>\n              ${t.rateEarnedHardcore}\n              </p>\n               <p class="target-description-text" title="true ratio">\n                <i class="description-icon  ${t.retroRatio>13?"difficult-badge__hell":""}  rarity-icon"></i>\n                ${t.retroRatio}\n              </p>\n              <p class="description-icon difficult-icon difficult-badge__${t.difficulty}"></p>\n              \n            </div>             \n          </div>\n        `,this.container.appendChild(s),s.addEventListener("mouseover",i),s.addEventListener("mouseleave",n),s.addEventListener("mousedown",(e=>{e.stopPropagation()})),this.isDynamicAdding||(this.applyFilter(),this.applySort()),this.delayedRemove()}moveToTop(e){1==this.REVERSE_SORT?this.container.prepend(e):this.container.append(e),this.applyFilter()}applyFilter(){UI.applyFilter({container:this.container,itemClassName:".target-achiv",filterMethod:this.FILTER_METHOD,reverse:this.REVERSE_FILTER,isHide:this.HIDE_FILTERED})}filterByGenre(e,t=!1){if((()=>{this.container.querySelectorAll(".hidden").forEach((e=>e.classList.remove("hidden")))})(),!t&&this.genreFilter===e)return this.genreFilter="",void this.applyFilter();this.genreFilter=e,UI.applyFilter({container:this.container,itemClassName:".target-achiv",filterMethod:t=>p.ACHIEVEMENTS[t.achivId].genres.includes(e),reverse:!1,isHide:this.HIDE_FILTERED})}applySort(){UI.applySort({container:this.container,itemClassName:".target-achiv",sortMethod:this.SORT_METHOD,reverse:this.REVERSE_SORT})}highlightCurrentLevel(e){[...this.container.querySelectorAll(".target-achiv")].forEach((t=>{t.classList.remove("highlight"),t.classList.remove("passed");const s=t.dataset.level;if(s==e&&t.classList.add("highlight"),!Number.isInteger(e)){const s=parseInt(e);t.dataset.level==s&&t.classList.add("highlight")}Number.isInteger(+s)?s<parseInt(e)&&t.classList.add("passed"):s<e&&t.classList.add("passed")}))}deleteFromTarget(e){const t=e.closest(".target-achiv");t.classList.add("removing"),setTimeout((()=>t.remove()),0)}clearEarned(){this.container.querySelectorAll(".target-achiv").forEach((e=>{e.classList.contains("hardcore")&&e.remove()}))}clearAllAchivements(){this.container.innerHTML=""}delayedRemove(){this.AUTOCLEAR&&this.container.querySelectorAll(".earned").forEach((e=>{setTimeout((()=>e.remove()),1e3*this.AUTOCLEAR_DELAY)}))}fillItems(){this.isDynamicAdding=!0,this.clearAllAchivements(),Object.keys(p.ACHIEVEMENTS).forEach((e=>{this.addAchieveToTarget(e)})),this.applyFilter(),this.applySort(),this.isDynamicAdding=!1,m.aotw&&this.container.querySelector(`.target-achiv[data-achiv-id='${m.aotw?.ID}']`)?.classList.add("target__aotw")}async showComments(e){const t=this.section.querySelector(".target-comments__container"),s=t.querySelector(".target-comments__list");s.innerHTML="",t.classList.remove("hidden"),t.classList.add("loading"),await r(1e3);const i=[{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"ff daf dsafdsmfkm afajdjfjdjf jfaj djfas djfsdj djsfijdj fjds fjsadjjdj j da jsd"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"},{User:"taras240",Submitted:"12-01-2023 12:23+00:00",CommentText:"fasjkd sfjdsfkds dfjkds jf jfjdsifjds fj afsjf"}];t.classList.remove("loading"),i.length>0?s.innerHTML=`\n        ${i.map((e=>`\n          <li class="target-comment">\n          <div class="target-comment__header">\n            <h3 class="target-comment__user-name">${e.User}</h3>\n            <div class="target-comment__date">${new Date(e.Submitted).toLocaleString()}</div>\n          </div>\n  \n          <div class="target-comment__comment">\n          ${e.CommentText}\n          </div>\n        </li>\n          `)).join("\n")}\n      `:t.classList.add("hidden")}showAotwEvent({cheevo:e}){if(!e||e.wasShown)return;this.section.querySelector(".target__aotw-container")?.remove(),this.container.querySelector(`.target-achiv[data-achiv-id='${e.ID}']`)?.classList.add("target__aotw");const t=document.createElement("div");t.classList.add("target__aotw-container","target__aotw","show-difficult","show-level"),t.innerHTML=`\n        <button class="description-icon close-icon target__hide-aotw" \n          onclick="ui.target.hideAotw()"></button>\n        <div class="prev">\n          <img class="prev-img" src="https://media.retroachievements.org${e.BadgeURL}" alt=" ">\n        </div>\n        <div class="target-achiv-details">\n          <h3 class="achiv-name">\n            <p class="badge badge-bold"> AotW Event </p>\n            <a target="_blanc" href="https://retroachievements.org/achievement/${e.ID}">\n              ${e.Title}\n            </a>\n            in\n            <a target="_blanc" href="https://retroachievements.org/game/${e.GameID}">\n              ${e.GameTitle}\n            </a>\n          </h3>\n          <p class="achiv-description">${e.Description}</p>\n          <div class="target-other-descriptions">\n            <i class=" description-icon none" title="achievement type"></i>\n  \n            <p class="target-description-text" title="points"><i class="description-icon  points-icon"></i>\n              ${e.Points}\n            </p>\n  \n            <p class="target-description-text" title="retropoints"><i class="description-icon  retropoints-icon"></i>\n            ${e.TrueRatio}\n            </p>\n  \n            <p class="target-description-text" title="earned by"><i class="description-icon  trending-icon"></i>\n              ${(100*e.UnlocksHardcoreCount/e.TotalPlayers).toFixed(2)}%\n            </p>\n            <p class="target-description-text" title="true ratio">\n              <i class="description-icon    rarity-icon"></i>\n              ${(e.TrueRatio/e.Points).toFixed(2)}\n            </p>\n          </div>\n        </div>\n      `,this.section.querySelector(".target__aotw-container")?.remove(),this.section.insertBefore(t,this.container)}hideAotw(){this.section.querySelector(".target__aotw-container")?.remove(),m.aotw={...m?.aotw,wasShown:!0}}close(){p.buttons.target.click()}}class StatusPanel{get contextMenuItems(){return[{label:p.lang.showStats,elements:[{prefix:p.lang.duration,postfix:p.lang.sec,type:"input-number",id:"context-menu_stats-duration",label:p.lang.duration,value:this.STATS_DURATION,event:'onchange="ui.statusPanel.STATS_DURATION = this.value;"',onChange:"ui.statusPanel.STATS_DURATION = this.value;"},{type:"checkbox",name:"context_show-points",id:"context_show-points",label:p.lang.points,checked:this.SHOW_HP,event:'onchange="ui.statusPanel.SHOW_HP = this.checked;"'},{type:"checkbox",name:"context_show-retropoints",id:"context_show-retropoints",label:p.lang.retropoints,checked:this.SHOW_RP,event:'onchange="ui.statusPanel.SHOW_RP = this.checked;"'},{type:"checkbox",name:"context_show-progression",id:"context_show-progression",label:p.lang.progression,checked:this.SHOW_PROGRESSION,event:'onchange="ui.statusPanel.SHOW_PROGRESSION = this.checked;"'},{type:"checkbox",name:"context_show-cheevos",id:"context_show-cheevos",label:p.lang.cheevos,checked:this.SHOW_CHEEVOS,event:'onchange="ui.statusPanel.SHOW_CHEEVOS = this.checked;"'},{type:"checkbox",name:"context_show-softpoints",id:"context_show-softpoints",label:p.lang.softpoints,checked:this.SHOW_SP,event:'onchange="ui.statusPanel.SHOW_SP = this.checked;"'},{type:"radio",name:"context_game-time",id:"context_show-playTime",label:p.lang.gameTime,checked:"playTime"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'playTime';\""},{type:"radio",name:"context_game-time",id:"context_show-sessionTime",label:p.lang.sessionGameTime,checked:"sessionTime"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'sessionTime';\""},{type:"radio",name:"context_game-time",id:"context_show-timer",label:p.lang.timer,checked:"timer"==this.SHOW_TIME,event:"onclick=\"ui.statusPanel.SHOW_TIME = 'timer';\""},{prefix:p.lang.timer,postfix:p.lang.min,type:"input-number",id:"context-menu_stats-timer-duration",label:p.lang.timer,value:~~(this.TIMER_TIME/60*100)/100,event:'onchange="ui.statusPanel.TIMER_TIME = this.value;"',onChange:"ui.statusPanel.TIMER_TIME = this.value;"}]},{label:p.lang.progressbar,elements:[{type:"radio",name:"context_show-progressbar",id:"context_progressbar-auto",label:p.lang.auto,checked:"auto"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"auto\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-achives",label:p.lang.cheevos,checked:"achives"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"achives\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-progression",label:p.lang.progression,checked:"progression"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"progression\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-points",label:p.lang.points,checked:"points"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"points\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-retropoints",label:p.lang.retropoints,checked:"retropoints"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"retropoints\"'"},{type:"radio",name:"context_show-progressbar",id:"context_progressbar-softpoins",label:p.lang.softpoints,checked:"softpoints"==this.PROGRESSBAR_PROPERTY_NAME,event:"onchange = 'ui.statusPanel.PROGRESSBAR_PROPERTY_NAME = \"softpoints\"'"}]},{label:p.lang.elements,elements:[{type:"radio",name:"context_description-variant-radio",id:"context_show-progression-description",label:"Show Progression",checked:"progression"===this.STATUS_DESCRIPTION_VARIANT,event:"onchange=\"ui.statusPanel.STATUS_DESCRIPTION_VARIANT = 'progression';\""},{type:"radio",name:"context_description-variant-radio",id:"context_show-game-info-description",label:"Show GameInfo",checked:"gameInfo"===this.STATUS_DESCRIPTION_VARIANT,event:"onchange=\"ui.statusPanel.STATUS_DESCRIPTION_VARIANT = 'gameInfo';\""},{type:"checkbox",name:"context_show-platform",id:"context_show-platform",label:p.lang.platform,checked:this.SHOW_PLATFORM,event:'onchange="ui.statusPanel.SHOW_PLATFORM = this.checked;"'},{type:"checkbox",name:"context_show-rich-presence",id:"context_show-rich-presence",label:p.lang.richPresence,checked:this.SHOW_RICH_PRESENCE,event:'onchange="ui.statusPanel.SHOW_RICH_PRESENCE = this.checked;"'},{type:"radio",name:"context_show-game-ratio",id:"context_show-game-ratio",label:p.lang.showRetroRatio,checked:this.SHOW_GAME_RATIO,event:'onclick="ui.statusPanel.SHOW_GAME_RATIO = this.checked;"'},{type:"radio",name:"context_show-game-ratio",id:"context_show-mastery-rate",label:p.lang.showMasteryRate,checked:this.SHOW_MASTERY_RATE,event:'onclick="ui.statusPanel.SHOW_MASTERY_RATE = this.checked;"'}]},{label:p.lang.alerts,elements:[{type:"checkbox",name:"context_show-new-cheevos",id:"context_show-new-cheevos",label:p.lang.showAlerts,checked:this.SHOW_NEW_ACHIV,event:'onchange="ui.statusPanel.SHOW_NEW_ACHIV = this.checked;"'},{prefix:p.lang.duration,postfix:p.lang.sec,type:"input-number",id:"context-menu_stats-earned-duration",label:p.lang.duration,value:this.NEW_ACHIV_DURATION,event:'onchange="ui.statusPanel.NEW_ACHIV_DURATION = this.value;"'}]},{type:"checkbox",name:"context_show-update-blink",id:"context_show-update-blink",label:p.lang.showUpdateBlink,checked:this.BLINK_ON_UPDATE,event:'onchange="ui.statusPanel.BLINK_ON_UPDATE = this.checked;"'}]}get BLINK_ON_UPDATE(){return m.ui.update_section?.showUpdateBlink??!0}set BLINK_ON_UPDATE(e){m.ui.update_section.showUpdateBlink=e,m.writeConfiguration()}get SHOW_RP(){return m.ui.update_section?.showRP??!0}set SHOW_RP(e){m.ui.update_section.showRP=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_HP(){return m.ui.update_section?.showHP??!0}set SHOW_HP(e){m.ui.update_section.showHP=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_SP(){return m.ui.update_section?.showSP??!0}set SHOW_SP(e){m.ui.update_section.showSP=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_CHEEVOS(){return m.ui.update_section?.showCheevos??!0}set SHOW_CHEEVOS(e){m.ui.update_section.showCheevos=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_PROGRESSION(){return m.ui.update_section?.showProgression??!1}set SHOW_PROGRESSION(e){m.ui.update_section.showProgression=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_PLATFORM(){return m.ui.update_section?.showPlatform??!0}set SHOW_PLATFORM(e){m.ui.update_section.showPlatform=e,m.writeConfiguration(),this.setValues()}get SHOW_RICH_PRESENCE(){return m.ui.update_section?.showRichPresence??!0}set SHOW_RICH_PRESENCE(e){m.ui.update_section.showRichPresence=e,m.writeConfiguration(),this.setValues()}get STATS_DURATION(){const e=m.ui.update_section?.statsDuration??30;return e<5?5:e}set STATS_DURATION(e){m.ui.update_section.statsDuration=e,m.writeConfiguration(),this.startStatsAnimation()}get SHOW_NEW_ACHIV(){return m.ui.update_section?.showNewAchiv??!0}set SHOW_NEW_ACHIV(e){m.ui.update_section.showNewAchiv=e,m.writeConfiguration()}get CHANGE_PROGRESS_AUTO(){return"auto"==m.ui.update_section?.progressBarPropertyName}get PROGRESSBAR_PROPERTY_NAME(){return m.ui.update_section?.progressBarPropertyName??"auto"}set PROGRESSBAR_PROPERTY_NAME(e){m.ui.update_section.progressBarPropertyName=e,m.writeConfiguration(),this.setProgressBarValue()}get NEW_ACHIV_DURATION(){const e=m.ui.update_section?.newAchivDuration??15;return e<5?5:e}set NEW_ACHIV_DURATION(e){m.ui.update_section.newAchivDuration=e,m.writeConfiguration()}get AUTOSCROLL_RICHPRESENCE(){return!0}get SHOW_GAME_PREV_BORDER(){return!1}set SHOW_GAME_PREV_BORDER(e){m.ui.update_section.showGamePrevBorder=e,m.writeConfiguration(),this.container.classList.toggle("game-border",e)}get SHOW_GAME_RATIO(){return m?.ui?.update_section?.showGameRatio??!0}set SHOW_GAME_RATIO(e){this.SHOW_GAME_RATIO&&e?(e=!1,document.getElementById("context_show-game-ratio").checked=!1):m.ui.update_section.showMasteryRate=!e,m.ui.update_section.showGameRatio=e,m.writeConfiguration(),this.setValues()}get SHOW_MASTERY_RATE(){return m?.ui?.update_section?.showMasteryRate??!1}set SHOW_MASTERY_RATE(e){this.SHOW_MASTERY_RATE&&e?(e=!1,document.getElementById("context_show-mastery-rate").checked=!1):m.ui.update_section.showGameRatio=!e,m.ui.update_section.showMasteryRate=e,m.writeConfiguration(),this.setValues()}get SHOW_TIME(){return m.ui.update_section?.time??"playTime"}set SHOW_TIME(e){e===m.ui.update_section.time&&(document.querySelector(`#context_show-${e}`).checked=!1,e=!1),m.ui.update_section.time=e,m.writeConfiguration(),this.startStatsAnimation()}get TIMER_TIME(){return m.ui.update_section?.timerTime??2}set TIMER_TIME(e){e<1&&(e=1),e>1440&&(e=1440),m.ui.update_section.timerTime=60*e,m.writeConfiguration(),this.timerTime=this.TIMER_TIME,this.startStatsAnimation()}get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}get STATUS_DESCRIPTION_VARIANT(){return m?.ui?.update_section?.statusDescriptionVariant??"gameInfo"}set STATUS_DESCRIPTION_VARIANT(e){const t={gameInfo:"show-game-info",progression:"show-game-progress"};m.ui.update_section.statusDescriptionVariant=e,m.writeConfiguration(),Object.values(t).forEach((e=>this.section.classList.remove(e))),this.section.classList.add(t[e])}stats={gameTitle:p?.GAME_DATA?.Title??"Title",gamePlatform:p?.GAME_DATA?.ConsoleName??"Platform",richPresence:"Waiting...",imageSrc:`https://media.retroachievements.org${p?.GAME_DATA?.ImageIcon}`,totalPoints:p?.GAME_DATA?.points_total??0,totalAchievesCount:p?.GAME_DATA?.NumAchievements??0,totalSoftpoints:0,earnedPoints:0,earnedAchievesCount:0,totalRetropoints:p?.GAME_DATA?.TotalRetropoints,earnedRetropoints:0,earnedSoftpoints:0};awards={award:"",progressionAward:""};gameTime=0;sessionGameTime=0;timerTime=this.TIMER_TIME;gameTimeInterval;getActiveTime=()=>{let e=0;switch(this.SHOW_TIME){case"playTime":e=this.gameTime;break;case"sessionTime":e=this.sessionGameTime;break;case"timer":e=this.timerTime}return this.formatTime(e)};get statusTextValues(){const e={};return this.SHOW_HP&&(e.progressionInPointsStats=`${this.stats.earnedPoints}/${this.stats.totalPoints} HP`),this.SHOW_CHEEVOS&&(e.cheevosStats=`${this.stats.earnedAchievesCount}/${this.stats.totalAchievesCount} CHEEVOS`),this.SHOW_PROGRESSION&&(e.cheevosStats=`${this.stats.earnedProgressionCount}/${this.stats.totalProgressionCount} STEPS`),this.SHOW_RP&&(e.retroPointsStats=`${this.stats.earnedRetropoints}/${this.stats.totalRetropoints} RP`),this.SHOW_SP&&(e.softPointsStats=`${this.stats.earnedSoftpoints}/${this.stats.totalPoints-this.stats.earnedPoints} SP`),this.SHOW_TIME&&(e.gameTime=this.getActiveTime()),e}constructor(){!m.ui.update_section&&(m.ui.update_section={}),!m.ui.update_section.playTime&&(m.ui.update_section.playTime={}),this.initializeElements(),this.addEvents(),this.startAutoScrollRP(),UI.applyPosition({widget:this}),setTimeout((()=>this.fitFontSize()),500)}initializeElements(){this.section=document.querySelector("#update-section"),this.widgetIcon=document.querySelector("#open-status-button"),this.container=this.section.querySelector(".status__container"),this.guideLink=this.section.querySelector("#status-game-guide"),this.gamePreview=this.section.querySelector("#game-preview"),this.retroRatioElement=this.section.querySelector(".status__retro-ratio"),this.textBlock=this.section.querySelector("#update-text-block"),this.gameTitle=this.section.querySelector("#game-title"),this.gamePlatform=this.section.querySelector("#game-platform"),this.richPresence=this.section.querySelector("#rich-presence"),this.watchButton=this.section.querySelector("#watching-button"),this.progresBar=this.section.querySelector("#status-progress-bar"),this.progresBarDelta=this.section.querySelector("#status_progress-bar-delta"),this.progressStatusText=this.section.querySelector("#status-progress-text"),this.resizer=this.section.querySelector("#status-resizer"),this.backSide={container:this.section.querySelector(".status__back-side"),imgElement:this.section.querySelector("#update_achiv-preview"),achivTitleElement:this.section.querySelector("#update_achiv-title"),earnedPoints:this.section.querySelector("#update_achiv-earned-points")},this.progressionElement=this.section.querySelector("#status_progression")}addEvents(){this.watchButton.addEventListener("mousedown",(e=>{e.stopPropagation()})),this.watchButton.addEventListener("click",(e=>{e.stopPropagation();const t=()=>{m.ui.update_section.playTime[m.gameID]=this.gameTime,m.writeConfiguration()};this.watchButton.classList.contains("active")?(p.stopWatching(),t(),clearInterval(this.gameTimeInterval)):(p.startWatching(),this.gameTimeInterval=setInterval((()=>{if(!p.IS_ONLINE)return;this.gameTime++,this.sessionGameTime++,this.timerTime--,"timer"===this.SHOW_TIME&&this.timerTime<0&&this.section.classList.add("timer-timeout"),this.gameTime%60==0&&t();const e=this.getActiveTime();this.section.querySelector(".gameTime")&&(this.section.querySelector(".gameTime").innerText=e)}),1e3))})),this.textBlock.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{p.showContextmenu({event:e,menuItems:this.contextMenuItems})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section,callback:()=>this.fitFontSize(!0)})}))}setValues(){this.gamePlatform.classList.toggle("hidden",!this.SHOW_PLATFORM),this.richPresence.classList.toggle("hidden",!this.SHOW_RICH_PRESENCE);const e=p.GAME_DATA.retroRatio,t=p.GAME_DATA.masteryRate;this.retroRatioElement.innerText=this.SHOW_MASTERY_RATE?t:e,this.retroRatioElement.className=`status__retro-ratio difficult-badge__${p.GAME_DATA.gameDifficulty}`;const s=~~(100*(this.stats.earnedPoints/p.GAME_DATA.points_total||0))+"%",i=~~(100*(this.stats.earnedAchievesCount/p?.GAME_DATA?.NumAchievements))+"%";this.setProgressBarValue(),this.progressStatusText.innerText="",this.startStatsAnimation(),p.gameCard.updateGameInfoElement({name:"Completion",value:`${s} of points [${i}]`}),p.gameCard.section.classList.toggle("mastered",0!=this.stats.earnedPoints&&this.stats.totalPoints===this.stats.earnedPoints),this.container.classList.toggle("game-border",this.SHOW_GAME_PREV_BORDER),this.container.classList.toggle("show-game-ratio",this.SHOW_GAME_RATIO||this.SHOW_MASTERY_RATE),this.STATUS_DESCRIPTION_VARIANT=this.STATUS_DESCRIPTION_VARIANT}setProgressBarValue(){let e=0;switch(this.PROGRESSBAR_PROPERTY_NAME){case"points":e=this.stats.earnedPoints/p.GAME_DATA.points_total;break;case"retropoints":e=this.stats.earnedRetropoints/p.GAME_DATA.TotalRetropoints;break;case"achives":e=this.stats.earnedAchievesCount/p?.GAME_DATA?.NumAchievements;break;case"progression":e=this.stats.earnedProgressionCount/p?.GAME_DATA?.progressionSteps;break;case"softpoints":e=this.stats.earnedSoftpoints/this.stats.totalSoftPoints}this.section.style.setProperty("--progress-points",100*(e||0)+"%")}generateProgressionBlock(){let e="",t="";Object.values(p.ACHIEVEMENTS).filter((e=>UI.filterBy.progression(e))).sort(((e,t)=>UI.sortBy.default(e,t))).forEach((s=>{"progression"===s.type?e+=`\n        <div class="progres-step ${s.isHardcoreEarned?"hardcore":""} ${s.isEarned?"softcore":""}"  data-id="${s.ID}">\n          <div class="progres-point ${s.isHardcoreEarned?"hardcore":""} ${s.isEarned?"softcore":""}" data-id="${s.ID}"></div>\n        </div>\n      `:t+=`\n        <div class="progres-point win ${s.isHardcoreEarned?"hardcore":""} ${s.isEarned?"softcore":""}" data-id="${s.ID}"></div>\n      `}));const s=`\n         <div class="status__progres-description"></div>\n            <div class="status__progres-container">\n              ${e}\n              ${t?`<div class="progres-step__win">\n                ${t}`:""}\n              </div>\n          </div>\n      `;this.progressionElement.innerHTML=s,(()=>{this.progressionElement.querySelectorAll(".progres-point").forEach((e=>{const t=p.ACHIEVEMENTS[e?.dataset?.id],s=this.progressionElement.querySelector(".status__progres-description");e.addEventListener("mouseover",(function(){s.innerText=t.Description})),e.addEventListener("mouseleave",(()=>{this.updateProgressionBlock({})}))}))})(),this.updateProgressionBlock({})}updateProgressionBlock({earnedAchievementIDs:e=[]}){e.forEach((e=>{[...this.progressionElement.querySelectorAll(`[data-id="${e}"]`)].forEach((t=>{t.classList.toggle("hardcore",p.ACHIEVEMENTS[e].isHardcoreEarned),t.classList.toggle("softcore",p.ACHIEVEMENTS[e].isEarned)}))}));const t=this.progressionElement.querySelectorAll(".progres-point");t.forEach((e=>e.classList.remove("focus")));const s=this.progressionElement.querySelector(".progres-point:not(.hardcore)"),i=s?.dataset?.id;s?.classList.add("focus");const n=0===t?.length?"Progression is not awailable":i?p.ACHIEVEMENTS[i].Description:"You have passed the game";this.progressionElement.querySelector(".status__progres-description").innerText=n}highlightCurrentLevel(e){this.progressionElement.querySelectorAll(".progres-point").forEach((e=>e.classList.remove("current-level")));const t=Object.values(p.ACHIEVEMENTS)?.filter((e=>UI.filterBy.progression(e)))?.sort(((e,t)=>UI.sortBy.level(e,t)));let s=t.find((t=>t.level===e))||t.find((t=>t.level===~~e))||t.find((t=>t.level>~~e));s&&this.progressionElement.querySelectorAll(`.progres-point[data-id="${s?.ID}"]`).forEach((e=>e.classList.add("current-level")))}updateData(e=!1){this.stats={gameTitle:p?.GAME_DATA?.FixedTitle??"Title",gamePlatform:p?.GAME_DATA?.ConsoleName??"Platform",richPresence:"Waiting...",imageSrc:`https://media.retroachievements.org${p?.GAME_DATA?.ImageIcon}`,totalPoints:p?.GAME_DATA?.points_total??0,totalSoftPoints:p.GAME_DATA.points_total-p.GAME_DATA.earnedStats.soft.points,totalAchievesCount:p?.GAME_DATA?.NumAchievements??0,totalProgressionCount:p?.GAME_DATA?.progressionSteps,earnedPoints:p.GAME_DATA.earnedStats.hard.points,earnedAchievesCount:p.GAME_DATA.earnedStats.hard.count,earnedProgressionCount:p.GAME_DATA.earnedStats.soft.progressionCount,totalRetropoints:p?.GAME_DATA?.TotalRetropoints,earnedRetropoints:p.GAME_DATA.earnedStats.hard.retropoints,earnedSoftpoints:p.GAME_DATA.earnedStats.soft.points-p.GAME_DATA.earnedStats.hard.points},e&&(this.awards.award=p.GAME_DATA.award,this.awards.progressionAward=p.GAME_DATA.progressionAward),this.setValues()}gameChangeEvent(e=!1){e&&p.IS_WATCHING&&this.addAlertsToQuery([{type:"new-game",value:p.GAME_DATA}]),(()=>{const{ImageIcon:e,FixedTitle:t,ConsoleName:s,badges:i}=p.GAME_DATA,{gamePreview:n,gameTitle:a,gamePlatform:o}=this;n.setAttribute("src",`https://media.retroachievements.org${e}`),a.innerHTML=`${t||"Some game name"} ${c(i)} <span class="title-platform-badge">${c([s.split("/")[0]])}</span>`,a.setAttribute("href","https://retroachievements.org/game/"+m.gameID),setTimeout((()=>this.startAutoScrollElement(a,!0,1e4)),5e3),this.guideLink.setAttribute("href",p.GAME_DATA?.GuideURL),this.guideLink.classList.toggle("hidden",!p.GAME_DATA?.GuideURL),o.innerText=s||""})(),this.generateProgressionBlock(),this.updateData(!0),this.gameTime=m.ui.update_section.playTime[m.gameID]?m.ui.update_section.playTime[m.gameID]:0,this.sessionGameTime=0,this.timerTime=this.TIMER_TIME}updateProgress({earnedAchievementIDs:e}){this.updateData(),this.updateProgressionBlock({earnedAchievementIDs:e}),this.progresBarDelta.classList.remove("hidden"),setTimeout((()=>this.progresBarDelta.classList.add("hidden")),50)}alertsQuery=[];addAlertsToQuery(e){this.SHOW_NEW_ACHIV&&(this.alertsQuery.length>0?this.alertsQuery=[...this.alertsQuery,...e]:(this.alertsQuery=[...e],this.startAlerts()))}async startAlerts(){const e=()=>{this.container.classList.remove("new-game-info","new-achiv","new-award","beaten"),this.backSide.container.classList.remove("hardcore","beaten","mastered")},t=()=>{const e=this.section.querySelector(".status_glass-effect");e.classList.remove("update"),setTimeout((()=>e.classList.add("update")),20)},s=e=>{const{FixedTitle:t,badges:s,ImageIcon:i,points_total:n,ConsoleName:a,TotalRetropoints:o,NumAchievements:r,masteryRate:l,beatenRate:d}=e;this.backSide.imgElement.src=`https://media.retroachievements.org${i}`,this.backSide.achivTitleElement.innerHTML=`${t} ${c(s)}\n        <i class="badge">${a}</i>\n        `;let h=`\n        <p class="badge difficult-badge__pro">${n} HP</p>\n        <p class="badge difficult-badge__pro">${o} RP</p>\n        <p class="badge difficult-badge__pro">${r} CHEEVOS</p> \n        <p class="badge difficult-badge__pro">${l}% MASTERED RATE</p>\n        ${d?`<p class="badge difficult-badge__pro">${d}% BEATEN RATE</p>`:""}\n        `;this.backSide.earnedPoints.innerHTML=h,this.container.classList.add("new-game-info")},i=e=>{const{isHardcoreEarned:t,Title:s,prevSrc:i,Points:n,TrueRatio:a,rateEarned:o,rateEarnedHardcore:r,difficulty:c}=e;this.backSide.imgElement.src=i,this.backSide.achivTitleElement.innerHTML=s+`\n          <p class="badge difficult-badge__${c}">${c}</p>\n        `;let l=t?`<p class="badge difficult-badge__pro">+${n}HP </p>\n          <p class="badge difficult-badge__pro">+${a}RP </p>\n          <p class="badge difficult-badge__pro">TOP${r}</p>`:`\n          <p class="badge difficult-badge__pro">+${n}SP</p> \n          <p class="badge difficult-badge__pro">TOP${o}</p>`;this.backSide.earnedPoints.innerHTML=l,this.backSide.container.classList.toggle("hardcore",e.isHardcoreEarned),setTimeout((()=>this.container.classList.add("new-achiv")),2e3)},n=(e,t)=>{const{FixedTitle:s,badges:i,ImageIcon:n,points_total:a,earnedStats:o,TotalRetropoints:r,masteryRate:l,beatenRate:d,completedRate:h,beatenSoftRate:g,ID:u}=e,p="mastered"==t?l:"beaten"==t?d:"completed"==t?h:g,_=(e=>{const t=~~(e/3600),s=~~((e-3600*t)/60);return`\n          ${t>0?1==t?"1 hour ":t+" hours ":""}\n          ${t>0&&s>0?"and ":""}\n          ${s>0?1==s?"1 minute":s+" minutes":""}\n        `})(m.ui.update_section.playTime[u]);this.backSide.imgElement.src=`https://media.retroachievements.org${n}`,this.backSide.achivTitleElement.innerHTML=`${s} ${c(i)}\n        <i class="badge badge_gold">GAINED AWARD</i>\n        `;let E=`\n          <p class="badge difficult-badge__pro">${t} IN ${_}</p>\n          <p class="badge difficult-badge__pro">TOP${p}%</p>\n          <p class="badge difficult-badge__pro">${o.hard.points}/${a} HP</p>\n          <p class="badge difficult-badge__pro">${o.hard.retropoints}/${r} RP</p>\n        `;this.backSide.earnedPoints.innerHTML=E,this.backSide.container.classList.add(t),setTimeout((()=>this.container.classList.add("new-award")),1e3)},a=t=>{switch(e(),t.type){case"new-game":s(t.value);break;case"new-achiv":i(t.value);break;case"new-award":n(t.value,t.award)}};for(;this.alertsQuery.length>0;)await r(1e3),a(this.alertsQuery[0]),this.container.classList.add("show-back"),t(),setTimeout((()=>this.startAutoScrollElement(this.backSide.achivTitleElement)),2e3),setTimeout((()=>this.startAutoScrollElement(this.backSide.earnedPoints)),2e3),await r(1e3*this.NEW_ACHIV_DURATION),this.container.classList.remove("show-back"),this.alertsQuery.shift(),this.stopAutoScrollElement(this.backSide.earnedPoints,!0),this.stopAutoScrollElement(this.backSide.achivTitleElement,!0)}statsAnimationInterval;startStatsAnimation(){this.stopStatsAnimation(),this.section.classList.remove("timer-timeout"),this.progressStatusText.innerText="",this.progressStatusText.className="progress_points-percent progress-percent";let e=0,t=Object.values(this.statusTextValues).length;"auto"==this.PROGRESSBAR_PROPERTY_NAME&&"gameTime"==Object.getOwnPropertyNames(this.statusTextValues)[e]&&(this.PROGRESSBAR_PROPERTY_NAME="achives"),t>0&&this.changeStatsElementValues({className:Object.getOwnPropertyNames(this.statusTextValues)[e],text:Object.values(this.statusTextValues)[e]}),t>1&&(this.statsAnimationInterval=setInterval((()=>{e=e<t-1?e+1:0,this.progressStatusText.classList.add("hide"),setTimeout((()=>{this.changeStatsElementValues({className:Object.getOwnPropertyNames(this.statusTextValues)[e],text:Object.values(this.statusTextValues)[e]})}),1e3)}),1e3*this.STATS_DURATION))}stopStatsAnimation(){clearInterval(this.statsAnimationInterval),this.currentStatusTextIndex=0}changeStatsElementValues({className:e,text:t}){this.progressStatusText.innerText=t,this.progressStatusText.className=`progress_points-percent progress-percent ${e}`,this.CHANGE_PROGRESS_AUTO&&"gameTime"!=e&&this.section.style.setProperty("--progress-points",this.convertToPercentage(t)||"0%")}autoscrollRPInterval;startAutoScrollRP(e=!0){this.autoscrollRPInterval&&this.stopAutoScrollRP();let t=this.richPresence,s=1;this.AUTOSCROLL_RICHPRESENCE&&(this.autoscrollRPInterval=setInterval((()=>{t.clientWidth==t.scrollWidth?(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP()),1e4)):e?(t.scrollLeft+=s,t.scrollLeft+t.clientWidth>=t.scrollWidth&&(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP(!1)),1e3))):(t.scrollLeft-=s,0==t.scrollLeft&&(this.stopAutoScrollRP(),setTimeout((()=>this.startAutoScrollRP(!0)),1e3)))}),50),t.addEventListener("mouseenter",(()=>{s=0})),t.addEventListener("mouseleave",(()=>{s=1})))}stopAutoScrollRP(){clearInterval(this.autoscrollRPInterval)}autoscrollAlertInterval={};startAutoScrollElement(e,t=!0,s=1e3){this.autoscrollAlertInterval[e.className]?this.stopAutoScrollElement(e):this.autoscrollAlertInterval[e.className]={};let i=e;const n=s;this.autoscrollAlertInterval[e.className].interval=setInterval((()=>{i.clientWidth==i.scrollWidth?(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e,!0,n)),1e4)):t?(i.scrollLeft+=1,i.scrollLeft+i.clientWidth>=i.scrollWidth&&(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e,!1,n)),n))):(i.scrollLeft-=1,0==i.scrollLeft&&(this.stopAutoScrollElement(e),this.autoscrollAlertInterval[e.className].timeout=setTimeout((()=>this.startAutoScrollElement(e,!0,n)),n)))}),50)}stopAutoScrollElement(e,t=!1){t&&(e.scrollLeft=0),clearInterval(this.autoscrollAlertInterval[e.className].interval),clearTimeout(this.autoscrollAlertInterval[e.className].timeout)}convertToPercentage(e){const t=e.split("/");return(parseInt(t[0],10)/parseInt(t[1],10)*100).toFixed(2)+"%"}formatTime(e){const t=e<0;t&&(e*=-1);let s=Math.floor(e/3600),i=Math.floor(e%3600/60),n=e%60;return s=s<10?"0"+s:s,i=i<10?"0"+i:i,n=n<10?"0"+n:n,`${t?"-":""}${"00"!=s?s+":":""}${i}:${n}`}fitFontSize(e=!1){const t=this.section.querySelector(".status__container");let s=m.ui["update-section"]?.height??this.section.getBoundingClientRect().height;e&&(s=this.section.getBoundingClientRect().height);const i=(parseInt(s)-10)/5.5+"px";t.style.fontSize=i}blinkUpdate(){this.section.classList.remove("offline","blink"),this.BLINK_ON_UPDATE&&p.IS_ONLINE?(this.section.classList.add("blink"),setTimeout((()=>this.section.classList.remove("blink","offline")),1e3)):p.IS_ONLINE||this.section.classList.add("offline")}}class SidePanel{get VISIBLE(){return!this.section.classList.contains("hidden")}constructor(){this.initializeElements(),this.addEvents(),this.setValues()}initializeElements(){this.section=document.querySelector("#side_panel"),this.header=this.section.querySelector("#buttons-header_container"),this.settings=this.section.querySelector("#open-settings-button"),this.achievements=this.section.querySelector("#open-achivs-button"),this.gameCard=this.section.querySelector("#open-game-card-button"),this.target=this.section.querySelector("#open-target-button"),this.status=this.section.querySelector("#open-status-button"),this.awards=this.section.querySelector("#open-awards-button"),this.games=this.section.querySelector("#open-games-button"),this.progression=this.section.querySelector("#open-progression-button"),this.userImage=this.section.querySelector("#side-panel-user-image"),this.note=this.section.querySelector("#open-note-button"),this.notifications=this.section.querySelector("#open-notifications-button"),this.user=this.section.querySelector("#open-user-button"),this.stats=this.section.querySelector("#open-stats-button")}addEvents(){this.sidePanel=document.querySelector("#side_panel"),setTimeout((()=>p.buttons.section.classList.remove("expanded")),2e3),document.addEventListener("touchstart",(e=>this.touchVisibilityHandler(e))),document.addEventListener("mousemove",(e=>this.positionVisibilityHandler(e))),this.settings.addEventListener("click",(e=>{const t=document.querySelector("#settings_section");t?t.remove():p.settings.openSettings()}))}setValues(){this.userImage.src=m.userImageSrc}touchVisibilityHandler(e){e.touches[0].clientX<50&&(this.section.classList.add("expanded"),this.section.addEventListener("blur",(e=>{setTimeout((()=>p.buttons.section.classList.remove("expanded")),0)})))}positionVisibilityHandler(e){e.clientX<10&&(this.section.classList.add("expanded"),this.section.addEventListener("mouseleave",(e=>{setTimeout((()=>p.buttons.section.classList.remove("expanded")),200)})))}}class Settings{get settingsItems(){return[{label:p.lang.style,elements:[{type:"select",label:p.lang.selectColors,id:"settings_colors-selector",selectValues:[...Object.keys(s).map((e=>({type:"radio",name:"settings_color-scheme",id:`settings_color-scheme-${e}`,label:e,checked:p.settings.COLOR_SCHEME===e,event:`onchange="ui.settings.COLOR_SCHEME = '${e}'"`}))),{type:"radio",name:"settings_color-scheme",id:"settings_color-scheme-custom",label:"custom",checked:"custom"===p.settings.COLOR_SCHEME,event:"onchange=\"ui.settings.COLOR_SCHEME = 'custom'\""}]},{type:"checkbox",label:p.lang.showBgAnimation,id:"settings_show-bg",onChange:"ui.settings.BG_ANIMATION = this.checked;",checked:this.BG_ANIMATION}]},{label:p.lang.customColors,elements:[{type:"color",id:"main-color-input",label:"main color",value:m.mainColor,onChange:"console.log(this); config.mainColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"secondary-color-input",label:"secondary color",value:m.secondaryColor,onChange:"config.secondaryColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"accent-color-input",label:"accent color",value:m.accentColor,onChange:"config.accentColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"selection-color-input",label:"selection color",value:m.selectionColor,onChange:"config.selectionColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"},{type:"color",id:"font-color-input",label:"font color",value:m.fontColor,onChange:"config.fontColor = this.value; ui.settings.COLOR_SCHEME = ui.settings.COLOR_SCHEME"}]},{label:p.lang.fontFamily,elements:[{type:"select",label:p.lang.selectFont,id:"settings_font-family",selectValues:[{type:"radio",name:"settings_font-family",id:"settings_font-family-default",label:"default",checked:"default"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('default');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Oxygen",label:"Oxygen",checked:"Oxygen"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('oxygen');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Shadows",label:"Shadows",checked:"Shadows"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('shadows');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Pixelify",label:"Pixelify",checked:"Pixelify Sans"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('pixelifySans');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Jaro",label:"Jaro",checked:"Jaro"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('jaro');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Jacquard",label:"Jacquard",checked:"Jacquard"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('jacquard');\""},{type:"radio",name:"settings_font-family",id:"settings_font-family-Custom",label:"Custom",checked:"custom"===p.settings.FONT_NAME,event:"onchange=\"ui.settings.selectFont('custom');\""}]},{type:"search",label:p.lang.pasteHere,id:"settings_font-input",value:"",onChange:"ui.settings.FONT_FAMILY = this.value; this.value = '';"}]},{label:p.lang.fontSize,elements:[{type:"button",label:"-",id:"settings_font-size-decrease",onClick:"ui.settings.FONT_SIZE = parseFloat(ui.settings.FONT_SIZE) - 0.5;"},{type:"button",label:"+",id:"settings_font-size-increase",onClick:"ui.settings.FONT_SIZE = parseFloat(ui.settings.FONT_SIZE) + 0.5;"}]},{label:p.lang.updateDelaySecs,elements:[{type:"number",label:"sec",id:"settings_update-delay-input",value:m.updateDelay,onChange:"config.updateDelay = this.value"}]},{label:p.lang.targetUser,elements:[{type:"search",label:m.targetUser,id:"settings_target-user-input",value:m.targetUser,onChange:"config.targetUser = this.value"}]},{label:p.lang.gameID,elements:[{type:"button",label:p.lang.checkGameID,id:"settings_check-game-id",onClick:"ui.getAchievements()"},{type:"button",label:p.lang.getLastID,id:"settings_get-last-id",onClick:"ui.settings.getLastGameID()"},{type:"number",label:p.lang.gameID,id:"settings_game-id-input",value:m.gameID,onChange:"config.gameID = this.value;"}]},{label:p.lang.autoupdate,elements:[{type:"checkbox",label:p.lang.startOnLoad,id:"settings_start-on-load",onChange:"ui.settings.START_ON_LOAD = this.checked;",checked:this.START_ON_LOAD}]},{label:"Discord",elements:[{type:"text-input",label:p.lang.pasteWebhook,id:"settings_discord-hook-input",value:this.DISCORD_WEBHOOK??"",onChange:"ui.settings.DISCORD_WEBHOOK = value;"},{type:"checkbox",label:p.lang.startGameAlert,id:"settings_discord-start-game",onChange:"ui.settings.DISCORD_NEW_GAME = this.checked;",checked:this.DISCORD_NEW_GAME},{type:"checkbox",label:p.lang.startSession,id:"settings_discord-start-session",onChange:"ui.settings.DISCORD_START_SESSION = this.checked;",checked:this.DISCORD_START_SESSION},{type:"checkbox",label:p.lang.earnCheevoAlert,id:"settings_discord-new-cheevo",onChange:"ui.settings.DISCORD_NEW_CHEEVO = this.checked;",checked:this.DISCORD_NEW_CHEEVO},{type:"checkbox",label:p.lang.earnAwardAlert,id:"settings_discord-new-award",onChange:"ui.settings.DISCORD_NEW_AWARD = this.checked;",checked:this.DISCORD_NEW_AWARD}]},{label:"Language",elements:[{type:"radio",label:"English",id:"settings_lang-en",onChange:"ui.settings.LANG = 'en';",checked:"en"===this.LANG},{type:"radio",label:"Українська",id:"settings_lang-ua",onChange:"ui.settings.LANG = 'ua';",checked:"ua"===this.LANG},{type:"radio",label:"Japanese",id:"settings_lang-jp",onChange:"ui.settings.LANG = 'jp';",checked:"jp"===this.LANG}]},{label:"Export data",elements:[{label:"**Completion progress**",type:"button",name:"context_export-completion",id:"context_export-completion",event:'onclick="ui.exportCompletionDataToXlsx()"'}]}]}get LANG(){return m.ui?.local??"en"}set LANG(e){m.ui.local=e,m.writeConfiguration(),setTimeout((()=>location.reload()),1e3)}get DISCORD_WEBHOOK(){return m.DISCORD_WEBHOOK??""}set DISCORD_WEBHOOK(e){m.DISCORD_WEBHOOK=e,m.writeConfiguration()}get DISCORD_NEW_GAME(){return m._cfg?.discordNewGame??!0}set DISCORD_NEW_GAME(e){m._cfg.discordNewGame=e,m.writeConfiguration()}get DISCORD_NEW_CHEEVO(){return m._cfg?.discordNewCheevo??!0}set DISCORD_NEW_CHEEVO(e){m._cfg.discordNewCheevo=e,m.writeConfiguration()}get DISCORD_NEW_AWARD(){return m._cfg?.discordNewAward??!0}set DISCORD_NEW_AWARD(e){m._cfg.discordNewAward=e,m.writeConfiguration()}get DISCORD_START_SESSION(){return m._cfg?.discordStartSession??!0}set DISCORD_START_SESSION(e){m._cfg.discordStartSession=e,m.writeConfiguration()}get VISIBLE(){return!this.section.classList.contains("hidden")}get contextMenuItems(){return[{label:p.lang.selectColors,elements:Object.keys(s).map((e=>({type:"radio",name:"context_color-scheme",id:`context_color-scheme-${e}`,label:e,checked:p.settings.COLOR_SCHEME===e,event:`onchange="ui.settings.COLOR_SCHEME = '${e}'"`})))},{label:p.lang.showBgAnimation,type:"checkbox",name:"context_show-bg-animation",id:"context_show-bg-animation",checked:p.settings.BG_ANIMATION,event:'onchange="ui.settings.BG_ANIMATION = this.checked;"'},{label:p.lang.startOnLoad,type:"checkbox",name:"context_show-start-on-load",id:"context_show-start-on-load",checked:p.settings.START_ON_LOAD,event:'onchange="ui.settings.START_ON_LOAD = this.checked;"'}]}get FONT_SIZE(){return m?._cfg.settings?.fontSize??14}set FONT_SIZE(e){m._cfg.settings.fontSize=e,m.writeConfiguration(),document.documentElement.style.setProperty("font-size",`${this.FONT_SIZE}px`)}get FONT_FAMILY(){return this.fonts[m._cfg?.fontSelectorName??"default"]}get FONT_NAME(){let e=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim),t="default";return e.test(this.FONT_FAMILY)&&(t=this.FONT_FAMILY.match(e)[0].replaceAll("+"," ")),t}set FONT_FAMILY(e){let t=new RegExp(/https:\/\/[^'");]*/gim),s=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim);if(t.test(e)){let i=e.match(t)[0],n=e.match(s)[0].replaceAll("+"," ");const a=document.createElement("link");a.rel="stylesheet",a.href=i,document.head.appendChild(a),document.documentElement.style.setProperty("--font-family",`"${n}", system-ui, sans-serif`)}"def"==e&&document.documentElement.style.setProperty("--font-family"," system-ui, sans-serif")}loadCustomFont(e){const t=this.parseFontUrl(e);t&&(m._cfg.settings.customFontFamily=t.fontFamily,this.fontColorInput.value=t.fontName,this.FONT_FAMILY=t.fontFamily,this.fontSelector.value="custom",m._cfg.fontSelectorName="custom",m.writeConfiguration()),"def"==e&&(m._cfg.settings.fontFamily="",m.writeConfiguration(),document.documentElement.style.setProperty("--font-family"," system-ui, sans-serif"))}parseFontUrl(e){let t=new RegExp(/https:\/\/[^'");]*/gim),s=new RegExp(/(?<=family=)([A-Za-z0-9+);])*/gim);if(t.test(e)){return{fontFamily:e.match(t)[0],fontName:e.match(s)[0].replaceAll("+"," ")}}}get COLOR_SCHEME(){return m._cfg.settings.preset||"default"}set COLOR_SCHEME(e){console.log("set color"),m._cfg.settings.preset=e,m.writeConfiguration(),UI.updateColors(e)}get BG_ANIMATION(){return m._cfg.settings.bgVisibility??!0}set BG_ANIMATION(e){m._cfg.settings.bgVisibility=e,m.writeConfiguration(),document.querySelector("#background-animation").style.display=m.bgVisibility?"block":"none"}get START_ON_LOAD(){return m._cfg.settings.startOnLoad??!1}set START_ON_LOAD(e){m._cfg.settings.startOnLoad=e,m.writeConfiguration()}fonts={default:"def",pixelifySans:"https://fonts.googleapis.com/css2?family=Pixelify+Sans",jaro:"https://fonts.googleapis.com/css2?family=Jaro",oxygen:"https://fonts.googleapis.com/css2?family=Oxygen:wght@300;400;700",jacquard:"https://fonts.googleapis.com/css2?family=Jacquard+24",shadows:"https://fonts.googleapis.com/css2?family=Shadows+Into+Light&display=swap",custom:m._cfg?.settings?.customFontFamily??"def"};constructor(){this.setValues()}setValues(){this.FONT_SIZE=this.FONT_SIZE,this.FONT_FAMILY=this.fonts[m._cfg?.fontSelectorName??"default"]}getLastGameID(){apiWorker.getProfileInfo({}).then((e=>{document.getElementById("settings_game-id-input").value=e.LastGameID,m.gameID=e.LastGameID,p.getAchievements()}))}selectFont(e){const t=e;this.FONT_FAMILY=this.fonts[t],m._cfg.fontSelectorName=t,m.writeConfiguration()}close(){p.buttons.settings.checked=!1,this.section&&this.section.remove()}openSettings(e=this.settingsItems){this.close(),this.section=this.generateSettingsContainer(e),m.ui.settings_section&&(m.ui.settings_section.x&&(this.section.style.left=m.ui.settings_section.x),m.ui.settings_section.y&&(this.section.style.top=m.ui.settings_section.y)),this.section.querySelector(".header-container").addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("click",(e=>{this.section.querySelectorAll(".extended").forEach((e=>e.classList.remove("extended")))})),p.app.appendChild(this.section),p.buttons.settings.checked=!0}generateSettingsContainer(e){const t=document.createElement("section");t.classList.add("prefs_section","section"),t.id="settings_section",t.innerHTML='\n        <div class="header-container prefs-header-container">\n          <div class="header-icon settings-icon"></div>\n          <h2 class="widget-header-text prefs-header">Settings</h2>\n          <button class="header-button header-icon close-icon" onclick="ui.settings.close()">\n          </button>\n        </div>\n        <div class="settings_container "></div>\n      ';const s=document.createElement("ul");s.classList.add("settings_container","content-container");const i=e=>{switch(e.type){case"button":return`\n              <button class="button-input" ${e.event??""} onclick="${e.onClick??""}">${e.label}</button>\n            `;case"checkbox":return`\n              <div class="checkbox-input_container">\n                <input ${e.event??"--"}  onchange="${e.onChange??""}" type="checkbox" id="${e.id}" ${e.checked&&"checked"}>\n                <label class="checkbox-input" for="${e.id}">${e.label}</label>\n              </div>\n            `;case"radio":return`\n              <div class="radio-input_container">\n                <input ${e.event??"--"} name="${e.name}"  onchange="${e.onChange??""}" type="radio" id="${e.id}" ${e.checked&&"checked"}>\n                <label class="checkbox-input" for="${e.id}">${e.label}</label>\n              </div>\n            `;case"select":return`\n              <button class="select-button" id="${e.id}" onclick="this.classList.toggle('extended'); event.stopPropagation();">\n                <div class="select-label"> ${e.label}</div>\n                <div class="select-menu">\n               ${UI.generateContextMenu({menuItems:e.selectValues}).innerHTML}\n             \n                </div>\n              </button>\n            `;case"number":case"input-number":return`\n            <input type="number" title="${e.title?e.title:e.prefix??""}" class="text-input" id="${e.id}" value="${e.value}"\n                 placeholder="${e.label}" onchange="${e.onChange}"/>\n              `;case"text-input":return`\n                <input type="text" class="text-input" id="${e.id}" value="${e.value}"\n                 placeholder="${e.label}" onchange="${e.onChange}"/>\n              `;case"search":return`\n                <input type="search" class="text-input" id="${e.id}" value="${e.value}"\n                 placeholder="${e.label}" onchange="${e.onChange}"/>\n              `;case"color":return`\n            <input type="color" class="color-input" onchange="${e.onChange}" value="${e.value}" id="${e.id}" title="${e.label}" />\n            `;default:return"default"}};return e.forEach((e=>{const t=document.createElement("li");t.classList.add("settings_setting-line"),t.innerHTML=`\n          <h3 class="settings_setting-header">${e?.label}</h3>\n        `,e.elements?e.elements.forEach((e=>{t.innerHTML+=i(e)})):t.innerHTML+=i(e),s.appendChild(t)})),t.appendChild(s),t}}class Note{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}AUTOSAVE_INTERVAL_MILISECS=2e3;get notesTabs(){return[{type:"radio",name:"note__tabs",id:"notes__main-tab",label:p.lang.mainNote,checked:"main"===this.CURRENT_TAB,onChange:"ui.note.CURRENT_TAB = 'main'"},{type:"radio",name:"note__tabs",id:"notes__game-tab",label:p.lang.gameNote,checked:"game"===this.CURRENT_TAB,onChange:"ui.note.CURRENT_TAB = 'game'"}]}get NOTES_VALUE(){return m._cfg.ui?.note_section?.notes??""}set NOTES_VALUE(e){m._cfg.ui.note_section.notes=e,m.writeConfiguration()}get GAME_NOTES_VALUE(){return m._cfg.ui.note_section.game_notes||(m._cfg.ui.note_section.game_notes={}),m._cfg.ui?.note_section?.game_notes[m.gameID]??""}set GAME_NOTES_VALUE(e){m._cfg.ui.note_section.game_notes[m.gameID]=e,m.writeConfiguration()}get CURRENT_TAB(){return m._cfg.ui?.note_section?.currentTab??"main"}set CURRENT_TAB(e){m._cfg.ui.note_section.currentTab=e,m.writeConfiguration(),this.switchActiveTab()}constructor(){m._cfg.ui.note_section||(m._cfg.ui.note_section={}),this.initializeElements(),this.generateTabs(),this.addEvents(),this.setValues(),UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector("#note_section"),this.widgetIcon=document.querySelector("#open-note-button"),this.header=this.section.querySelector(".header-container"),this.resizer=this.section.querySelector("#note-resizer"),this.textarea=this.section.querySelector(".note-textaria")}generateTabs(){const e=this.notesTabs.reduce(((e,t)=>e+=`\n          <div class="checkbox-input_container" onmousedown="event.stopPropagation()">\n            <input  onchange="${t.onChange}" type="radio" id="${t.id}" ${t.checked?"checked":""} name="${t.name}">\n            <label class="radio-tab" for="${t.id}">${t.label}</label>\n          </div>\n        `),"");document.querySelector(".note__tabs-container").innerHTML=e}addEvents(){this.delayedSave={},this.textarea.addEventListener("input",this.textInputHandler),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}textInputHandler(e){const t="main"==p.note.CURRENT_TAB?"main":m.gameID,s=p.note.textarea.value;clearTimeout(p.note.delayedSave[t]),p.note.delayedSave[t]=setTimeout((()=>{p.note.saveNoteValue({id:t,value:s})}),p.note.AUTOSAVE_INTERVAL_MILISECS)}saveNoteValue({id:e,value:t}){if("main"===e)this.NOTES_VALUE=t;else m._cfg.ui.note_section.game_notes[e]=t,m.writeConfiguration()}setValues(){this.switchActiveTab()}switchActiveTab(){switch(this.CURRENT_TAB){case"main":this.textarea.value=this.NOTES_VALUE;break;case"game":this.textarea.value=this.GAME_NOTES_VALUE}}updateGame(){"game"===this.CURRENT_TAB&&(this.textarea.value=this.GAME_NOTES_VALUE)}async copyNoteText(){const e=this.textarea.value.substring(this.textarea.selectionStart,this.textarea.selectionEnd),t=e||this.textarea.value;try{await navigator.clipboard.writeText(t),this.textInputHandler()}catch(e){console.error(e)}}async pasteTextToNote(){try{const e=await navigator.clipboard.readText();this.textarea.value+=e,this.textInputHandler()}catch(e){console.error(e)}}clearTextNote(){this.textarea.value="",this.textInputHandler()}}class Awards{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}awardTypes={mastery:"mastery",completion:"completion",beatenSoftcore:"beatenSoftcore",beatenHardcore:"beatenHardcore"};constructor(){this.initializeElements(),this.addEvents(),UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector(".awards_section"),this.widgetIcon=document.querySelector("#open-awards-button"),this.header=document.querySelector(".awards-header_container"),this.container=document.querySelector(".awards-content_container"),this.resizer=document.querySelector("#awards-resizer")}addEvents(){this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}async updateAwards(){const e=await _.getUserAwards({});e.TotalAwardsCount==this.container.dataset.total&&e.MasteryAwardsCount==this.container.dataset.mastery&&e.BeatenHardcoreAwardsCount==this.container.dataset.beatenHard||this.parseAwards(e)}parseAwards(e){if(!e?.TotalAwardsCount)return;this.container.innerHTML="";const{dataset:t}=this.container;t.total=e.TotalAwardsCount,t.beatenSoftcore=e.BeatenSoftcoreAwardsCount,t.beatenHard=e.BeatenHardcoreAwardsCount,t.completion=e.CompletionAwardsCount,t.mastery=e.MasteryAwardsCount;let s=[...e.VisibleUserAwards];s=this.fixGamesProperties(s);const i=this.generateAwardsGroupsArray(s);this.generateConsolesAwards(i)}fixGamesProperties(e){return e.map((e=>(e.awardedDate=new Date(e.AwardedAt),e.awardeTypeFixed="Game Beaten"===e.AwardType?1===e.AwardDataExtra?this.awardTypes.beatenHardcore:this.awardTypes.beatenSoftcore:1===e.AwardDataExtra?this.awardTypes.mastery:this.awardTypes.completion,e))).sort(((e,t)=>t.awardedDate-e.awardedDate))}generateAwardsGroupsArray(e){return e.reduce(((e,t)=>(e.hasOwnProperty(t.ConsoleName)||(e[t.ConsoleName]=[]),e[t.ConsoleName].push(t),e.Total.push(t),e)),{Total:[]})}generateConsolesAwards(e){Object.getOwnPropertyNames(e).forEach((t=>{let s=document.createElement("li");s.classList.add("console-awards"),"Total"!==t&&s.classList.add("collapsed"),s.dataset.consoleName=t;let i=e[t].length;const n=({awardType:e,gamesArray:t})=>t.filter((t=>t.awardeTypeFixed===e)).length;let a=n({awardType:this.awardTypes.beatenSoftcore,gamesArray:e[t]}),o=n({awardType:this.awardTypes.beatenHardcore,gamesArray:e[t]}),r=n({awardType:this.awardTypes.completion,gamesArray:e[t]}),c=n({awardType:this.awardTypes.mastery,gamesArray:e[t]});s.innerHTML=`\n          <h3 class="awards-console_header" onclick="ui.awards.expandAwards(this)">${t}</h3>\n          <ul class="console-awards-values">      \n            <li class="awarded-games total" title="total awards" onclick="ui.awards.filterAwards('all')">${i}</li>\n            <li class="awarded-games beaten-softcore" title="beaten softcore" onclick="ui.awards.filterAwards('${this.awardTypes.beatenSoftcore}')">${a}</li>\n            <li class="awarded-games beaten"  title="beaten"  onclick="ui.awards.filterAwards('${this.awardTypes.beatenHardcore}')">${o}</li>\n            <li class="awarded-games completed"  title="completed" onclick="ui.awards.filterAwards('${this.awardTypes.completion}')">${r}</li>\n            <li class="awarded-games mastered"  title="mastered" onclick="ui.awards.filterAwards('${this.awardTypes.mastery}')">${c}</li>\n          </ul>\n          <button class="expand-awards_button" onclick="ui.awards.expandAwards(this)"> </button>\n          <ul class="awarded-games_list  ${"Total"==t?"":"hidden"} total">\n          </ul>\n          `,this.container.appendChild(s);let l=s.querySelector(".awarded-games_list");e[t].forEach((e=>{l.appendChild(this.makeGameAwardsElement(e))}))}))}makeGameAwardsElement(e){let t=document.createElement("li");return t.classList.add("awarded-game",e.awardeTypeFixed),t.innerHTML=`\n            <img class="awarded-game-preview" src="https://media.retroachievements.org${e.ImageIcon}" alt=" ">\n            <h3 class="game-title">${e.Title}</h3>\n            <p class="console-name">${e.ConsoleName}</p>\n            <p class="awarded-date">${e.timeString}</p>\n        `,t}expandAwards(e){const t=e.parentNode,s=t.querySelector(".awarded-games_list");s.classList.contains("hidden")?(t.classList.remove("collapsed"),s.classList.remove("hidden")):(t.classList.add("collapsed"),s.classList.add("hidden"))}filterAwards(e){this.container.querySelectorAll(".awarded-game").forEach((t=>{t.classList.remove("hidden"),t.classList.contains(e)||"all"===e||t.classList.add("hidden")}))}close(){p.buttons.awards.click()}}class GameCard{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}get SHOW_BADGES(){return m.ui?.game_section?.showBadges??!0}set SHOW_BADGES(e){m.ui.game_section.showBadges=e,m.writeConfiguration(),this.updateGameCardInfo(p.GAME_DATA)}get contextMenuItems(){return[...this.contexMenuSettingsItems,...this.contextMenuPropertiesItems]}get contextMenuPropertiesItems(){return this._contextMenuPropertiesItems}set contextMenuPropertiesItems(e){this._contextMenuPropertiesItems=e}get contexMenuSettingsItems(){return[{label:p.lang.showTitleBadges,type:"checkbox",name:"game-card_show-badges",id:"game-card_show-badges",event:"onchange=\"ui.gameCard.SHOW_BADGES = this.parentNode.querySelector('input').checked\"",checked:this.SHOW_BADGES}]}_contextMenuPropertiesItems=[{label:p.lang.platform,type:"checkbox",name:"context_show-platform",id:"context_show-platform",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Platform', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.developer,type:"checkbox",name:"context_show-developer",id:"context_show-developer",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Developer', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.publisher,type:"checkbox",name:"context_show-publisher",id:"context_show-publisher",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Publisher', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.genre,type:"checkbox",name:"context_show-genre",id:"context_show-genre",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Genre', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.released,type:"checkbox",name:"context_show-released",id:"context_show-released",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Released', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.points,type:"checkbox",name:"context_show-points",id:"context_show-points",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Points', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.players,type:"checkbox",name:"context_show-players",id:"context_show-players",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Players', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.completion,type:"checkbox",name:"context_show-completion",id:"context_show-completion",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Completion', checkbox: this.parentNode.querySelector('input')})\"",checked:!0},{label:p.lang.cheevos,type:"checkbox",name:"context_show-achievements",id:"context_show-achievements",event:"onchange=\"ui.gameCard.updateGameInfoElement({name:'Achievements', checkbox: this.parentNode.querySelector('input')})\"",checked:!0}];gameInfoElements={Platform:{title:p.lang.platform,id:"game-card-platform"},Developer:{title:p.lang.developer,id:"game-card-developer"},Publisher:{title:p.lang.publisher,id:"game-card-publisher"},Genre:{title:p.lang.genre,id:"game-card-genre"},Released:{title:p.lang.released,id:"game-card-released"},Completion:{title:p.lang.completion,id:"game-card-completion",value:""},Points:{title:p.lang.points,id:"game-card-points-total"},Players:{title:p.lang.players,id:"#game-card-players-total"},Achievements:{title:p.lang.cheevos,id:"game-card-achivs-count"}};updateGameInfoElement({name:e,value:t,visibility:s,checkbox:i}){this.gameInfoElements.hasOwnProperty(e)&&(i&&(s=i.checked?"visible":"hidden",this.gameInfoElements[e].visibility=s,this.contextMenuPropertiesItems.map((e=>{e.id==i.id&&(e.checked=i.checked)})),m.ui.hasOwnProperty("game_section")||(m.ui.game_section=[]),m.ui.game_section.gameInfoElements=this.gameInfoElements,m.ui.game_section.contextMenuItems=this.contextMenuPropertiesItems,m.writeConfiguration()),t&&(this.gameInfoElements[e].value=t),s&&(this.gameInfoElements[e].visibility=s)),this.generateInfo()}constructor(){this.loadSavedData(),this.initializeElements(),this.addEvents(),UI.applyPosition({widget:this})}loadSavedData(){this.loadSavedGameInfo(),this.loadSavedContextData()}loadSavedGameInfo(){if(m.ui?.game_section?.gameInfoElements){const e=m.ui.game_section.gameInfoElements;Object.keys(e).forEach((t=>{this.gameInfoElements[t].visibility=e[t].visibility}))}}loadSavedContextData(){if(m.ui?.game_section?.contextMenuItems){m.ui.game_section.contextMenuItems.forEach((e=>{this._contextMenuPropertiesItems.find((t=>t.id===e.id)).checked=e.checked}))}}initializeElements(){this.section=document.querySelector(".game-card_section"),this.widgetIcon=document.querySelector("#open-game-card-button"),this.header=document.querySelector("#game-card-header"),this.descriptions=document.querySelector(".game-card-description"),this.preview=document.querySelector("#game-card-image"),this.platform=document.querySelector("#game-card-platform"),this.developer=document.querySelector("#game-card-developer"),this.publisher=document.querySelector("#game-card-publisher"),this.genre=document.querySelector("#game-card-genre"),this.released=document.querySelector("#game-card-released"),this.completion=document.querySelector("#game-card-completion"),this.achivsCount=document.querySelector("#game-card-achivs-count"),this.playersCount=document.querySelector("#game-card-players-total"),this.pointsCount=document.querySelector("#game-card-points-total"),this.iconsContainer=this.section.querySelector(".game-card__icons-container"),this.resizer=document.querySelector("#game-card-resizer")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{e.preventDefault(),e.stopPropagation(),document.querySelector(".context-menu")?.remove(),this.contextMenu=UI.generateContextMenu({menuItems:this.contextMenuItems,sectionCode:""}),this.section.appendChild(this.contextMenu),e.x+this.contextMenu.offsetWidth>window.innerWidth?this.contextMenu.style.left=e.x-this.contextMenu.offsetWidth+"px":this.contextMenu.style.left=e.x+"px",e.y+this.contextMenu.offsetHeight>window.innerHeight?this.contextMenu.style.top=e.y-this.contextMenu.offsetHeight+"px":this.contextMenu.style.top=e.y+"px",this.contextMenu.classList.remove("hidden")})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}async updateGameCardInfo({Title:e,FixedTitle:t,ID:s,ImageBoxArt:i,ConsoleName:a,Developer:o,Publisher:r,Genre:l,Released:d,TotalRetropoints:g,NumAchievements:u,players_total:m,points_total:p,badges:_,retroRatio:E}){this.header.innerHTML=`${t.replaceAll(/\,\s*the$/gi,"")}`,this.header.setAttribute("href",`https://retroachievements.org/game/${s}`),this.preview.setAttribute("src",`https://media.retroachievements.org${i}`),this.preview.setAttribute("alt",`${t} boxart`);const v=await n(s),S=v?.Genres;this.gameInfoElements.Platform.value=a,this.gameInfoElements.Developer.value=o,this.gameInfoElements.Publisher.value=r,this.gameInfoElements.Genre.value=l,this.gameInfoElements.Released.value=d,this.gameInfoElements.Points.value=p,this.gameInfoElements.Players.value=m,this.gameInfoElements.Achievements.value=u,this.iconsContainer.innerHTML=`\n        <p class="game-info-header game-card__icon-block" title="earned by">\n            <i class="description-icon  achievements-icon"></i>\n            ${u}\n          </p>\n  \n          <p class="game-info-header game-card__icon-block" title="points">\n            <i class="description-icon  points-icon"></i>\n            ${p}\n          </p>\n  \n          <p class="game-info-header game-card__icon-block" title="retropoints">\n            <i class="description-icon  retropoints-icon"></i>\n            ${g}\n          </p>\n  \n          <p class="game-info-header game-card__icon-block" title="true ratio">\n            <i class="description-icon rarity-icon"></i>\n            ${E}\n          </p>\n      `,this.generateInfo();const A=this.section.querySelector(".game-card__genres-container");A.innerHTML="",this.SHOW_BADGES&&(A.innerHTML=`\n        ${_?c(_):""}\n      `,A.innerHTML+=`\n        ${S?function(e){return e?.reduce(((e,t)=>e+`<i class="badge">${h[t]}</i> `),"")}(S):l?c(l.split(",")):""}\n      `)}generateInfo(){this.descriptions.innerHTML="",Object.getOwnPropertyNames(this.gameInfoElements).forEach((e=>{let t=document.createElement("div");t.classList.add("game-card-info"),t.classList.toggle("hidden","hidden"==this.gameInfoElements[e].visibility),t.innerHTML=`\n        <h3 class="game-info-header">${this.gameInfoElements[e].title}</h3>\n        <p class="game-card-text" id="${this.gameInfoElements[e].id}">${this.gameInfoElements[e].value}</p>\n        `,this.descriptions.appendChild(t)}))}close(){p.buttons.gameCard.click()}}const n=async e=>{const t=await fetch("./json/games/all_ext.json"),s=await t.json();return e?s.find((t=>t.ID==e)):s};class Progression{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}constructor(){this.initializeElements(),this.addEvents(),UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector("#progression_section"),this.widgetIcon=document.querySelector("#open-progression-button"),this.header=this.section.querySelector(".header-container"),this.notEarnedList=this.section.querySelector("#not-earned_progression-list"),this.earnedList=this.section.querySelector("#earned_progression-list"),this.resizer=this.section.querySelector("#progression-resizer")}addEvents(){this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}fillCards(){this.notEarnedList.innerHTML="",this.earnedList.innerHTML="",Object.values(p.ACHIEVEMENTS).filter((e=>UI.filterBy.progression(e))).sort(((e,t)=>-1*UI.sortBy.id(e,t))).sort(((e,t)=>-1*UI.sortBy.default(e,t))).forEach((e=>{if("progression"===e.type||"win_condition"===e.type){const t=this.generateCard(e);this.addGlowEffectToCard(t),e.isHardcoreEarned?this.earnedList.prepend(t):this.notEarnedList.appendChild(t)}}))}addGlowEffectToCard(e){var t=e.querySelector(".marker");let s;function i(s){var i=s.offsetX,n=s.offsetY,a=e.offsetHeight,o=e.offsetWidth,r=Math.abs(Math.floor(100/o*i)-100),c=Math.abs(Math.floor(100/a*n)-100);t.style.backgroundPosition=`${r}% ${c}%`}e.addEventListener("mouseenter",(n=>{s=e.getBoundingClientRect(),t.classList.remove("hidden"),e.addEventListener("mousemove",(e=>{i(e)}))})),e.addEventListener("mouseleave",(s=>{e.style.transform="",e.style.background="",t.classList.add("hidden"),e.removeEventListener("mousemove",(e=>i(e)))}))}generateCard({Title:e,ID:t,prevSrc:s,Points:i,TrueRatio:n,NumAwardedHardcore:a,totalPlayers:o,type:r,Description:c}){const l=document.createElement("li");return l.classList.add("horizon-list_item","progression-achiv","win_condition"==r?"trophy":"f"),l.dataset.id=t,l.innerHTML=`\n      <div class="progression-achiv_container">\n          <div class="progression_descriptions">\n              <p class="progression-description-text" title="points"><i\n                      class="description-icon points-icon"></i>${i}\n  \n              </p>\n              <p class="progression-description-text" title="points"><i\n                      class="description-icon retropoints-icon"></i>${n}\n  \n              </p>\n              <p class="progression-description-text" title="earned by"><i\n                      class="description-icon trending-icon"></i>${~~(a/o*100)}%</p>\n              <div class="description-icon condition ${r}" title="achievement type">\n          </div>\n          </div> \n          <div class="progression-achiv_prev-container">\n              <img class="progression-achiv_prev-img" src="${s}"  alt=" ">\n          </div>\n          <h3 class="progression_achiv-name">\n              <a class="progression_achiv-link" progression="_blanc" href="https://retroachievements.org/achievement/56855">${e}</a>\n          </h3>\n          <div class="progression-details">\n              ${c}\n          </div>\n             \n          <div class="marker hidden" style="position: absolute;"></div>\n        </div>       \n        `,l}updateEarnedCards({gameIDArray:e}){e?.forEach((e=>{this.notEarnedList.querySelectorAll(".progression-achiv").forEach((t=>{t.dataset.id==e&&(t.classList.add("removed"),setTimeout((()=>{t.classList.remove("removed"),this.earnedList.appendChild(t),t.classList.add("added")}),500))}))}))}close(){p.buttons.progression.click()}}class UserStatistic{get contextMenuItems(){return[{label:p.lang.showStats,elements:[{type:"checkbox",name:"context_show-points",id:"context_show-points",label:p.lang.points,checked:this.SHOW_HP,event:'onchange="ui.stats.SHOW_HP = this.checked;"'},{type:"checkbox",name:"context_show-retropoints",id:"context_show-retropoints",label:p.lang.retropoints,checked:this.SHOW_RP,event:'onchange="ui.stats.SHOW_RP = this.checked;"'},{type:"checkbox",name:"context_show-softpoints",id:"context_show-softpoints",label:p.lang.softpoints,checked:this.SHOW_SP,event:'onchange="ui.stats.SHOW_SP = this.checked;"'},{type:"checkbox",name:"context_show-rank",id:"context_show-rank",label:p.lang.rank,checked:this.SHOW_RANK,event:'onchange="ui.stats.SHOW_RANK = this.checked;"'},{type:"checkbox",name:"context_show-percentile",id:"context_show-percentile",label:p.lang.percentile,checked:this.SHOW_PERCENTILE,event:'onchange="ui.stats.SHOW_PERCENTILE = this.checked;"'},{type:"checkbox",name:"context_show-true-ratio",id:"context_show-true-ratio",label:p.lang.trueRatio,checked:this.SHOW_TR,event:'onchange="ui.stats.SHOW_TR = this.checked;"'},{type:"checkbox",name:"context_show-completion-chart",id:"context_show-completion-chart",label:p.lang.completionChart,checked:this.SHOW_COMPLETION_CHART,event:'onchange="ui.stats.SHOW_COMPLETION_CHART = this.checked;"'}]},{label:p.lang.style,elements:[{type:"checkbox",name:"context_show-header",id:"context_show-header",label:p.lang.showHeader,checked:this.SHOW_HEADER,event:'onchange="ui.stats.SHOW_HEADER = this.checked;"'},{type:"checkbox",name:"context_show-bg",id:"context_show-bg",label:p.lang.showBackground,checked:this.SHOW_BG,event:'onchange="ui.stats.SHOW_BG = this.checked;"'}]},{type:"checkbox",name:"context_show-session-progress",id:"context_show-session-progress",label:p.lang.showSessionProgress,checked:this.SHOW_SESSION_PROGRESS,event:'onchange="ui.stats.SHOW_SESSION_PROGRESS = this.checked;"'}]}get SHOW_BG(){return m.ui?.stats_section?.showBG??!0}set SHOW_BG(e){this.saveProppertySetting("showBG",e),this.setElementsVisibility()}get SHOW_HEADER(){return m.ui?.stats_section?.showHeader??!0}set SHOW_HEADER(e){this.saveProppertySetting("showHeader",e),this.setElementsVisibility()}get SHOW_HP(){return m.ui?.stats_section?.showHP??!0}set SHOW_HP(e){this.saveProppertySetting("showHP",e),this.setElementsVisibility()}get SHOW_RP(){return m.ui?.stats_section?.showRP??!0}set SHOW_RP(e){this.saveProppertySetting("showRP",e),this.setElementsVisibility()}get SHOW_SP(){return m.ui?.stats_section?.showSP??!0}set SHOW_SP(e){this.saveProppertySetting("showSP",e),this.setElementsVisibility()}get SHOW_RANK(){return m.ui?.stats_section?.showRank??!0}set SHOW_RANK(e){this.saveProppertySetting("showRank",e),this.setElementsVisibility()}get SHOW_PERCENTILE(){return m.ui?.stats_section?.showPercentile??!0}set SHOW_PERCENTILE(e){this.saveProppertySetting("showPercentile",e),this.setElementsVisibility()}get SHOW_TR(){return m.ui?.stats_section?.showTrueRatio??!0}set SHOW_TR(e){this.saveProppertySetting("showTrueRatio",e),this.setElementsVisibility()}get SHOW_SESSION_PROGRESS(){return m.ui?.stats_section?.showSessionProgress??!0}set SHOW_SESSION_PROGRESS(e){this.saveProppertySetting("showSessionProgress",e),this.setElementsVisibility()}get SHOW_COMPLETION_CHART(){return m.ui?.stats_section?.completionChart??!1}set SHOW_COMPLETION_CHART(e){this.saveProppertySetting("completionChart",e),this.setElementsVisibility(),this.updateChart()}get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}saveProppertySetting(e,t){m.ui.stats_section||(m.ui.stats_section={}),m.ui.stats_section[e]=t,m.writeConfiguration()}initialUserSummary;userSummary;constructor(){this.initializeElements(),this.setElementsVisibility(),this.addEvents(),UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector("#stats_section"),this.widgetIcon=document.querySelector("#open-stats-button"),this.header=this.section.querySelector(".header-container"),this.container=this.section.querySelector(".stats-container"),this.generateStatsElements(),this.rankRateElement=this.section.querySelector("#stats_rank-rate"),this.rankElement=this.section.querySelector("#stats_rank"),this.pointsElement=this.section.querySelector("#stats_points"),this.retropointsElement=this.section.querySelector("#stats_retropoints"),this.softpointsElement=this.section.querySelector("#stats_softpoints"),this.trueRatioElement=this.section.querySelector("#stats_true-ratio"),this.completionElement=this.section.querySelector(".stats__chart-container"),this.masteredCountElement=this.section.querySelector("#stats_mastered-count"),this.beatenCountElement=this.section.querySelector("#stats_beaten-count"),this.playedCountElement=this.section.querySelector("#stats_played-count"),this.resizer=this.section.querySelector(".resizer")}setElementsVisibility(){this.pointsElement.closest("li").classList.toggle("hidden",!this.SHOW_HP),this.retropointsElement.closest("li").classList.toggle("hidden",!this.SHOW_RP),this.softpointsElement.closest("li").classList.toggle("hidden",!this.SHOW_SP),this.rankElement.closest("li").classList.toggle("hidden",!this.SHOW_RANK),this.rankRateElement.closest("li").classList.toggle("hidden",!this.SHOW_PERCENTILE),this.trueRatioElement.closest("li").classList.toggle("hidden",!this.SHOW_TR),this.completionElement.classList.toggle("hidden",!this.SHOW_COMPLETION_CHART),this.section.classList.toggle("compact",!this.SHOW_HEADER),this.section.classList.toggle("hide-bg",!this.SHOW_BG),this.container.classList.toggle("show-session-progress",this.SHOW_SESSION_PROGRESS)}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{p.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}initialSetStats({userSummary:e,completionProgress:t}){this.initialData={Rank:e.Rank,rankRate:+(100*e.Rank/e.TotalRanked).toFixed(2),TotalPoints:e.TotalPoints,TotalSoftcorePoints:e.TotalSoftcorePoints,TotalTruePoints:e.TotalTruePoints,trueRatio:+(e.TotalTruePoints/e.TotalPoints).toFixed(2)},e&&(this.userSummary=e,this.initialUserSummary=e,this.rankElement.innerText=e.Rank,this.rankRateElement.innerText=(100*e.Rank/e.TotalRanked).toFixed(2)+"%",this.pointsElement.innerText=e.TotalPoints,this.softpointsElement.innerText=e.TotalSoftcorePoints,this.retropointsElement.innerText=e.TotalTruePoints,this.trueRatioElement.innerText=(e.TotalTruePoints/e.TotalPoints).toFixed(2)),setTimeout((()=>this.updateChart()),1e3)}async updateStats({currentUserSummary:e}){e||(e=await _.getUserSummary({gamesCount:"0",achievesCount:0}));const t=(t,s)=>{let i=0,n=0,a=0,o=0;switch(s){case"rankRate":a=(100*e.Rank/e.TotalRanked).toFixed(2),o=(100*this.userSummary.Rank/this.userSummary.TotalRanked).toFixed(2),i=+(a-o).toFixed(2),n=+(a-this.initialData.rankRate).toFixed(2),a+="%";break;case"trueRatio":a=(e.TotalTruePoints/e.TotalPoints).toFixed(2),o=(this.userSummary.TotalTruePoints/this.userSummary.TotalPoints).toFixed(2),i=+(a-o).toFixed(2),n=+(a-this.initialData.trueRatio).toFixed(2);break;default:i=e[s]-this.userSummary[s],n=e[s]-this.initialData[s],a=e[s]}if(0===i)return;const r=i<0,c=n<0;t.classList.add("delta"),t.classList.toggle("negative",r),t.dataset.delta=`${r?"":"+"}${i}`;setTimeout((()=>{t.innerHTML=a+` <span class="session-progress ${c?"negative":""}">\n            ${c?"":"+"}${n}</span>`,t.classList.remove("delta")}),5e3)};t(this.rankRateElement,"rankRate"),t(this.rankElement,"Rank"),t(this.pointsElement,"TotalPoints"),t(this.softpointsElement,"TotalSoftcorePoints"),t(this.retropointsElement,"TotalTruePoints"),t(this.trueRatioElement,"trueRatio"),this.userSummary=e}async updateChart(){if(!this.SHOW_COMPLETION_CHART)return;const e=this.section.querySelector(".stats__chart-container"),t=await _.SAVED_COMPLETION_PROGRESS,s=t?.Results??[],i=s.length,n=s.filter((e=>"mastered"===e.HighestAwardKind)).length/i*100,a=s.filter((e=>"completed"===e.HighestAwardKind)).length/i*100,o=s.filter((e=>"beaten-hardcore"===e.HighestAwardKind)).length/i*100,r=s.filter((e=>"beaten-softcore"===e.HighestAwardKind)).length/i*100;e.style.setProperty("--m",n+"%"),e.style.setProperty("--c",a+"%"),e.style.setProperty("--b",o+"%"),e.style.setProperty("--b-s",r+"%"),this.section.querySelector(".legend__value-mastered").innerText=n.toFixed(2)+"%",this.section.querySelector(".legend__value-completed").innerText=a.toFixed(2)+"%",this.section.querySelector(".legend__value-beaten").innerText=o.toFixed(2)+"%",this.section.querySelector(".legend__value-beaten-soft").innerText=r.toFixed(2)+"%",this.section.querySelector(".legend__value-progress").innerText=(100-n-a-o-r).toFixed(2)+"%"}statusProperties={percentile:{label:p.lang.percentile,id:"stats_rank-rate",class:"stats__rank-value"},rank:{label:p.lang.rank,id:"stats_rank",class:"stats__rank-value"},points:{label:p.lang.points,id:"stats_points"},retropoints:{label:p.lang.retropoints,id:"stats_retropoints"},trueRatio:{label:p.lang.trueRatio,id:"stats_true-ratio"},softpoints:{label:p.lang.softpoints,id:"stats_softpoints"}};generateStatsElements(){const e=Object.values(this.statusProperties).reduce(((e,t)=>e+=`\n          <li class="stats__stat-container">\n              <h2 class="stats__title">${t.label}</h2>\n              <p id="${t.id}" class="stats__value ${t.class}"></p>\n          </li>\n          `),""),t=`\n      <li class="stats__stat-container stats__chart-container">\n      <h2 class="stats__title">${p.lang.completionChart}</h2>\n      <div class="round-stat__container ">\n        <div class="circle">\n          <div class="round-stat__total" id="sector"></div>\n        </div>\n          <div class="round-stat__legend">\n              <div class="legend__award legend__mastered">mastered: <span class="legend__value-mastered">0%</span></div>\n              <div class="legend__award legend__completed">completed: <span class="legend__value-completed">0%</div>\n              <div class="legend__award legend__beaten">beaten: <span class="legend__value-beaten">0%</div>\n              <div class="legend__award legend__beaten-soft">beaten soft: <span class="legend__value-beaten-soft">0%</div>\n              <div class="legend__award legend__started">in progress: <span class="legend__value-progress">0%</div>\n          </div>\n      </div>\n      </li>\n      `;this.container.innerHTML=e+t}}class Notifications{get contextMenuItems(){return[{label:"Show header",type:"checkbox",name:"context_hide-notification-header",id:"context_hide-notification-header",checked:this.SHOW_HEADER,event:'onchange="ui.notifications.SHOW_HEADER = this.checked;"'},{label:"Hide background",type:"checkbox",name:"context_hide-notification-bg",id:"context_hide-notification-bg",checked:this.HIDE_BG,event:'onchange="ui.notifications.HIDE_BG = this.checked;"'},{label:"Show timestamp",type:"checkbox",name:"context_show-notification-time",id:"context_show-notification-time",checked:this.SHOW_TIMESTAMP,event:'onchange="ui.notifications.SHOW_TIMESTAMP = this.checked;"'}]}types={newGame:"newGame",earnedAchivs:"earnedAchivs"};get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}get SHOW_TIMESTAMP(){return m?.ui.notification_section?.showTimestamp??!0}set SHOW_TIMESTAMP(e){m.ui.notification_section||(m.ui.notification_section={}),this.section.querySelectorAll(".notification_timestamp").forEach((e=>e.classList.toggle("hidden",this.SHOW_TIMESTAMP))),m.ui.notification_section.showTimestamp=e,m.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get SHOW_HEADER(){return m?.ui.notification_section?.showHeader??!0}set SHOW_HEADER(e){m.ui.notification_section||(m.ui.notification_section={}),m.ui.notification_section.showHeader=e,m.writeConfiguration(),this.section.classList.toggle("compact",!this.SHOW_HEADER)}get HIDE_BG(){return m?.ui.notification_section?.hideBg??!1}set HIDE_BG(e){m.ui.notification_section||(m.ui.notification_section={}),m.ui.notification_section.hideBg=e,m.writeConfiguration(),this.section.classList.toggle("hide-bg",this.HIDE_BG)}get NOTIFICATIONS(){return this._notifications??{time:"",notifications:[]}}constructor(){this.initializeElements(),this.addEvents(),this.HIDE_BG=this.HIDE_BG,this.SHOW_HEADER=this.SHOW_HEADER,this.updateInterval=setInterval((()=>{this.container.querySelectorAll(".notification_timestamp").forEach((e=>{e.innerText=this.getDeltaTime(e.dataset.time)}))}),6e4),UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector("#notification_section"),this.widgetIcon=document.querySelector("#open-notifications-button"),this.container=this.section.querySelector(".notification-container"),this.resizer=this.section.querySelector(".resizer")}addEvents(){this.section.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)})),this.section.addEventListener("contextmenu",(e=>{p.showContextmenu({event:e,menuItems:this.contextMenuItems,sectionCode:""})})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})}))}parseUserSummary(e){e.lastGames.map((e=>(e.DateEarnedHardcore=e.LastPlayed,e.type=this.types.newGame,e))),e.lastAchivs.map((e=>(e.DateEarnedHardcore=e.DateAwarded,e.type=this.types.earnedAchivs,e.BadgeURL=`Badge/${e.BadgeName}.png`,e))),[...e.lastAchivs,...e.lastGames].sort(((e,t)=>-1*UI.sortBy.latest(e,t))).forEach((e=>this.pushNotification({type:e.type,elements:e,time:e.DateEarnedHardcore})))}pushNotification({type:e,elements:t,time:s}){const i=this.generatePopupTime(s);let n=[];switch(e){case this.types.newGame:n.push(this.generateNewgameElement(t));break;case this.types.earnedAchivs:n=this.generateNewachivsElements(Array.isArray(t)?t:[t]);break;default:return void console.log("notification type doesn't exist")}const a=this.generateTimeBlock(i,n);n.length>0&&this.container.prepend(a);const o=a.getBoundingClientRect().height;this.container.style.setProperty("--offset-height",`${o}px`),a.classList.add("notification_popup")}generateTimeBlock(e,t){const s=document.createElement("ul");return s.classList.add("notification_timeblock-list"),s.appendChild(e),t.forEach((e=>{s.appendChild(e)})),s}generatePopupTime(e){const t=document.createElement("li"),s=(e?(e=>{const[t,s]=e.split(", "),[i,n,a]=t.split(".").map(Number),[o,r]=s.split(":").map(Number);return new Date(a,n-1,i,o,r)})(e):new Date).getTime();return t.dataset.time=s,t.classList.add("notification_timestamp"),!this.SHOW_TIMESTAMP&&t.classList.add("hidden"),t.innerHTML=`\n       ${this.getDeltaTime(s)}\n      `,t}generateNewgameElement(e){const t=document.createElement("li");return t.classList.add("notification-game","new-game"),t.innerHTML=`\n        <div class="prev">\n          <img class="prev-img" src="https://media.retroachievements.org${e.ImageIcon}" alt=" ">\n        </div>\n        <div class="notification_details">\n          <h3 class="achiv-name">\n            <a target="_blanc" href="https://retroachievements.org/game/${e.ID??e.GameID}">\n              ${e.Title}\n            </a>\n          </h3>\n          <p class="achiv-description">${e.Genre?e.Genre+",\n":""}${e.ConsoleName}</p>\n          <div class="notification_description-icons">\n            <p class="notification_description-text" title="points">\n              <i class="notification_description-icon  points-icon"></i>\n              ${e.points_total??""}\n            </p>\n            <p class="notification_description-text" title="retropoints">\n              <i class="notification_description-icon  achievements-icon"></i>\n              ${e.NumAchievements??e.AchievementsTotal}\n            </p>\n            <p class="notification_description-text" title="earned by">\n              <i class="notification_description-icon  players-icon"></i>\n              ${e.NumDistinctPlayersHardcore??""}\n            </p>\n          </div>\n        </div>\n      `,t}generateNewachivsElements(e){let t=[];return e.forEach((e=>{const{AchievementID:s,BadgeURL:i,Description:n,Title:a,Points:o,TrueRatio:r,HardcoreMode:c,ID:l}=e;let d="";p.GAME_DATA.ID==e.GameID&&(d=~~(100*p.ACHIEVEMENTS[s??l].NumAwardedHardcore/p.GAME_DATA.NumDistinctPlayers));const h=document.createElement("li");h.classList.add("notification-achiv","new-achiv"),h.innerHTML=`   \n        <div class="prev">\n                  <img class="prev-img" src="https://media.retroachievements.org/${i}" alt=" ">\n                </div>\n                <div class="notification_details">\n                  <h3 class="achiv-name"><a target="_blanc" href="https://retroachievements.org/achievement/${s??l}">${a}</a></h3>\n                  <p class="achiv-description">${n}</p>\n                  <div class="notification_description-icons">       \n                    <p class="notification_description-text" title="points">\n                      <i class="notification_description-icon  points-icon"></i>\n                      ${o}\n                    </p>\n                    \n                    <p class="notification_description-text" title="retropoints">\n                      <i class="notification_description-icon  retropoints-icon"></i>\n                      ${r??""}\n                    </p>\n                    <p class="notification_description-text" title="earned by">\n                      <i class="notification_description-icon  trending-icon"></i>\n                      ${d?d+"%":""}\n                    </p>\n                  </div>             \n                </div>\n        `,t.push(h)})),t}getDeltaTime(e){let t=+e,s=~~(((new Date).getTime()-t)/1e3);return s<120?"moment ago":s<600?"few minutes ago":s<3600?~~(s/60)+" minutes ago":s<43200?new Date(t).toLocaleTimeString().replace(/:[^:]*$/gi,""):new Date(t).toLocaleString().replace(/:[^:]*$/gi,"")}}class Games{get platformFilterItems(){return Object.keys(a).reduce(((e,t)=>{const s={label:t,type:"group"},i=Object.keys(a[t]).reduce(((e,s)=>{const i={label:s,type:"checkbox",name:"filter-by-platform",checked:this.PLATFORMS_FILTER.includes(a[t][s]),onChange:`ui.games.platformCheckboxChangeEvent(this,${a[t][s]})`,id:`filter-by-platform-${a[t][s]}`};return e.push(i),e}),[]);return e=[...e,s,...i]}),[])}get awardsFilterItems(){return Object.keys(this.awardTypes).reduce(((e,t)=>{const s={label:this.awardTypes[t],name:"filter-by-award",checked:this.AWARD_FILTER.includes(t),onChange:`ui.games.awardCheckboxChangeEvent(this,"${t}")`,id:`filter-by-platform-${t}`};return e.push(s),e}),[])}get genresFilterItems(){return Object.keys(h).reduce(((e,t)=>{const s={label:h[t],name:"filter-by-genre",checked:this.GENRE_FILTER.includes(t),onChange:`ui.games.genreCheckboxChangeEvent(this,"${t}")`,id:`filter-by-genre-${t}`};return e.push(s),e}),[])}get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}set FAVOURITES(e){this._favs=e,m.ui.favouritesGames=e,m.writeConfiguration()}get FAVOURITES(){return this._favs??[]}set COOP_FILTER(e){m.ui.games_section.coopOnly=e,m.writeConfiguration(),this.updateGamesList()}get COOP_FILTER(){return m.ui.games_section?.coopOnly??!1}awardCheckboxChangeEvent(e,t){let s=this.AWARD_FILTER;e.checked?s.push(t):s=s.filter((e=>e!=t)),this.AWARD_FILTER=s}platformCheckboxChangeEvent(e,t){let s=this.PLATFORMS_FILTER;e.checked?s.push(t+""):s=s.filter((e=>e!=t)),this.PLATFORMS_FILTER=s}genreCheckboxChangeEvent(e,t){let s=this.GENRE_FILTER;e.checked?s.push(t):s=s.filter((e=>e!=t)),this.GENRE_FILTER=s}set PLATFORMS_FILTER(e){let t=e.filter((e=>Object.keys(d).includes(e)));m.ui.games_section.platformsFilter=t,m.writeConfiguration(),this.updateGamesList()}get PLATFORMS_FILTER(){return m.ui?.games_section?.platformsFilter??["7"]}set GENRE_FILTER(e){let t=e.filter((e=>Object.keys(h).includes(e)));m.ui.games_section.genreFilter=t,m.writeConfiguration(),this.updateGamesList()}get GENRE_FILTER(){return m.ui?.games_section?.genreFilter??[]}set AWARD_FILTER(e){m.ui.games_section.awardFilter=e,m.writeConfiguration(),this.updateGamesList()}get AWARD_FILTER(){return m.ui?.games_section?.awardFilter??[]}set FAVOURITES_FILTER(e){m.ui.games_section.favouritesFilter=e,m.writeConfiguration(),this.updateGamesList()}get FAVOURITES_FILTER(){return m.ui?.games_section?.favouritesFilter??!1}get TYPES_FILTER(){return m.ui?.games_section?.typesFilter??["original"]}set TYPES_FILTER(e){const t=e.dataset.type??"",s=this.TYPES_FILTER;if(e.checked)s.push(t);else{const e=s.indexOf(t);-1!==e&&s.splice(e,1)}m.ui.games_section.typesFilter=s,m.writeConfiguration(),this.applyFilter()}set REVERSE_SORT(e){m._cfg.ui.games_section.reverse_sort=e?-1:1,m.writeConfiguration(),this.updateGamesList()}get REVERSE_SORT(){return m._cfg.ui?.games_section?.reverse_sort??-1}get SORT_METHOD(){return UI.sortBy[this.SORT_NAME]}get SORT_NAME(){return m._cfg.ui?.games_section?.sort_name??UI.sortMethods.title}set SORT_NAME(e){e==this.SORT_NAME&&(m._cfg.ui.games_section.reverse_sort=-1*this.REVERSE_SORT),m._cfg.ui.games_section.sort_name=e,m.writeConfiguration(),this.updateGamesList()}titleFilter="";applyFilter(){const e=this.titleFilter.split(/\s/).map((e=>`(?=.*${e})`)).join(""),t=new RegExp(e,"gi");this.games=this.titleFilter?this.GAMES.filter((e=>`${e.FixedTitle} ${e.badges?.join(" ")} ${d[e.ConsoleID]}`.match(t))):this.GAMES,this.COOP_FILTER&&(this.games=this.games?.filter((e=>"true"==e.Coop))),this.PLATFORMS_FILTER.length>0&&(this.games=this.games?.filter((e=>{let t=!1;for(let s of this.PLATFORMS_FILTER)s==e.ConsoleID&&(t=!0);return t}))),this.GENRE_FILTER.length>0&&(this.games=this.games?.filter((e=>{let t=!1;for(let s of this.GENRE_FILTER)e?.Genres?.includes(+s)&&(t=!0);return t}))),this.FAVOURITES_FILTER&&(this.games=this.games.filter((e=>this.FAVOURITES.includes(e.ID)))),this.AWARD_FILTER.length>0&&(this.games=this.games.filter((e=>{let t=!1;for(let s of this.AWARD_FILTER)s==e.Award&&(t=!0);return t})))}applySort(){this.games=this.games.sort(((e,t)=>this.REVERSE_SORT*this.SORT_METHOD(e,t)))}platformCodes={};awardTypes={mastered:"mastered","beaten-hardcore":"beaten",completed:"completed","beaten-softcore":"beaten softcore",started:"started"};games={};gamesInfo={};constructor(){this._favs=m.ui.favouritesGames??[],this.initializeElements(),this.setValues(),this.addEvents(),this.gamesList.innerHTML='\n      <button class="games__load-button" onclick="ui.games.loadGames()"></button>\n      ',UI.applyPosition({widget:this})}initializeElements(){this.section=document.querySelector("#games_section"),this.widgetIcon=document.querySelector("#open-games-button"),this.header=this.section.querySelector(".header-container"),this.container=this.section.querySelector(".games_container"),this.searchbar=this.section.querySelector("#games__searchbar"),this.platformFiltersList=this.section.querySelector("#games_filter-platform-list"),this.gamesList=this.section.querySelector("#games-list"),this.resizer=this.section.querySelector(".resizer")}setValues(){this.section.querySelector("#games__favourites-filter").checked=this.FAVOURITES_FILTER,this.section.querySelector("#games__coop-filter").checked=this.COOP_FILTER}addEvents(){this.searchbar.addEventListener("input",(e=>{const t=this.searchbar.value;this.titleFilter=t,this.searchbar.classList.toggle("empty",""==t),this.updateGamesList()})),this.resizer.addEventListener("mousedown",(e=>{e.stopPropagation(),this.section.classList.add("resized"),UI.resizeEvent({event:e,section:this.section})})),this.header.addEventListener("mousedown",(e=>{UI.moveEvent(this.section,e)}))}updateGamesList(){this.applyFilter(),this.applySort(),this.gamesList.innerHTML=this.gamesListHeaderHtml(),function({list:e,items:t,callback:s}){const i=document.createElement("div");i.classList.add("lazy-load_trigger"),e.appendChild(i);let n=0;const a=40,o=i=>{for(let a=0;a<i&&n<t.length;a++)e.appendChild(s(t[n++]))};o(a);const r=(s,r)=>{s.forEach((s=>{s.isIntersecting&&(o(a),r.unobserve(i),e.appendChild(i),n<t.length&&r.observe(i))}))};new IntersectionObserver(r,{root:null,rootMargin:"0px",threshold:1}).observe(i)}({list:this.gamesList,items:this.games,callback:this.GameElement})}loadGames(){this.getAllGames().then((()=>{this.updateGamesList()})),this.loadGameInfo()}async loadGameInfo(){const e=await fetch("./json/games/all_info.json");this.gamesInfo=await e.json()}async getAllGames(){this.GAMES={};try{const e=await fetch("./json/games/all_ext.json"),t=await e.json(),s=await _.SAVED_COMPLETION_PROGRESS;for(let e of s.Results){let s=t.find((t=>e.ID===t.ID));s?(e.NumAwardedHardcore&&(s.NumAwardedHardcore=e.NumAwardedHardcore),e.HighestAwardKind?s.Award=e.HighestAwardKind:s.Award="started",e.MostRecentAwardedDate&&(s.MostRecentAwardedDate=e.MostRecentAwardedDate)):(s=e,s.ImageIcon=s.ImageIcon.match(/\d+/gi)[0],e.NumAwardedHardcore&&(s.NumAwardedHardcore=e.NumAwardedHardcore),e.HighestAwardKind?s.Award=e.HighestAwardKind:s.Award="started",s.Points="",t.push(s))}this.GAMES=t}catch(e){return[]}}GameElement(e){const t=document.createElement("li");t.classList.add("platform_game-item"),t.dataset.id=e.ID;const s=e.ImageIcon.match(/\d+/g);var i;return t.innerHTML=`    \n        \x3c!--<div class="game-preview_container">\n          <img src="./assets/imgCache/${s}.webp"\n              onerror="this.src='https://media.retroachievements.org/Images/${e.ImageIcon}.png';" alt=""\n              class="game-preview_image">\n        </div>--\x3e\n        <h3 class="game-description_title">\n          <button title="open game" class="game-description_button"\n                onclick="ui.games.showGameInfoPopup(${e.ID})">\n                ${e.FixedTitle} \n                ${e.badges?.length>0?c(e.badges):""} \n                ${"true"===e.Coop?c(["coop"]):""} \n                ${e.Genres?(i=e.Genres,i?.reduce(((e,t)=>e+`<i class="badge game-title_genre">${h[t]}</i> `),"")):""}            \n          \n          </button>           \n        </h3>      \n        <p title="${e.Award??""}" class="game-description  award-type">\n          ${e.Award?`<i class="description-icon award-type__icon ${e.Award}_icon"></i>`:""}\n        </p>\n        <button class="favourites-button game-description icon-button games__icon-button ${p.games.FAVOURITES.includes(e.ID)?"checked":""}" onclick="ui.games.addToFavourite(event,${e.ID})">\n          <i class="description-icon favourite_icon"></i>\n        </button>\n        <p title="Rating" class="game-description  game-rating">\n          ${e.Rating?e.Rating:"n/a"}\n        </p>\n              <p title="Date" class="game-description  game-date">\n          ${e.Date?e.Date:"n/a"}\n        </p>\n        <p title="achievements count" class="game-description  achievements-count">\n          ${d[e.ConsoleID].match(/[^\/]*/gi)[0]}\n        </p>\n        <p title="achievements count" class="game-description  achievements-count">\n        ${e.NumAwardedHardcore?e.NumAwardedHardcore+"/":""}${e.NumAchievements}\n        </p>\n        <p title="points count" class="game-description  points-count">\n        ${e.Points}\n        </p>\n  \n        <p class="game-description game-description__links">\n          <button class=" game-description_link" onclick="ui.getAchievements(${e.ID})"> \n                <i class="description-icon link_icon apply-icon"></i>\n          </button>\n            <a title="google search" target="_blanc" \n              href="https://google.com/search?q='${e?.FixedTitle}' '${d[e?.ConsoleID]}' ${o}"\n              class="game-description game-description_link">\n              <i class="description-icon link_icon search-icon google_link"></i>\n            </a> \n            <a title="go to RA" target="_blanc" href="https://retroachievements.org/game/${e.ID}"\n                class="game-description game-description_link">\n                <i class="description-icon link_icon ra-link_icon"></i>\n            </a>\n        </p>   \n      `,t}gamesListHeaderHtml=()=>`\n      <div class="platform_game-item header">\n        \x3c!--<div class="game-preview_container">\n        </div>--\x3e\n        <h3 class="header__game-description game-description_title ${"title"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n          onclick="ui.games.SORT_NAME = 'title'">Title\n        </h3>\n        <p title="award type" class="header__game-description ${"award"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}" onclick="ui.games.SORT_NAME = 'award'">\n          <i class="description-icon award_icon"></i>\n        </p>\n        <div class="header__game-description"><i class="description-icon favourite_icon checked"></i></div>\n        <p title="Rating" class="game-description header__game-description  game-rating ${"rating"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n          onclick="ui.games.SORT_NAME = 'rating'">\n            Rating\n        </p>\n        <p title="Date" class="game-description header__game-description  game-date ${"date"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n          onclick="ui.games.SORT_NAME = 'date'">\n            Date\n        </p>\n        <p title="achievements count" class=" game-description  achievements-count"\n          >\n            Platform\n        </p>\n        <p title="achievements count" class="header__game-description game-description  achievements-count ${"achievementsCount"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n            onclick="ui.games.SORT_NAME ='achievementsCount'">\n              Cheevos\n          </p>\n        <p title="points count" class="header__game-description game-description  points-count ${"points"==this.SORT_NAME?-1==this.REVERSE_SORT?"active reverse":"active":""}"\n            onclick="ui.games.SORT_NAME = 'points'">\n              Points\n          </p>\n  \n          <p title="" class="game-description">Links</p>\n        </div>\n    `;addToFavourite(e,t){const s=this.FAVOURITES.includes(t);this.FAVOURITES=s?this.FAVOURITES.filter((e=>e!=t)):[t,...this.FAVOURITES],e.target.closest("button").classList.toggle("checked",!s)}toggleFilterList(e,t){const s=()=>{this.section.querySelector(".games__filters-list")?.remove(),this.section.querySelectorAll(".games__filter-header .extended").forEach((e=>e.classList.remove("extended")))},i=e.target.closest("button");if(i.classList.contains("extended"))s();else{let e;switch(s(),i.classList.add("extended"),t){case"platform":e=this.generateFiltersList(this.platformFilterItems);break;case"award":e=this.generateFiltersList(this.awardsFilterItems);break;case"genre":e=this.generateFiltersList(this.genresFilterItems)}this.section.append(e),this.section.querySelector(".games__filter-container").appendChild(e)}}generateFiltersList(e){const t=Object.values(e).reduce(((e,t)=>{if("group"==t.type){const s=document.createElement("li");s.classList.add("filter-list__platform-header"),s.innerText=t.label+": ",e.appendChild(s)}else{const s=t.checked,i=document.createElement("li");i.classList.add("checkbox-input_container"),i.innerHTML=`\n            <input ${s?"checked":""} onchange='${t.onChange}' type="checkbox"   name="${t.name}" id="${t.id}" ></input>\n            <label class=" checkbox-input" for="${t.id}">${t.label}</label>\n          `,e.appendChild(i)}return e}),document.createElement("ul"));return t.classList.add("games__filters-list"),t}async showGameInfoPopup(e=1){document.querySelectorAll(".game-popup__section").forEach((e=>e.remove()));const t=document.createElement("section"),s=await _.getGameProgress({gameID:e});t.innerHTML=`\n      <section class="section game-popup__section">\n          <div class="game-popup__header-container header-container">\n              <h2 class="widget-header-text"><a href="https://retroachievements.org/game/${s.ID}" target="_blank">${s.FixedTitle} ${c(s.badges)}</a></h2>\n              <button class="header-button header-icon close-icon" onclick="this.closest('section').remove();">\n                  \n              </button>\n          </div>\n          <div class="game-info__container">\n              <div class="game-info__images-container">\n                  <img src="https://media.retroachievements.org${s.ImageBoxArt}" alt="" class="game__image">\n                  <img src="https://media.retroachievements.org${s.ImageIngame}" alt="" class="game__image">\n                  <img src="https://media.retroachievements.org${s.ImageTitle}" alt="" class="game__image">\n  \n              </div>\n              <div class="game-info__descriptions-container">\n                  <div class="game-description__property">Platform: <span>${s?.ConsoleName}</span></div>\n                  <div class="game-description__property">Developer: <span>${s?.Developer} Soft</span></div>\n                  <div class="game-description__property">Genre: <span>${s?.Genre}</span></div>\n                  <div class="game-description__property">Publisher: <span>${s?.Publisher} Soft</span></div>\n                  <div class="game-description__property">Released: <span>${s?.Released}</span></div>\n                  <div class="game-description__property">Achievements total : <span>${s?.NumAwardedToUserHardcore} / ${s?.NumAwardedToUser} / ${s?.NumAchievements}</span>\n                  </div>\n                  <div class="game-description__property">Total retropoints : <span>\n                  ${s?.earnedStats.hard.retropoints} / ${s?.TotalRetropoints}</span></div>\n                  <div class="game-description__property">Total points : <span>\n                    ${s?.earnedStats.hard.points} / ${s?.earnedStats.soft.points} / ${s?.points_total}</span></div>\n                  <div class="game-description__property">Total players : <span>${s?.masteredCount} / ${s?.beatenCount} / ${s?.players_total}</span></div>\n                  <div class="game-description__property">Completion : <span>${s?.masteryRate}% / ${s?.beatenRate}%</span></div>\n                  <div class="game-description__property">RetroRatio : <span>${s?.retroRatio}</span></div>\n                  \n              </div>\n              <div class="game-info__cheevos-container">\n  \n              </div>\n          </div>\n      </section>\n      `,p.app.appendChild(t)}toggleFullscreen(){this.section.classList.toggle("fullscreen")}}const a={SEGA:{"SG-1000":"33","Master System":"11","Genesis/Mega Drive":"1","Game Gear":"15","Sega CD":"9","32X":"10",Saturn:"39",Dreamcast:"40"},Nintendo:{"NES/Famicom":"7","Game Boy":"4","SNES/Super Famicom":"3","Game Boy Color":"6","Nintendo 64":"2","Game Cube":"16","Game Boy Advance":"5","Virtual Boy":"28","Nintendo DS":"18","Nintendo DSi":"78","Pokemon Mini":"24"},NEC:{"PC Engine/TurboGrafx-16":"8","PC Engine CD/TurboGrafx-CD":"76","PC-8000/8800":"47","PC-FX":"49"},SONY:{PlayStation:"12","PlayStation 2":"21","PlayStation Portable":"41"},SNK:{"Neo Geo Pocket":"14","Neo Geo CD":"56"},Atari:{"Atari 2600":"25","Atari 7800":"51","Atari Lynx":"13","Atari Jaguar":"17","Atari Jaguar CD":"77"},Other:{"Magnavox Odyssey 2":"23",Arcade:"27","Apple II":"38","Amstrad CPC":"37",MSX:"29","3DO Interactive Multiplayer":"43",ColecoVision:"44",Intellivision:"45",Vectrex:"46",WonderSwan:"53","Fairchild Channel F":"57","Watara Supervision":"63","Mega Duck":"69",Arduboy:"71","WASM-4":"72","Arcadia 2001":"73","Interton VC 4000":"74","Elektor TV Games Computer":"75",Uzebox:"80"},Special:{Events:"101",Standalone:"102"}},o="site:www.romhacking.net OR site:wowroms.com/en/roms OR site:cdromance.org OR site:coolrom.com.au/roms OR site:planetemu.net OR site:emulatorgames.net OR site:romsfun.com/roms OR site:emu-land.net/en";class Aotw{get VISIBLE(){return!this.section.classList.contains("hidden")}set VISIBLE(e){UI.switchSectionVisibility({section:this.section,visible:e}),this.widgetIcon&&(this.widgetIcon.checked=e)}aotwObj;autoremove;constructor(){this.generateAotwElement().then((()=>{this.initializeElements(),this.addEvents(),p.target.showAotwEvent({cheevo:this.aotwObj})}))}initializeElements(){this.section=document.querySelector(".aotw_section")}addEvents(){this.section.addEventListener("mouseover",(()=>this.stopAutoRemove()))}setValues(){UI.switchSectionVisibility({section:this.section,visible:!0})}stopAutoRemove(){this.autoremove&&clearTimeout(this.autoremove)}doAnim(){this.section.classList.remove("show-aotw","hide-aotw","disposed"),setTimeout((()=>this.section.classList.add("show-aotw")),100),this.autoremove=setTimeout((()=>this.section.classList.add("hide-aotw")),1e4)}addGlowEffectToCard(e){var t=e.querySelector(".marker");let s;function i(s){var i=s.offsetX,n=s.offsetY,a=e.offsetHeight,o=e.offsetWidth,r=Math.abs(Math.floor(100/o*i)-100),c=Math.abs(Math.floor(100/a*n)-100);t.style.backgroundPosition=`${r}% ${c}%`}e.addEventListener("mouseenter",(e=>{s=t.getBoundingClientRect(),t.classList.remove("hidden"),t.addEventListener("mousemove",(e=>{i(e)}))})),e.addEventListener("mouseleave",(s=>{e.style.transform="",e.style.background="",t.classList.add("hidden"),e.removeEventListener("mousemove",(e=>i(e)))}))}checkCheevo({earnedAchievementIDs:e}){e?.forEach((e=>{e==this.aotwObj.ID&&(p.ACHIEVEMENTS[e].isEarned&&(this.section.classList.add("earned"),this.aotwObj.isEarned=!0,this.doAnim()),p.ACHIEVEMENTS[e].isHardcoreEarned&&(this.section.classList.add("earned","hardcore"),this.aotwObj.isEarnedHardcore=!0),m.aotw=this.aotwObj)}))}async getAotwObject(){if(!m.aotw){const e=await _.getAotW();m.aotw=e}return this.aotwObj=m.aotw,this.aotwObj}showGameInfo(){p.games.showGameInfoPopup(this.aotwObj.GameID)}async generateAotwElement(){const e=await this.getAotwObject(),t=document.createElement("section");t.classList.add("section","aotw_section","disposed","compact"),t.classList.toggle("earned",e.isEarned),t.classList.toggle("hardcore",e.isEarnedHardcore),t.id="aotw_section",t.innerHTML=`\n        <div class="header-container">\n            <div class="header-icon">\n                <svg xmlns="http://www.w3.org/2000/svg" height="24" viewBox="0 -960 960 960" width="24">\n                    <path\n                        d="M424-320q0-81 14.5-116.5T500-514q41-36 62.5-62.5T584-637q0-41-27.5-68T480-732q-51 0-77.5 31T365-638l-103-44q21-64 77-111t141-47q105 0 161.5 58.5T698-641q0 50-21.5 85.5T609-475q-49 47-59.5 71.5T539-320H424Zm56 240q-33 0-56.5-23.5T400-160q0-33 23.5-56.5T480-240q33 0 56.5 23.5T560-160q0 33-23.5 56.5T480-80Z">\n                    </path>\n                </svg>\n            </div>\n  \n            <h2 class="widget-header-text">\n            <a class="" target="_blanc"\n                        href="https://retroachievements.org/achievement/${e.ID}">\n            AotW</a></h2>\n            <button class="header-button header-icon" onclick="ui.aotw.showGameInfo()">\n                <svg xmlns="http://www.w3.org/2000/svg" height="24px" viewBox="0 -960 960 960" width="24px" fill="#e8eaed"><path d="M440-280h80v-240h-80v240Zm40-320q17 0 28.5-11.5T520-640q0-17-11.5-28.5T480-680q-17 0-28.5 11.5T440-640q0 17 11.5 28.5T480-600Zm0 520q-83 0-156-31.5T197-197q-54-54-85.5-127T80-480q0-83 31.5-156T197-763q54-54 127-85.5T480-880q83 0 156 31.5T763-763q54 54 85.5 127T880-480q0 83-31.5 156T763-197q-54 54-127 85.5T480-80Zm0-80q134 0 227-93t93-227q0-134-93-227t-227-93q-134 0-227 93t-93 227q0 134 93 227t227 93Zm0-320Z"/></svg>\n            </button>\n            <div class="header-button header-icon" onclick="event.target.closest('section').classList.add('hide-aotw')">\n                <svg height="24" viewBox="0 -960 960 960" width="24">\n                    <path\n                        d="m256-200-56-56 224-224-224-224 56-56 224 224 224-224 56 56-224 224 224 224-56 56-224-224-224 224Z">\n                    </path>\n                </svg>\n            </div>\n        </div>\n        <div class="aotw-card" data-id="4800">\n            <div class="aotw-backside aotw-side"></div>\n            <div class="aotw__container aotw-side">\n                <div class="progression_descriptions aotw_descriptions">\n                    <p class="progression-description-text" title="points">\n                      <i class="progression_description-icon description-icon points-icon"></i>\n                      ${e.Points}\n                    </p>\n                    <p class="progression-description-text" title="points">\n                      <i class="progression_description-icon description-icon retropoints-icon"></i>\n                      ${e.TrueRatio}\n                    </p>\n                    <p class="progression-description-text" title="earned by">\n                      <i class="progression_description-icon description-icon trending-icon"></i>\n                      ${(100*e.UnlocksHardcoreCount/e.TotalPlayers).toFixed(2)}%\n                    </p>\n                    <p class="progression-description-text" title="earned by"> \n                      <i class="progression_description-icon description-icon rarity-icon"></i>\n                      ${(e.TrueRatio/e.Points).toFixed(2)}\n                    </p>\n                    ${e.Type?`\n                      <div class="progression_description-icon condition ${e.Type}" title="achievement type">\n                      </div>`:""}\n                </div>\n                <div class="progression-achiv_prev-container">\n                    <img class="progression-achiv_prev-img" src="https://media.retroachievements.org/${e.BadgeURL}"\n                        alt=" ">\n                </div>\n                <h3 class="progression_achiv-name">\n                    <a class="progression_achiv-link" target="_blanc"\n                        href="https://retroachievements.org/achievement/${e.ID}">${e.Title}</a>\n                </h3>\n                <div class="progression-details">\n                ${e.Description}\n                </div>\n  \n                <div class="marker hidden"></div>\n            </div>\n          \n        </div>\n      `,p.app.appendChild(t)}}class UI{VERSION="0.49";RECENT_ACHIVES_RANGE_MINUTES=Math.max(5*m.updateDelay/60,5);CHECK_FOR_ONLINE_DELAY_MS=6e4;CHECK_FOR_ONLINE_AFTER_SILENCE_MS=18e4;IS_WATCHING=!1;CURRENT_LEVEL;RP_DATA={text:"",lastChange:""};IS_ONLINE=!0;static AUTOCLOSE_CONTEXTMENU=!1;static STICK_MARGIN=10;get ACHIEVEMENTS(){return this.GAME_DATA.Achievements}get GAME_DATA(){return this._gameData}set GAME_DATA(e){const t=this.GAME_DATA&&e.ID!=this.GAME_DATA?.ID;this._gameData=e,this.statusPanel.gameChangeEvent(t),this.achievementsBlock.forEach((e=>e?.parseGameAchievements(this.GAME_DATA))),this.gameCard?.updateGameCardInfo(this.GAME_DATA),this.target.gameChangeEvent(),this.progression?.fillCards(),this.note?.updateGame(),t&&this.notifications?.pushNotification({type:this.notifications.types.newGame,elements:e})}constructor(){this.initUI()}async initUI(){await async function(){if("/test.html"===window.location.pathname)try{for(const e in i){const t=i[e],s=await fetch(t);if(!s.ok)throw new Error(`Failed to fetch section: ${t}`);const n=await s.text(),a=document.createElement("div");a.innerHTML=n,document.querySelector(".wrapper").appendChild(a)}}catch(e){console.error("Error loading sections:",e)}}();const e=m.ui?.local??"en",t=await fetch(`./json/lang/${e}.json`);this.lang=await t.json(),this.initializeElements(),this.addEvents(),UI.updateColors(),document.querySelector("#background-animation").style.display=m.bgVisibility?"block":"none",m.identConfirmed&&!UI.isTest&&(m.startOnLoad?this.statusPanel.watchButton.click():this.getAchievements(await this.getLastGameID()),setTimeout((()=>{_.getUserSummary({}).then((e=>{this.userInfo?.update({userSummary:e}),this.stats?.initialSetStats({userSummary:e})}))}),3e3)),setTimeout((()=>document.querySelector(".loading-section").classList.add("hidden")),1e3)}initializeElements(){this.app=document.querySelector(".wrapper"),this.target=new Target,this.achievementsBlock=[new AchievementsBlock],this.createAchievementsTemplate(),this.settings=new Settings,this.awards=new Awards,this.gameCard=new GameCard,this.statusPanel=new StatusPanel,this.games=new Games,this.progression=new Progression,this.note=new Note,this.notifications=new Notifications,this.stats=new UserStatistic,this.buttons=new SidePanel,this.aotw=new Aotw}static applyPosition({widget:e}){const t=e.section.id;if(m.ui[t]){const{x:s,y:i,width:n,height:a,hidden:o}=m.ui[t];s&&(e.section.style.left=s),i&&(e.section.style.top=i),n&&(e.section.style.width=n),a&&(e.section.style.height=a);(o??!0)&&e.section.classList.add("hidden","disposed")}else e.section.classList.add("hidden","disposed");e.widgetIcon&&(e.widgetIcon.checked=!1===m.ui?.[e.section?.id]?.hidden??!e.VISIBLE)}addEvents(){document.addEventListener("click",(()=>{document.querySelectorAll(".context-menu").forEach((e=>e.remove()))})),document.body.addEventListener("contextmenu",(e=>{this.showContextmenu({event:e,menuItems:this.settings.contextMenuItems})}))}updateWidgets({earnedAchievementsIDs:e}){this.achievementsBlock.forEach((t=>t.updateEarnedAchieves({earnedAchievementIDs:e}))),this.target.updateEarnedAchieves({earnedAchievementIDs:e}),this.target.delayedRemove(),this.awards.VISIBLE&&this.awards.updateAwards(),this.progression.updateEarnedCards({gameIDArray:e}),this.statusPanel.updateProgress({earnedAchievementIDs:e}),(this.userInfo?.VISIBLE||this.stats?.VISIBLE)&&setTimeout((async()=>{const e=await _.getUserSummary({gamesCount:3,achievesCount:5});p.stats.updateStats({currentUserSummary:e}),p.userInfo?.update({userSummary:e})}),12e3);try{this.addAlerts({earnedAchievementIDs:e}),this.aotw?.checkCheevo({earnedAchievementIDs:e})}catch(e){console.log(e)}}showContextmenu({event:e,menuItems:t,sectionCode:s=""}){e.preventDefault(),e.stopPropagation(),document.querySelector(".context-menu")?.remove(),this.contextMenu=UI.generateContextMenu({menuItems:t,sectionCode:s}),this.app.appendChild(this.contextMenu),(()=>{this.contextMenu.style.left=e.x+"px",this.contextMenu.style.top=e.y+"px",window.innerWidth-e.x<3*this.contextMenu.offsetWidth&&this.contextMenu.classList.add("to-left"),window.innerHeight-e.y<2*this.contextMenu.offsetHeight&&this.contextMenu.classList.add("to-top")})(),this.contextMenu.classList.remove("hidden")}createAchievementsTemplate(){2===this.achievementsBlock.length?UI.switchSectionVisibility(this.achievementsBlock[1]):(this.achievementsBlock.push(new AchievementsBlock(!0)),this.GAME_DATA&&this.achievementsBlock.at(-1).parseGameAchievements(this.GAME_DATA))}checkForNewAchieves(e){let t=[];e.forEach((e=>{const s=this.ACHIEVEMENTS[e.AchievementID];if(s){const i=1===e.HardcoreMode&&!s?.isHardcoreEarned;(!s.isEarned||i)&&t.push(e)}})),(e=>{e.forEach((e=>{const{HardcoreMode:t,Date:s}=e,i=this.ACHIEVEMENTS[e.AchievementID];1==t&&(i.isHardcoreEarned=!0,i.DateEarnedHardcore=s,this.GAME_DATA.earnedStats.hard.count++,this.GAME_DATA.earnedStats.hard.points+=i.Points,this.GAME_DATA.earnedStats.hard.retropoints+=i.TrueRatio,"progression"!=i.type&&"win_condition"!=i.type||this.GAME_DATA.earnedStats.hard.progressionCount++),this.GAME_DATA.earnedStats.soft.count++,this.GAME_DATA.earnedStats.soft.points+=i.Points,"progression"!=i.type&&"win_condition"!=i.type||this.GAME_DATA.earnedStats.soft.progressionCount++,i.isEarned=!0,i.DateEarned=i.DateEarned??s,this.ACHIEVEMENTS[e.AchievementID]=i})),this.userInfo?.pushAchievements({achievements:e}),this.notifications.pushNotification({type:this.notifications.types.earnedAchivs,elements:e})})(t);const s=t?.map((e=>e.AchievementID));this.updateWidgets({earnedAchievementsIDs:s})}addAlerts({earnedAchievementIDs:e=[]}){if(e.length){const t=()=>{let e;return"mastered"!==this.GAME_DATA.award&&this.GAME_DATA.earnedStats.hard.count===this.GAME_DATA.NumAchievements?(this.GAME_DATA.award="mastered",e={type:"new-award",award:"mastered",value:this.GAME_DATA}):this.GAME_DATA.award||this.GAME_DATA.earnedStats.soft.count!==this.GAME_DATA.NumAchievements||(this.GAME_DATA.award="completed",e={type:"new-award",award:"completed",value:this.GAME_DATA}),this.GAME_DATA.progressionSteps>0&&"beaten"!==this.GAME_DATA.progressionAward&&this.GAME_DATA.earnedStats.hard.progressionCount>=this.GAME_DATA.progressionSteps?(this.GAME_DATA.progressionAward="beaten",e={type:"new-award",award:"beaten",value:this.GAME_DATA}):this.GAME_DATA.progressionSteps>0&&!this.GAME_DATA.progressionAward&&this.GAME_DATA.earnedStats.soft.progressionCount>=this.GAME_DATA.progressionSteps&&(this.GAME_DATA.progressionAward="beaten-softcore",e={type:"new-award",award:"beaten-softcore",value:this.GAME_DATA}),e},s=e.map((e=>({type:"new-achiv",value:p.ACHIEVEMENTS[e]}))),i=t();if(this.settings.DISCORD_NEW_CHEEVO)for(let t of e)this.sendDiscordMessage({type:"earned-cheevo",id:t});i&&this.settings.DISCORD_NEW_AWARD&&this.sendDiscordMessage({message:i.award,type:"award",id:m.gameID}),i&&(s.push(i),setTimeout((()=>p.stats.updateChart()),4e3)),this.statusPanel.addAlertsToQuery([...s])}}async getLastGameID(){const e=Object.values(await _.getRecentlyPlayedGames({count:1}))[0]?.ID;return m.gameID=e,e}async getAchievements(e){try{const t=await _.getGameProgress({gameID:e});this.GAME_DATA=t,this.statusPanel.watchButton.classList.remove("error")}catch(e){this.statusPanel.watchButton.classList.add("error"),this.stopWatching(),console.error(e)}}apiTrackerInterval;async updateAchievements(){try{const e=await _.getRecentAchieves({minutes:p.RECENT_ACHIVES_RANGE_MINUTES});this.checkForNewAchieves(e)}catch(e){console.error(e)}}startWatching(){this.statusPanel?.watchButton?.classList.add("active"),this.checkUpdates(!0),p.IS_WATCHING=!0,this.apiTrackerInterval=setInterval((()=>{this.statusPanel.blinkUpdate(),this.checkUpdates()}),m.updateDelayInMiliSecs)}totalPoints=0;softcorePoints=0;async checkUpdates(e=!1){if(!e&&!this.IS_ONLINE)return;const t=await _.getProfileInfo({});(t.LastGameID!=m.gameID||e)&&(m.gameID=t.LastGameID,await this.getAchievements(),this.userInfo?.pushNewGame({game:p.GAME_DATA}),(this.settings.DISCORD_NEW_GAME||e&&this.settings.DISCORD_START_SESSION)&&p.sendDiscordMessage({type:"new-game"}),e&&(this.totalPoints=t.TotalPoints,this.softcorePoints=t.TotalSoftcorePoints,this.userInfo?.updatePoints({points:t}))),t.TotalPoints==this.totalPoints&&t.TotalSoftcorePoints==this.softcorePoints||(this.totalPoints=t.TotalPoints,this.softcorePoints=t.TotalSoftcorePoints,this.updateAchievements(),this.userInfo?.updatePoints({points:t}),this.RP_DATA.lastChange=new Date);const s=t.RichPresenceMsg;this.statusPanel.richPresence.innerText=s;const i=l(s);this.CURRENT_LEVEL=i,i&&(this.target.highlightCurrentLevel(i),this.achievementsBlock.forEach((e=>e.highlightCurrentLevel(i))),this.statusPanel.highlightCurrentLevel(i)),s!==this.RP_DATA.text?(this.RP_DATA.lastChange=new Date,this.RP_DATA.text=t.RichPresenceMsg,this.IS_ONLINE=!0):!e&&this.RP_DATA.lastChange&&new Date-this.RP_DATA.lastChange>this.CHECK_FOR_ONLINE_AFTER_SILENCE_MS&&await this.checkForOnline()}async checkForOnline(){const e=(e=>{!/(\+00\:00$)|(z$)/gi.test(e)&&(e+="+00:00");return new Date(e)})((await _.getRecentlyPlayedGames({count:1}))[0].LastPlayed);if(new Date-e>18e4){if(this.IS_ONLINE=!1,console.log("checkOnline"),!this.IS_WATCHING)return;setTimeout((()=>this.checkForOnline()),this.CHECK_FOR_ONLINE_DELAY_MS)}else this.RP_DATA.lastChange=new Date,!this.IS_ONLINE&&(this.IS_ONLINE=!0,this.checkUpdates()),this.IS_ONLINE=!0}async sendDiscordMessage({message:e="",type:t,id:s}){const i={},n=m.DISCORD_WEBHOOK;if(!n)return;switch(t){case"new-game":i.header=`${m.targetUser} has launched the game: \n${p.GAME_DATA.Title}`,i.description=`          \n          Platform: ${p.GAME_DATA.ConsoleName}\n          Realeased: ${p.GAME_DATA.Released}\n          Achievements: ${p.GAME_DATA.NumAwardedToUserHardcore} / ${p.GAME_DATA.NumAchievements}\n          Retropoints:  ${p.GAME_DATA.earnedStats.hard.retropoints} / ${p.GAME_DATA.TotalRetropoints}\n        `,i.color=65280,i.url=`https://retroachievements.org/game/${m.gameID}`,i.image="https://media.retroachievements.org"+p.GAME_DATA.ImageIcon;break;case"award":await r(2e3),i.header=`${m.targetUser} has ${e.toUpperCase()} the game: \n${p.GAME_DATA.Title}`,i.description=`\n          Platform: ${p.GAME_DATA.ConsoleName}\n          Realeased: ${p.GAME_DATA.Released}\n          Achievements: ${p.GAME_DATA.NumAwardedToUserHardcore} / ${p.GAME_DATA.NumAchievements}\n          Retropoints:  ${p.GAME_DATA.earnedStats.hard.retropoints} / ${p.GAME_DATA.TotalRetropoints}\n        `,i.color="beaten"==e||"mastered"==e?16766720:12632256,i.url=`https://retroachievements.org/game/${m.gameID}`,i.image="https://media.retroachievements.org"+p.GAME_DATA.ImageIcon;break;case"earned-cheevo":const t=m.aotw?.ID==s;i.header=`${m.targetUser}  earned ${p.ACHIEVEMENTS[s].isHardcoreEarned?"hardcore":"softcore"} ${t?"Achievement of the Week":"cheevo"}: \n${p.ACHIEVEMENTS[s].Title}`,i.description=`\n          Game: [${p.GAME_DATA.Title}](https://retroachievements.org/game/${p.GAME_DATA.ID})\n          Description: ${p.ACHIEVEMENTS[s].Description}\n          Points: ${p.ACHIEVEMENTS[s].Points}\n          Retropoints:  ${p.ACHIEVEMENTS[s].TrueRatio}\n        `,i.color=p.ACHIEVEMENTS[s].isHardcoreEarned?16766720:12632256,i.url=`https://retroachievements.org/achievement/${s}`,i.image=p.ACHIEVEMENTS[s].prevSrc}const a={username:"RETROCHEEVOS",avatar_url:"https://taras240.github.io/retro-api/assets/img/overlay_sets/mario_q/q.png",embeds:[{thumbnail:{url:i.image},title:i.header,url:i.url,color:i.color,description:i.description.replace(/\n[ \t]*/g,"\n"),footer:{text:"retrocheevos.vercel.app"},timestamp:(new Date).toISOString()}]};fetch(n,{body:JSON.stringify(a),headers:{"Content-Type":"application/json"},method:"POST"}).then((function(e){})).catch((function(e){console.log(e)}))}stopWatching(){p.IS_WATCHING=!1,this.statusPanel.watchButton.classList.remove("active"),clearInterval(p.apiTrackerInterval)}static applySort({container:e,itemClassName:t,sortMethod:s,reverse:i}){const n=[...e.querySelectorAll(t)];e.innerHTML="",n.sort(((e,t)=>s(e.dataset,t.dataset)*i)).forEach((t=>{e.appendChild(t)}))}static applyFilter({container:e,itemClassName:t,filterMethod:s,reverse:i,isHide:n}){[...e.querySelectorAll(t)].forEach((e=>{e.classList.remove("removed","hidden"),e.classList.toggle(n?"removed":"hidden",!s(e.dataset)^i)}))}static generateContextMenu({menuItems:e,sectionCode:t="",isSubmenu:s=!1}){const i=document.createElement("ul");return s?i.classList.add("context-menu_item-menu","context-submenu"):i.classList.add("achievement_context-menu","context-menu","hidden"),e.forEach((e=>{const s=e.hasOwnProperty("elements");let n=document.createElement("li");if(n.classList.add("context-menu_item",s?"expandable":"f"),s)n.innerHTML+=e.label,n.appendChild(UI.generateContextMenu({menuItems:e.elements,isSubmenu:!0,sectionCode:t}));else switch(e.type){case"checkbox":case"radio":n.innerHTML+=`\n            <input type="${e.type}" name="${e.name}${t}" id="${e.id}${t}" \n             ${1==e.checked?"checked":""} ${e.event??""}></input>\n            <label class="context-menu_${e.type}" for="${e.id}${t}">${e.label}</label>\n            `;break;case"input-number":n.innerHTML+=`\n            ${e.prefix}\n            <input class="context-menu_${e.type}" id="${e.id}-${t}" type="number" title="${e.title}" value="${e.value??""}" ${e.event??""} onclick="event.stopPropagation()">${e.postfix??""} </input>\n            `;break;case"text-input":n.innerHTML+=`\n              ${e.prefix}\n              <input class="context-menu_${e.type}" id="${e.id}-${t}"  ${e.event??""} title="${e.title}" type="text" placeholder="${e.placeholder??""}"  onclick="event.stopPropagation()">${e.postfix??""}</input>\n              `;break;case"range":n.innerHTML+=`\n              ${e.prefix}\n              <input type="range"  ${e.event??""} min="${e.minRange}" max="${e.maxRange}" value="${e.value}" class="slider" id="${e.id}-${t}">\n            `;break;case"button":n.innerHTML+=`\n              <button class="context-menu_${e.type}" id="${e.id}-${t}" ${e.event??""} type="button">${e.label??""}</button>\n              `}i.appendChild(n)})),i.addEventListener("contextmenu",(e=>e.stopPropagation())),i.addEventListener("mousedown",(e=>e.stopPropagation())),UI.AUTOCLOSE_CONTEXTMENU||i.addEventListener("click",(e=>e.stopPropagation())),i}static updateColors(e){const{style:t}=document.body,{mainColor:s,secondaryColor:i,accentColor:n,fontColor:a,selectionColor:o}=m.getColors(e||m.colorsPreset);t.setProperty("--main-color",s),t.setProperty("--secondary-color",i),t.setProperty("--accent-color",n),t.setProperty("--font-color",a),t.setProperty("--selection-color",o)}static resizeEvent({event:e,section:t,callback:s}){let i={startWidth:t.clientWidth,startHeight:t.clientHeight,startX:e.clientX,startY:e.clientY};const n=e=>{UI.setSize(e,i,t),s&&s()};document.addEventListener("mousemove",n),document.addEventListener("mouseup",(()=>{document.removeEventListener("mousemove",n),t.classList.remove("resized"),m.setNewPosition({id:t.id,width:t.clientWidth,height:t.clientHeight})}))}static setSize(e,t,s){const{startWidth:i,startHeight:n,startX:a,startY:o}=t;let r=i+(e.clientX-a),c=n+(e.clientY-o),{newHeight:l,newWidth:d}=UI.stickResizingSection({width:r,height:c,stickySection:s});s.style.width=`${d}px`,s.style.height=`${l}px`}static stickResizingSection({width:e,height:t,stickySection:s}){const{offsetTop:i,offsetLeft:n}=s;let a=e,o=t;const r=10,c=[{check:e=>Math.abs(i+t-e.offsetTop-e.clientHeight)<r,action:e=>o=e.offsetTop+e.clientHeight-i},{check:e=>Math.abs(i+t-e.offsetTop)<r,action:e=>o=e.offsetTop-i-5},{check:t=>Math.abs(n+e-t.offsetLeft-t.clientWidth)<r,action:e=>a=e.offsetLeft+e.clientWidth-n},{check:t=>Math.abs(n+e-t.offsetLeft)<r,action:e=>a=e.offsetLeft-n-5}];return document.querySelectorAll(".section").forEach((e=>{s!=e&&c.forEach((({check:t,action:s})=>t(e)&&s(e)))})),a=Math.abs(window.innerWidth-n-a)<r?window.innerWidth-n:a,o=Math.abs(window.innerHeight-o-i)<r?window.innerHeight-i:o,{newWidth:a,newHeight:o}}static moveEvent(e,t){e.classList.add("dragable");const s=e.getBoundingClientRect(),i=t.clientX-s.left,n=t.clientY-s.top,a=t=>UI.setPosition(t,i,n,e),o=t=>{e.classList.remove("dragable"),p.app.removeEventListener("mousemove",a),p.app.removeEventListener("mouseup",o),e.removeEventListener("mouseleave",o),m.setNewPosition({id:e.id,xPos:e.style.left,yPos:e.style.top}),t.preventDefault()};p.app.addEventListener("mousemove",a),p.app.addEventListener("mouseup",o)}static stickMovingSection({x:e,y:t,stickySection:s}){const{clientHeight:i,clientWidth:n}=s;let a=t,o=e;const r=10,c=[{check:e=>Math.abs(t+i-e.offsetTop-e.clientHeight)<r,action:e=>a=e.offsetTop+e.clientHeight-i},{check:e=>Math.abs(t-e.offsetTop)<r,action:e=>a=e.offsetTop},{check:e=>Math.abs(t-e.offsetTop-e.clientHeight)<r,action:e=>a=e.offsetTop+e.clientHeight+5},{check:e=>Math.abs(t+i-e.offsetTop)<r,action:e=>a=e.offsetTop-i-5},{check:t=>Math.abs(e+n-t.offsetLeft-t.clientWidth)<r,action:e=>o=e.offsetLeft+e.clientWidth-n},{check:t=>Math.abs(e-t.offsetLeft)<r,action:e=>o=e.offsetLeft},{check:t=>Math.abs(e+n-t.offsetLeft)<r,action:e=>o=e.offsetLeft-n-5},{check:t=>Math.abs(e-t.offsetLeft-t.clientWidth)<r,action:e=>o=e.offsetLeft+e.clientWidth+5}];return document.querySelectorAll(".section").forEach((e=>{s!=e&&c.forEach((({check:t,action:s})=>t(e)&&s(e)))})),o=Math.abs(window.innerWidth-o-n)<r?window.innerWidth-n:o,o=Math.abs(o)<r?0:o,a=Math.abs(window.innerHeight-a-i)<r?window.innerHeight-i:a,a=Math.abs(a)<r?0:a,{newXPos:o,newYPos:a}}static setPosition(e,t,s,i){e.preventDefault();let n=e.clientX-t,a=e.clientY-s,{newXPos:o,newYPos:r}=UI.stickMovingSection({x:n,y:a,stickySection:i});i.style.left=o+"px",i.style.top=r+"px"}static addDraggingEventForElements(e,t){}static generateAchievementPopup(e){let t=document.createElement("div");return t.classList.add("achiv-details-block","popup"),t.innerHTML=`\n      <h3 class="achievement__header">${e.Title} <p class="badge difficult-badge__${e.difficulty}">${e.difficulty}</p>\n      </h3>\n      <p>${e.Description}</p>\n      <div class="points">\n        <p><i class="description-icon  points-icon"></i>${e.Points}</p>\n        <p><i class="description-icon  retropoints-icon"></i>${e.TrueRatio} </p> \n         <p class="target-description-text" title="true ratio">\n          <i class="description-icon  ${e.retroRatio>13?"difficult-badge__hell":""}  rarity-icon"></i>\n          ${e.retroRatio}\n        </p>\n        <i class="description-icon ${e.type??"none"}"></i>            \n      </div>\n      ${e.DateEarnedHardcore?"<p>Earned hardcore: "+e.DateEarnedHardcore+"</p>":e.DateEarned?"<p>Earned softcore: "+e.DateEarned+"</p>":""}\n      <p>Earned by ${e.NumAwardedHardcore} (${e.NumAwarded}) of ${e.totalPlayers} players</p>\n      <p>Earned rate: ${e.rateEarnedHardcore} (${e.rateEarned})</p>\n      <p>Created : ${new Date(e.DateCreated).toLocaleDateString()} (${new Date(e.DateModified).toLocaleDateString()})</p>\n      <p>Created by: ${e.Author}</p>\n    `,t}static switchSectionVisibility({section:e,visible:t=!1}){e.classList.contains("hidden")||t?(e.classList.remove("disposed"),setTimeout((()=>e.classList.remove("hidden")),100),m.setNewPosition({id:e.id,hidden:!1})):(e.classList.add("hidden"),setTimeout((()=>e.classList.add("disposed")),300),m.setNewPosition({id:e.id,hidden:!0}))}static sortBy={latest:(e,t)=>{const s=e=>{const[t,s]=e.split(", "),[i,n,a]=t.split(".").map(Number),[o,r]=s.split(":").map(Number);return new Date(a,n-1,i,o,r)},i=e.DateEarnedHardcore?s(e.DateEarnedHardcore):e.DateEarned?s(e.DateEarned):-1/0;return(t.DateEarnedHardcore?s(t.DateEarnedHardcore):t.DateEarned?s(t.DateEarned):-1/0)-i},date:(e,t)=>(e.Date?new Date(e.Date):-1/0)-(t.Date?new Date(t.Date):-1/0),earnedCount:(e,t)=>t.NumAwardedHardcore-e.NumAwardedHardcore,points:(e,t)=>parseInt(e.Points)-parseInt(t.Points),truepoints:(e,t)=>e.TrueRatio-t.TrueRatio,default:(e,t)=>0!=e.DisplayOrder?e.DisplayOrder-t.DisplayOrder:e.achivId-t.achivId,id:(e,t)=>e.ID-t.ID,disable:(e,t)=>0,rating:(e,t)=>t.Rating-e.Rating,achievementsCount:(e,t)=>parseInt(e.NumAchievements)-parseInt(t.NumAchievements),title:(e,t)=>{let s=e.FixedTitle.toUpperCase(),i=t.FixedTitle.toUpperCase();return s<i?-1:s>i?1:0},award:(e,t)=>{const s={mastered:5,completed:4,"beaten-hardcore":3,"beaten-softcore":2,started:1},i=s[t.Award]??0,n=s[e.Award]??0,a=new Date(t.MostRecentAwardedDate),o=new Date(e.MostRecentAwardedDate);return i-n!=0?i-n:a-o},level:(e,t)=>e.level||t.level?e.level?t.level?e.level-t.level:-1:1:UI.sortBy.default(e,t)};static filterBy={earned:e=>e.DateEarnedHardcore,notEarned:e=>!e.DateEarnedHardcore,missable:e=>"missable"===e.type,progression:e=>"progression"===e.type||"win_condition"===e.type,all:()=>!0};static filterMethods={all:"all",earned:"earned",notEarned:"notEarned",missable:"missable",progression:"progression"};static sortMethods={latest:"latest",earnedCount:"earnedCount",points:"points",truepoints:"truepoints",disable:"disable",id:"id",default:"default",achievementsCount:"achievementsCount",title:"title",award:"award",rating:"rating",date:"date",level:"level"};async exportCompletionDataToXlsx(){const e=await _.SAVED_COMPLETION_PROGRESS,t=e?.Results.map((e=>({Title:e.Title,ID:e.GameID,Platform:d[e.ConsoleID],Award:e.HighestAwardKind,AwardDate:e.HighestAwardDate&&new Date(e.HighestAwardDate).toLocaleString(),LastEarnedDate:e.MostRecentAwardedDate&&new Date(e.MostRecentAwardedDate).toLocaleString(),TotalAchievements:e.NumAchievements,EarnedAchievements:e.NumAwardedHardcore,EarnedAchievementsSoftcore:e.NumAwarded,PlayedTime:g(m.ui.update_section.playTime[e.GameID]),Notes:m.ui.note_section?.game_notes&&m.ui.note_section.game_notes[e.GameID]?.replace(/;|\n/g," ")})));if(!t||0==t.length)return;const s=[...Object.keys(t[0])],i=t.map((e=>[e.Title,e.ID,e.Platform,e.Award,e.AwardDate,e.LastEarnedDate,e.TotalAchievements,e.EarnedAchievements,e.EarnedAchievementsSoftcore,e.PlayedTime,e.Notes])),n=[s.join(";"),...i.map((e=>e.join(";")))].join("\n"),a=new Blob([n],{type:"text/csv;charset=utf-8;"}),o=URL.createObjectURL(a),r=document.createElement("a");r.href=o,r.download="data.csv",document.body.appendChild(r),r.click(),document.body.removeChild(r),URL.revokeObjectURL(o)}}const r=e=>new Promise((t=>setTimeout(t,e)));function c(e){return e?.reduce(((e,t)=>e+`<i class="badge game-title_${t.toLowerCase()}">${t}</i> `),"")}const l=e=>{let t;const s=["level","levels","stage","area","world","mission","chapter","section","part","zone","phase","realm","domain","episode","act","sequence","tier","floor","dimension","region","floor","scene","🚩","in"].join("|");return t=((e,t)=>{const i=new RegExp(`(${s})(\\s|-\\s*|:\\s*)((\\d+-\\d+)|(\\d+))`,"gi"),n=new RegExp(`\\b${t?.join("\\b|\\b")}\\b`,"gi"),a=e.match(n),o=a?p.GAME_DATA.zones?.indexOf(a[0]):void 0,r=e.matchAll(i);let c;for(const e of r)c=e[3]?.replace("-",".");return o>=0&&(c=`${o+1}${c?.includes(".")?"."+c:""}`),Number(c)})((e=>{const t={first:1,second:2,third:3,fourth:4,fifth:5,sixth:6,seventh:7,eighth:8,ninth:9,tenth:10,"1st":1,"2nd":2,"3rd":3,"4th":4,"5th":5,"6th":6,"7th":7,"8th":8,"9th":9,"10th":10},s=new RegExp(Object.keys(t).join("|"),"gi");return e.replace(s,(e=>t[e.toLowerCase()]))})(e),p.GAME_DATA.zones),!!Number.isFinite(t)&&t},d={1:"Genesis/Mega Drive",2:"Nintendo 64",3:"SNES/Super Famicom",4:"Game Boy",5:"GB Advance",6:"GB Color",7:"NES/Famicom",8:"PC Engine/TurboGrafx-16",9:"Sega CD",10:"32X",11:"Master System",12:"PlayStation",13:"Atari Lynx",14:"Neo Geo Pocket",15:"Game Gear",16:"Game Cube",17:"Atari Jaguar",18:"Nintendo DS",21:"PlayStation 2",23:"Magnavox Odyssey 2",24:"Pokemon Mini",25:"Atari 2600",27:"Arcade",28:"Virtual Boy",29:"MSX",33:"SG-1000",37:"Amstrad CPC",38:"Apple II",39:"Saturn",40:"Dreamcast",41:"PlayStation Portable",43:"3DO Interactive Multiplayer",44:"ColecoVision",45:"Intellivision",46:"Vectrex",47:"PC-8000/8800",49:"PC-FX",51:"Atari 7800",53:"WonderSwan",56:"Neo Geo CD",57:"Fairchild Channel F",63:"Watara Supervision",69:"Mega Duck",71:"Arduboy",72:"WASM-4",73:"Arcadia 2001",74:"Interton VC 4000",75:"Elektor TV Games Computer",76:"PC Engine CD/TurboGrafx-CD",77:"Atari Jaguar CD",78:"Nintendo DSi",80:"Uzebox",101:"Events",102:"Standalone"},h={0:"",1:"Compilation",2:"Strategy",3:"Casino",4:"Music",5:"Action",6:"Platform",7:"Puzzle",8:"Quiz",9:"Shooter",10:"Vehicle Simulation",11:"Construction and Management Simulation",12:"Fighting",13:"Sports",14:"Role-Playing",15:"Racing",16:"Beat 'em Up",17:"Adventure",18:"Education",19:"Life Simulation",20:"Board Game",21:"Stealth",22:"Pinball",23:"Flight Simulator",24:"Visual Novel",25:"Horror",26:"Sandbox",27:"Party",28:"MMO"};function g(e){if(!e)return"";(e=parseInt(e)??0)<0&&(e*=-1);let t=Math.floor(e/3600),s=Math.floor(e%3600/60),i=e%60;t=t<10?"0"+t:t,s=s<10?"0"+s:s,i=i<10?"0"+i:i;return`${t}:${s}:${i}`}class APIWorker{get _savedCompletionProgress(){return m._cfg?.apiWorker?.completionProgress??{}}get SAVED_COMPLETION_PROGRESS(){let e=this._savedCompletionProgress;return e?.Total&&m._cfg.apiWorker.targetUser===m.targetUser?this.updateCompletionProgress({batchSize:20,savedArray:e.Results}).then((()=>this._savedCompletionProgress)):this.updateCompletionProgress({batchSize:500}).then((()=>this._savedCompletionProgress))}set SAVED_COMPLETION_PROGRESS(e){e.Results=e.Results.map((e=>(delete e.ConsoleName,delete e.NumLeaderboards,e))),m._cfg.apiWorker||(m._cfg.apiWorker={}),m._cfg.apiWorker.targetUser=m.targetUser,m._cfg.apiWorker.completionProgress=e,m.writeConfiguration()}baseUrl="https://retroachievements.org/API/";endpoints={userProfile:"API_GetUserProfile.php",gameProgress:"API_GetGameInfoAndUserProgress.php",recentAchieves:"API_GetUserRecentAchievements.php",gameInfo:"API_GetGame.php",extendedGameInfo:"API_GetGameExtended.php",recentlyPlayedGames:"API_GetUserRecentlyPlayedGames.php",userAwards:"API_GetUserAwards.php",userGameRankAndScore:"API_GetUserGameRankAndScore.php",completionProgress:"API_GetUserCompletionProgress.php",gameList:"API_GetGameList.php",userSummary:"API_GetUserSummary.php",achievementOfTheWeek:"API_GetAchievementOfTheWeek.php"};getUrl({endpoint:e,targetUser:t,gameID:s,minutes:i,apiKey:n,userName:a,achievesCount:o,count:r,offset:c}){let l=new URL(e,this.baseUrl),d={y:n||m.API_KEY,z:a||m.USER_NAME,u:t||m.targetUser,g:s||m.gameID,m:i||2e3,i:s||m.gameID,f:1,h:1,a:o||5,c:r||20,o:c||0};return l.search=new URLSearchParams(d),l}getAotW(){let e=this.getUrl({endpoint:this.endpoints.achievementOfTheWeek});return fetch(e).then((e=>e.json())).then((e=>{const t=e.Unlocks.find((e=>e.User.toLowerCase()===m.targetUser?.toLowerCase()?.trim()));return{...e.Achievement,ConsoleName:e.Console.Title,ForumTopic:e.ForumTopic.ID,GameID:e.Game.ID,GameTitle:e.Game.Title,StartAt:e.StartAt,TotalPlayers:e.TotalPlayers,UnlocksHardcoreCount:e.UnlocksHardcoreCount,isEarned:!!t,isEarnedHardcore:!!t&&!!t.HardcoreMode}}))}getUserGameRank({targetUser:e,gameID:t}){let s=this.getUrl({endpoint:this.endpoints.userRankAndScore});return fetch(s).then((e=>e.json()))}getProfileInfo({targetUser:e}){let t=this.getUrl({targetUser:e,endpoint:this.endpoints.userProfile});return fetch(t).then((e=>e.json()))}getUserCompelitionProgress({targetUser:e,count:t,offset:s}){let i=this.getUrl({targetUser:e||m.targetUser,count:t||100,offset:s||0,endpoint:this.endpoints.completionProgress});return fetch(i).then((e=>e.json())).then((e=>(e.Results=e.Results.map((e=>(e.ID=e.GameID,e.NumAchievements=e.MaxPossible,delete e.MaxPossible,delete e.NumLeaderboards,e))),e)))}getUserAwards({targetUser:e}){let t=this.getUrl({targetUser:e||m.targetUser,endpoint:this.endpoints.userAwards});return fetch(t).then((e=>e.json())).then((e=>(e.VisibleUserAwards=e.VisibleUserAwards.map((e=>({...e,DateEarnedHardcore:e.AwardedAt,timeString:this.toLocalTimeString(e.AwardedAt),award:"Events"==e.ConsoleName?"event":"Game Beaten"==e.AwardType?"1"==e.AwardDataExtra?"beaten":"beaten_softcore":"1"==e.AwardDataExtra?"mastered":"completed"}))),e)))}getGameProgress({targetUser:e,gameID:t}){let s=this.getUrl({endpoint:this.endpoints.gameProgress,targetUser:e||m.targetUser,gameID:t||m.gameID});return fetch(s).then((e=>e.json())).then((e=>{e={...e,...this.parseBadges(e),TotalRealPlayers:0,TotalRetropoints:0,progressionRetroRatio:0,beatenCount:1/0,masteredCount:1/0,beatenSoftCount:1/0,completedCount:1/0,earnedStats:{soft:{count:0,points:0,retropoints:0,progressionCount:0},hard:{count:0,points:0,retropoints:0,progressionCount:0}}};const t={Count:0,WinCount:0,WinAwardedCount:0,WinAwardedSoftCount:0,WinEarnedCount:0},s={isBeaten:!0,isBeatenSoftcore:!0,isWinEarned:!1,isWinEarnedSoftcore:!1};for(let i of Object.values(e.Achievements))e.TotalRetropoints+=i.TrueRatio,e.TotalRealPlayers<i.NumAwarded&&(e.TotalRealPlayers=i.NumAwarded),i.DateEarned&&(e.earnedStats.soft.count+=1,e.earnedStats.soft.points+=i.Points,e.earnedStats.soft.retropoints+=i.TrueRatio,"progression"!==i.type&&"win_condition"!==i.type||e.earnedStats.soft.progressionCount++),i.DateEarnedHardcore&&(e.earnedStats.hard.count+=1,e.earnedStats.hard.points+=i.Points,e.earnedStats.hard.retropoints+=i.TrueRatio,"progression"!==i.type&&"win_condition"!==i.type||e.earnedStats.hard.progressionCount++),"progression"===i.type?(t.Count++,!i.DateEarned&&(s.isBeatenSoftcore=!1),!i.DateEarnedHardcore&&(s.isBeaten=!1),e.beatenCount=Math.min(i.NumAwardedHardcore,e.beatenCount),e.beatenSoftCount=Math.min(i.NumAwarded,e.beatenSoftCount)):"win_condition"===i.type&&(t.WinCount++,t.WinAwardedCount=Math.max(i.NumAwardedHardcore,t.WinAwardedCount),t.WinAwardedSoftCount=Math.max(i.NumAwarded,t.WinAwardedSoftCount),i.DateEarnedHardcore&&t.WinEarnedCount++,s.isWinEarned=!!i.DateEarnedHardcore,s.isWinEarnedSoftcore=!!i.DateEarned),e.masteredCount=Math.min(i.NumAwardedHardcore,e.masteredCount),e.completedCount=Math.min(i.NumAwarded,e.completedCount);(e={...e,winVariantCount:t.WinCount,winEarnedCount:t.WinEarnedCount,progressionSteps:t.WinCount>0?t.Count+1:t.Count}).award=e.NumAchievements===e.NumAwardedToUserHardcore?"mastered":e.NumAchievements===e.NumAwardedToUser?"completed":e.award,e.progressionAward=s.isBeaten&&e.earnedStats.hard.progressionCount>=e.progressionSteps?"beaten":s.isBeatenSoftcore&&e.earnedStats.soft.progressionCount>=e.progressionSteps?"beaten-softcore":e.progressionAward,t.WinCount>0&&(e.beatenCount=t.WinAwardedCount,e.beatenSoftCount=t.WinAwardedSoftCount),e.beatenCount!=1/0&&(e.beatenRate=~~(1e4*e.beatenCount/e.TotalRealPlayers)/100),e.beatenSoftCount!=1/0&&(e.beatenSoftRate=~~(1e4*e.beatenSoftCount/e.TotalRealPlayers)/100),e.masteredCount!=1/0&&(e.masteryRate=~~(1e4*e.masteredCount/e.TotalRealPlayers)/100),e.completedCount!=1/0&&(e.completedRate=~~(1e4*e.completedCount/e.TotalRealPlayers)/100);const i=~~(e.TotalRetropoints/e.points_total*100)/100;return e.retroRatio=i,e.gameDifficulty=i>9?"insane":i>7?"expert":i>5?"pro":i>3?"standard":"easy",Object.values(e.Achievements).map((t=>this.fixAchievement(t,e))),this.parseCheevoLevels(e),this.parseCheevosGenres(e),e}))}getRecentAchieves({targetUser:e,minutes:t}){let s=this.getUrl({endpoint:this.endpoints.recentAchieves,targetUser:e,minutes:t});return fetch(s).then((e=>e.json())).then((e=>e.map((e=>(e.Date=this.toLocalTimeString(e.Date),e)))))}getGameInfo({gameID:e,extended:t}){let s=this.getUrl({endpoint:this.endpoints[t?"extendedGameInfo":"gameInfo"],gameID:e});return fetch(s).then((e=>e.json()))}getRecentlyPlayedGames({targetUser:e,count:t}){let s=this.getUrl({endpoint:this.endpoints.recentlyPlayedGames,targetUser:e,count:t||50});return fetch(s).then((e=>e.json())).then((e=>e.map(((e,t)=>({...e,...this.parseBadges(e),ID:e.GameID,Points:e.ScoreAchievedHardcore+"/"+e.PossibleScore,NumAchievements:e.NumAchievedHardcore+"/"+e.AchievementsTotal,DateEarnedHardcore:e.LastPlayed})))))}getUserProfile({userName:e}){let t=this.getUrl({targetUser:e,userName:e,endpoint:this.endpoints.userProfile});return fetch(t).then((e=>e.json()))}getUserSummary({targetUser:e,gamesCount:t=3,achievesCount:s}){let i=this.getUrl({targetUser:e,gameID:t,achievesCount:s,endpoint:this.endpoints.userSummary});return fetch(i).then((e=>e.json())).then((e=>(e.RecentlyPlayed=e.RecentlyPlayed.map((t=>(t.LastPlayed=this.toLocalTimeString(t.LastPlayed),e.Awarded[t.GameID]&&(t={...t,...e.Awarded[t.GameID]}),t))),e.RecentAchievements=Object.values(e.RecentAchievements).flatMap((e=>Object.values(e))).map((e=>(e.DateAwarded=this.toLocalTimeString(e.DateAwarded),e))),e.RecentlyPlayed.length&&(e.isInGame=new Date-new Date(e.RecentlyPlayed[0].LastPlayed)<3e5),e)))}verifyUserIdent({userName:e,apiKey:t}){let s=this.getUrl({targetUser:e,userName:e,apiKey:t,endpoint:this.endpoints.userProfile});return fetch(s).then((e=>e.json()))}getGameList({userName:e,apiKey:t,systemID:s}){let i=this.getUrl({userName:e,apiKey:t,gameID:s,endpoint:this.endpoints.gameList});return fetch(i).then((e=>e.json()))}doTestEndpoint({endpoint:e}){let t=this.getUrl({endpoint:e});return fetch(t).then((e=>e.json())).then((e=>console.log(e)))}async updateCompletionProgress({savedArray:e=[],completionProgress:t=[],batchSize:s=500}){let i=await this.getUserCompelitionProgress({count:s,offset:t.length}),n=(t=[...t,...i.Results]).at(-1);if(e.findIndex((e=>e.hasOwnProperty("GameID")&&e.GameID===n.GameID&&e.MostRecentAwardedDate===n.MostRecentAwardedDate))>=0||t.length===i.Total){const s=t.map((e=>e.GameID));e=e.filter((e=>!s.includes(e.GameID))),e=[...t,...e],this.SAVED_COMPLETION_PROGRESS={Total:e.length,Results:e}}else setTimeout((()=>this.updateCompletionProgress({savedArray:e,completionProgress:t,batchSize:s})),100)}fixAchievement(e,t){const{BadgeName:s,DateEarned:i,DateEarnedHardcore:n,NumAwardedHardcore:a,NumAwarded:o,TrueRatio:r,ID:c,Points:l}=e,{NumDistinctPlayers:d,NumAwardedToUserHardcore:h,TotalRealPlayers:g}=t,u=100*(a-.5*h)/(.5*(d+g)-.5*h),m=100*a/d;t.Achievements[c]={...e,totalPlayers:d,isEarned:!!i,isHardcoreEarned:!!n,DateEarned:i&&this.toLocalTimeString(i),DateEarnedHardcore:n&&this.toLocalTimeString(n),prevSrc:`https://media.retroachievements.org/Badge/${s}.png`,rateEarned:~~(100*o/d)+"%",rateEarnedHardcore:a<20?a:m<10?`${m.toFixed(1)}%`:`${m.toFixed(0)}%`,trend:u,retroRatio:(r/l).toFixed(2),difficulty:u<1.5&&r>300||r>=500?"hell":u<=3&&r>100||r>=300?"insane":u<8&&r>24?"expert":u<13&&r>10?"pro":u<20&&r>5||r>10?"standard":"easy"}}parseBadges(e){let t=e.Title;const s=[/\[SUBSET[^\[]*\]/gi,/~[^~]*~/g,".HACK//"].reduce(((s,i)=>{const n=new RegExp(i,"gi"),a=e.Title.match(n);return a&&a.forEach((e=>{t=t.replace(e,"");let i=e;s.push(i.replace(/[~\.\[\]]|subset -|\/\//gi,""))})),s}),[]);return e.badges=s,e.FixedTitle=t.trim(),{badges:s,FixedTitle:t.trim()}}toLocalTimeString(e){!/(\+00\:00$)|(z$)/gi.test(e)&&(e+="+00:00");return new Date(e).toLocaleDateString("uk-UA",{day:"2-digit",month:"2-digit",year:"numeric",hour:"2-digit",minute:"2-digit",hour12:!1})}parseCheevoLevels(e){const t=Object.values(e.Achievements).sort(((e,t)=>0!=e.DisplayOrder?e.DisplayOrder-t.DisplayOrder:e.ID-t.ID)),s=t.reduce(((e,t)=>{const s=(e=>{const t=["Stage","Stages","Area","World","Mission","Chapter","Section","Zone","Scene"],s=["Clear","Complete","Beat","Start","Enter","Reach","Select","Bonus","No"],i=function(e){const i=[...t,...t.map((e=>e.toLowerCase()))].join("\\b|\\b"),n=s.join("\\b|\\b"),a="\\b[A-Z]\\w*",o=new RegExp(`((?:\\b${i}\\b)\\s(?!\\b${n}\\b)((${a}\\b\\s*){1,2}))|((?!\\b${n}\\b)((${a}\\s){1,2})(?:\\b${i}\\b(?!\\s*\\d)))`,"gm").exec(e),r=o&&(o[2]||o[5]);return r?.trim()}(e.Description);return i})(t);s&&(e.zoneCount++,!e.zoneNames.includes(s)&&e.zoneNames.push(s));const i=(e=>{const t=["level","levels","stage\\b","stages","area","world","mission","chapter","section","part","zone","phase","realm","domain","episode","act","acts","sequence","tier","floor","floors","dimension","region","scene","screen","round\\b","course"],s={one:"1",first:"1",two:"2",second:"2",three:"3",third:"3",four:"4",fourth:"4",five:"5",fifth:"5",six:"6",sixth:"6",seven:"7",seventh:"7",eight:"8",eighth:"8",nine:"9",ninth:"9",ten:"10",tenth:"10",eleven:"11",eleventh:"11",twelve:"12",twelfth:"12",thirteen:"13",thirteenth:"13",fourteen:"14",fourteenth:"14",fifteen:"15",fifteenth:"15",sixteen:"16",sixteenth:"16",seventeen:"17",seventeenth:"17",eighteen:"18",eighteenth:"18",nineteen:"19",nineteenth:"19",twenty:"20",twentieth:"20"},i=function(e){const s=t.join("|"),i="(?!\\d{4,}|\\d+%)(\\d{1,3}(?:-\\d{1,3}\\b){0,1})",n=new RegExp(`(?:(${s})\\s(?<level1>${i}))|(?<level2>${i})\\s(?:(${s}))|(?<level3>\\b\\d{1,3}-\\d{1,2}\\b)`,"gi").exec(e);if(n){const e=n.groups.level1||n.groups.level2||n.groups.level3;return parseFloat(e?.replace("-","."))}return null}(function(e){e=e.replaceAll(/(\d)(st|nd|rd|th)/gi,((e,t)=>t));const t=new RegExp(Object.keys(s).map((e=>`\\b${e}\\b`)).join("|"),"gi");return e.replace(t,(e=>s[e.toLowerCase().trim()]))}(e.Description));return i})(t);return i&&e.levelCount++,e.data.push({ID:t.ID,zone:s,level:i}),e}),{zoneCount:0,levelCount:0,data:[],zoneNames:[]});s?.zoneNames?.forEach(((t,i)=>{Object.values(e.Achievements).forEach((e=>{const n=new RegExp(`\\b${t}\\b`,"g");(n.test(e.Description)||n.test(e.Title))&&(e.zone=t,e.level=i+1,s.zoneCount++)}))})),s.zoneNames.length>3&&s.zoneCount>4&&s.zoneCount>=s.levelCount?(s.zoneNames=((e,t)=>e.reduce(((e,s)=>(t.forEach((t=>{const i=new RegExp(`\\b${t}\\b`,"g");!e.includes(t)&&(i.test(s.Title)||i.test(s.Description))&&e.push(t)})),e)),[]))(t,s.zoneNames),e.zones=s.zoneNames,s.data.forEach((t=>{t.zone&&(e.Achievements[t.ID].zone=t.zone,e.Achievements[t.ID].level=+`${s.zoneNames.indexOf(t.zone)+1}${t.level?"."+t.level:""}`)}))):s.levelCount>3&&s.data.forEach((t=>{delete e.Achievements[t.ID].zone,e.Achievements[t.ID].level=t.level}))}parseCheevosGenres(e){Object.values(e.Achievements).forEach((e=>{e.genres=[],(e=>{const t="\\b"+["Defeat","defeat","(K|k)ill"].join("\\b|\\b")+"\\b",s="\\b"+["(?:T|t)he\\b","(?:M|m)rs{0,1}\\b[.]*","(?:D|d)r\\b[.]*"].join("|\\b"),i="\\b"+["All"].join("\\b|\\b")+"\\b";return new RegExp(`((${t})\\s*(${s})*\\s*(?!${i})(?:(['"]*[A-Z]\\w*\\b)|((all)*[\\s\\w]*boss(es)*)))`,"g").exec(e.Description)})(e)&&e.genres.push("bossfight"),(e=>{const t="\\b"+["(?:C|c)ollect","by collecting","(?:O|o)btain","(?:S|s)till","(?:P|p)ick\\sup"].join("\\b|\\b")+"\\b",s=["(?:P|p)oints","(?:S|s)core"].join("|");return new RegExp(`(?:${t})(?![^.]*(?:${s}))[^.]+(?:.|w$)`,"g").exec(e.Description)})(e)&&e.genres.push("collector"),(e=>new RegExp("(((W|w)ithout|no)\\b[\\s\\w]*((D|d)amage|(H|h)armed)|(\\b(with)|at)\\b\\sfull\\s(\\b(health)|(life)))","gi").exec(e.Description))(e)&&e.genres.push("no-damage"),(e=>{const t=["without\\sdying","(without|\\bno(t)*)\\slosing\\s(a)*\\slife","\\bno(t)*\\s(dying|death)"].join("|");return new RegExp(`${t},"gi"`).exec(e.Description)})(e)&&e.genres.push("no-death"),(e=>{const t=["\\b(?:M|m)inute","\\b(?:S|s)econds","\\b(?:H|h)our"].join("|");return new RegExp(`((?:\\bin\\b|\\bless|\\bunder|\\bfor|\\within)[\\s\\w\\d:]*(?:${t}))|(.*\\d{0,2}:\\d{2})`,"g").exec(e.Description)})(e)&&e.genres.push("timetrial"),(e=>{const t="\\b"+["(?:S|s)core(?:d|s){0,1}","(?:(P|p)oints{0,1})","(?:PTS|pts|Pts)","(?:E|e)arn"].join("\\b|\\b")+"\\b",s="\\d{1,3}[.,]{0,1}(?:\\d{3,}[.,]{0,1})+";return new RegExp(`(?:(?:${t})[^.]+)${s}|(?:${s}[^.]+(?:${t}))`,"g").exec([e.Title,e.Description].join(". "))})(e)&&e.genres.push("score")}))}async rawgSearchGame({gameTitle:e,platformID:t}){e=e.split("|")[0];const s=u[t];if(!s)return!1;let i=new URL("games","https://api.rawg.io/api/"),n={search:e,platforms:s,key:"179353905bcb491d975b1fc03b3c8bd6"};i.search=new URLSearchParams(n);try{const s=await fetch(i);if(!s.ok)return console.log(`HTTP error! status: ${s.status}`),!1;const n=await s.json(),a=n.results?n.results[0]:null,o=e.replace(/[^a-z0-9]/gi," ").trim(),r=a?.name.replace(/[^a-z0-9]/gi," ").trim()??"";if(!a||o!==r)return console.log(`Game not found for title: ${e} on platform: ${t}`),!1;const c=["name","playtime","released","background_image","rating","ratings","added","metacritic","score","community_rating","genres"];return Object.fromEntries(Object.entries(a).filter((([e])=>c.includes(e))))}catch(e){return console.log(`Fetch error: ${e.message}`),!1}}}const u={1:167,2:83,3:79,4:26,5:24,6:43,7:49,8:null,9:119,10:117,11:74,12:27,13:46,14:null,15:77,17:112,18:9,21:15,23:null,24:null,25:23,27:12,28:null,29:null,33:null,37:null,38:41,39:107,40:106,41:17,43:111,44:null,45:null,46:null,47:null,49:null,51:28,53:null,56:null,57:null,63:null,69:null,71:null,72:null,73:null,74:null,75:null,76:null,77:null,78:13,80:null,101:null,102:null};let m,p,_;const E=navigator.userAgent||navigator.vendor||window.opera;/android/i.test(E)||/iPhone/.test(E)&&!window.MSStream?window.location.href="./mobile/index.html":(m=new Config,p=new UI,_=new APIWorker,window.ui=p,window.config=m,window.apiWorker=_),m.identConfirmed||(console.log("redirect to login"),window.location.href="./login"),document.addEventListener("keydown",(function(e){const t=["ArrowUp","ArrowUp","ArrowDown","ArrowDown","ArrowLeft","ArrowRight","ArrowLeft","ArrowRight","KeyB","KeyA"],s=e.code;s===t[v.length]?(v.push(s),v.length===t.length&&(S=1===S?2:1,function(){A&&clearTimeout(A),document.querySelector("#secret")?.remove();let e=document.createElement("audio");10!==v.length&&(e=null),v=[],e.id="secret",e.innerHTML=`\n    <source src="./assets/s/ss-${S}.m4a" type="audio/mpeg">\n  `,p.app.appendChild(e),e.play();const t=document.querySelector("#background-animation");t.style.opacity=0,setTimeout((()=>{t.style.opacity=1,t.classList.add("secret"),document.querySelector("#background-animation").style.display="block"}),2e3);A=setTimeout((()=>{t.classList.remove("secret"),document.querySelector("#background-animation").style.display=m.bgVisibility?"block":"none"}),1e3*(2===S?240:66))}())):v=[]}));let v=[],S=0,A=0})();